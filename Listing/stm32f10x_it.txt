; generated by Component: ARM Compiler 5.06 update 2 (build 183) Tool: ArmCC [4d35cd]
; commandline ArmCC [--list --debug -c --asm --interleave -o..\..\output\stm32f10x_it.o --asm_dir=..\..\Listing\ --list_dir=..\..\Listing\ --depend=..\..\output\stm32f10x_it.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\..\Libraries\CMSIS -I..\..\User -I..\..\Libraries\FWlib\inc -I..\..\User\Alogrisem\inc -I..\..\User\BSP_Init\inc -I..\..\User\exDev\inc -IH:\CETC\Project\第二代机器鱼程序\AV1.3\Project\RVMDK（uv4）\RTE -ID:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\1.0.5\Device\Include -ID:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=520 -DSTM32F10X_HD -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -W --omf_browse=..\..\output\stm32f10x_it.crf ..\..\User\stm32f10x_it.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  NMI_Handler PROC
;;;55       */
;;;56     void NMI_Handler(void)
000000  4770              BX       lr
;;;57     {
;;;58     }
;;;59     
                          ENDP

                  HardFault_Handler PROC
;;;64       */
;;;65     void HardFault_Handler(void)
000002  bf00              NOP      
                  |L1.4|
;;;66     {
;;;67       /* Go to infinite loop when Hard Fault exception occurs */
;;;68       while (1)
000004  e7fe              B        |L1.4|
;;;69       {
;;;70       }
;;;71     }
;;;72     
                          ENDP

                  MemManage_Handler PROC
;;;77       */
;;;78     void MemManage_Handler(void)
000006  bf00              NOP      
                  |L1.8|
;;;79     {
;;;80       /* Go to infinite loop when Memory Manage exception occurs */
;;;81       while (1)
000008  e7fe              B        |L1.8|
;;;82       {
;;;83       }
;;;84     }
;;;85     
                          ENDP

                  BusFault_Handler PROC
;;;90       */
;;;91     void BusFault_Handler(void)
00000a  bf00              NOP      
                  |L1.12|
;;;92     {
;;;93       /* Go to infinite loop when Bus Fault exception occurs */
;;;94       while (1)
00000c  e7fe              B        |L1.12|
;;;95       {
;;;96       }
;;;97     }
;;;98     
                          ENDP

                  UsageFault_Handler PROC
;;;103      */
;;;104    void UsageFault_Handler(void)
00000e  bf00              NOP      
                  |L1.16|
;;;105    {
;;;106      /* Go to infinite loop when Usage Fault exception occurs */
;;;107      while (1)
000010  e7fe              B        |L1.16|
;;;108      {
;;;109      }
;;;110    }
;;;111    
                          ENDP

                  SVC_Handler PROC
;;;116      */
;;;117    void SVC_Handler(void)
000012  4770              BX       lr
;;;118    {
;;;119    }
;;;120    
                          ENDP

                  DebugMon_Handler PROC
;;;125      */
;;;126    void DebugMon_Handler(void)
000014  4770              BX       lr
;;;127    {
;;;128    }
;;;129    
                          ENDP

                  PendSV_Handler PROC
;;;134      */
;;;135    void PendSV_Handler(void)
000016  4770              BX       lr
;;;136    {
;;;137    }
;;;138    
                          ENDP

                  SysTick_Handler PROC
;;;143      */
;;;144    void SysTick_Handler(void)
000018  b510              PUSH     {r4,lr}
;;;145    {
;;;146    	TimingDelay_Decrement();	
00001a  f7fffffe          BL       TimingDelay_Decrement
;;;147    }
00001e  bd10              POP      {r4,pc}
;;;148    
                          ENDP

                  TIM6_IRQHandler PROC
;;;173      */
;;;174    void TIM6_IRQHandler(void)// 中断时间100ms
000020  b510              PUSH     {r4,lr}
;;;175    {	
;;;176    
;;;177    	if (TIM_GetITStatus(TIM6, TIM_IT_Update) != RESET)
000022  2101              MOVS     r1,#1
000024  4874              LDR      r0,|L1.504|
000026  f7fffffe          BL       TIM_GetITStatus
00002a  b118              CBZ      r0,|L1.52|
;;;178    		{	
;;;179    /*****************MY_APP_CODE*******************/
;;;180    
;;;181    /********************OVER***********************/
;;;182    			TIM_ClearITPendingBit(TIM6, TIM_IT_Update); 
00002c  2101              MOVS     r1,#1
00002e  4872              LDR      r0,|L1.504|
000030  f7fffffe          BL       TIM_ClearITPendingBit
                  |L1.52|
;;;183    		}
;;;184    }
000034  bd10              POP      {r4,pc}
;;;185    
                          ENDP

                  TIM4_IRQHandler PROC
;;;190      */
;;;191    void TIM4_IRQHandler(void)// 中断时间1ms
000036  e92d47f0          PUSH     {r4-r10,lr}
;;;192    {	
;;;193    
;;;194    	if (TIM_GetITStatus(TIM4, TIM_IT_Update) != RESET)
00003a  2101              MOVS     r1,#1
00003c  486f              LDR      r0,|L1.508|
00003e  f7fffffe          BL       TIM_GetITStatus
000042  2800              CMP      r0,#0
000044  d07d              BEQ      |L1.322|
;;;195    		{	
;;;196    /*****************MY_APP_CODE*******************/
;;;197            /* 躯干CPG计算及输出 */
;;;198    		cpg_run();
000046  f7fffffe          BL       cpg_run
;;;199    		PWMoutput1 = (uint16_t)(1500 + (2000*theta[0])/3.1415);
00004a  486d              LDR      r0,|L1.512|
00004c  6801              LDR      r1,[r0,#0]  ; theta
00004e  486d              LDR      r0,|L1.516|
000050  f7fffffe          BL       __aeabi_fmul
000054  4682              MOV      r10,r0
000056  f7fffffe          BL       __aeabi_f2d
00005a  4680              MOV      r8,r0
00005c  4a6a              LDR      r2,|L1.520|
00005e  4b6b              LDR      r3,|L1.524|
000060  f7fffffe          BL       __aeabi_ddiv
000064  4606              MOV      r6,r0
000066  2200              MOVS     r2,#0
000068  4b69              LDR      r3,|L1.528|
00006a  f7fffffe          BL       __aeabi_dadd
00006e  4604              MOV      r4,r0
000070  f7fffffe          BL       __aeabi_d2uiz
000074  4967              LDR      r1,|L1.532|
000076  8008              STRH     r0,[r1,#0]
;;;200    		PWMoutput2 = (uint16_t)(1500 + (2000*theta[1])/3.1415);
000078  4861              LDR      r0,|L1.512|
00007a  6841              LDR      r1,[r0,#4]  ; theta
00007c  4861              LDR      r0,|L1.516|
00007e  f7fffffe          BL       __aeabi_fmul
000082  4682              MOV      r10,r0
000084  f7fffffe          BL       __aeabi_f2d
000088  4606              MOV      r6,r0
00008a  4a5f              LDR      r2,|L1.520|
00008c  4b5f              LDR      r3,|L1.524|
00008e  f7fffffe          BL       __aeabi_ddiv
000092  4680              MOV      r8,r0
000094  2200              MOVS     r2,#0
000096  4b5e              LDR      r3,|L1.528|
000098  f7fffffe          BL       __aeabi_dadd
00009c  4604              MOV      r4,r0
00009e  f7fffffe          BL       __aeabi_d2uiz
0000a2  495c              LDR      r1,|L1.532|
0000a4  1d09              ADDS     r1,r1,#4
0000a6  8008              STRH     r0,[r1,#0]
;;;201    		PWMoutput3 = (uint16_t)(1500 + (2000*theta[2])/3.1415);
0000a8  4855              LDR      r0,|L1.512|
0000aa  6881              LDR      r1,[r0,#8]  ; theta
0000ac  4855              LDR      r0,|L1.516|
0000ae  f7fffffe          BL       __aeabi_fmul
0000b2  4682              MOV      r10,r0
0000b4  f7fffffe          BL       __aeabi_f2d
0000b8  4680              MOV      r8,r0
0000ba  4a53              LDR      r2,|L1.520|
0000bc  4b53              LDR      r3,|L1.524|
0000be  f7fffffe          BL       __aeabi_ddiv
0000c2  4606              MOV      r6,r0
0000c4  2200              MOVS     r2,#0
0000c6  4b52              LDR      r3,|L1.528|
0000c8  f7fffffe          BL       __aeabi_dadd
0000cc  4604              MOV      r4,r0
0000ce  f7fffffe          BL       __aeabi_d2uiz
0000d2  4950              LDR      r1,|L1.532|
0000d4  3108              ADDS     r1,r1,#8
0000d6  8008              STRH     r0,[r1,#0]
;;;202    		/* 胸鳍CPG计算及输出(使用PWM通道TIM2-1 TIM2-2) */	
;;;203    		Pectoral_CPG_Calculate();
0000d8  f7fffffe          BL       Pectoral_CPG_Calculate
;;;204            PectoralPWMOutputLeft = (uint16_t)(1500 + (2000*Pectoral_Theta[0])/3.1415);
0000dc  484e              LDR      r0,|L1.536|
0000de  6801              LDR      r1,[r0,#0]  ; Pectoral_Theta
0000e0  4848              LDR      r0,|L1.516|
0000e2  f7fffffe          BL       __aeabi_fmul
0000e6  4682              MOV      r10,r0
0000e8  f7fffffe          BL       __aeabi_f2d
0000ec  4606              MOV      r6,r0
0000ee  4a46              LDR      r2,|L1.520|
0000f0  4b46              LDR      r3,|L1.524|
0000f2  f7fffffe          BL       __aeabi_ddiv
0000f6  4604              MOV      r4,r0
0000f8  2200              MOVS     r2,#0
0000fa  4b45              LDR      r3,|L1.528|
0000fc  f7fffffe          BL       __aeabi_dadd
000100  4680              MOV      r8,r0
000102  f7fffffe          BL       __aeabi_d2uiz
000106  4943              LDR      r1,|L1.532|
000108  310c              ADDS     r1,r1,#0xc
00010a  8008              STRH     r0,[r1,#0]
;;;205            PectoralPWMOutputRight= (uint16_t)(1500 + (2000*Pectoral_Theta[1])/3.1415);
00010c  4842              LDR      r0,|L1.536|
00010e  6841              LDR      r1,[r0,#4]  ; Pectoral_Theta
000110  483c              LDR      r0,|L1.516|
000112  f7fffffe          BL       __aeabi_fmul
000116  4682              MOV      r10,r0
000118  f7fffffe          BL       __aeabi_f2d
00011c  4680              MOV      r8,r0
00011e  4a3a              LDR      r2,|L1.520|
000120  4b3a              LDR      r3,|L1.524|
000122  f7fffffe          BL       __aeabi_ddiv
000126  4606              MOV      r6,r0
000128  2200              MOVS     r2,#0
00012a  4b39              LDR      r3,|L1.528|
00012c  f7fffffe          BL       __aeabi_dadd
000130  4604              MOV      r4,r0
000132  f7fffffe          BL       __aeabi_d2uiz
000136  f04f4180          MOV      r1,#0x40000000
00013a  8688              STRH     r0,[r1,#0x34]
;;;206            /* 仿真波形打印 */    
;;;207    		OutData[0] = (int)((Pectoral_Theta[0] / 3.1415) * 180);
00013c  4936              LDR      r1,|L1.536|
00013e  6808              LDR      r0,[r1,#0]  ; Pectoral_Theta
000140  e000              B        |L1.324|
                  |L1.322|
000142  e02c              B        |L1.414|
                  |L1.324|
000144  f7fffffe          BL       __aeabi_f2d
000148  4680              MOV      r8,r0
00014a  4a2f              LDR      r2,|L1.520|
00014c  4b2f              LDR      r3,|L1.524|
00014e  f7fffffe          BL       __aeabi_ddiv
000152  4606              MOV      r6,r0
000154  2200              MOVS     r2,#0
000156  4b31              LDR      r3,|L1.540|
000158  f7fffffe          BL       __aeabi_dmul
00015c  4604              MOV      r4,r0
00015e  f7fffffe          BL       __aeabi_d2iz
000162  b200              SXTH     r0,r0
000164  492e              LDR      r1,|L1.544|
000166  8008              STRH     r0,[r1,#0]
;;;208    		OutData[1] = (int)((Pectoral_Theta[1] / 3.1415) * 180);
000168  492b              LDR      r1,|L1.536|
00016a  6848              LDR      r0,[r1,#4]  ; Pectoral_Theta
00016c  f7fffffe          BL       __aeabi_f2d
000170  4680              MOV      r8,r0
000172  4a25              LDR      r2,|L1.520|
000174  4b25              LDR      r3,|L1.524|
000176  f7fffffe          BL       __aeabi_ddiv
00017a  4606              MOV      r6,r0
00017c  2200              MOVS     r2,#0
00017e  4b27              LDR      r3,|L1.540|
000180  f7fffffe          BL       __aeabi_dmul
000184  4604              MOV      r4,r0
000186  f7fffffe          BL       __aeabi_d2iz
00018a  b200              SXTH     r0,r0
00018c  4924              LDR      r1,|L1.544|
00018e  8048              STRH     r0,[r1,#2]
;;;209    		OutData[2] = 0;//(int)((theta[2] / 3.1415) * 180);
000190  2000              MOVS     r0,#0
000192  8088              STRH     r0,[r1,#4]
;;;210    		OutData[3] = 0;
000194  80c8              STRH     r0,[r1,#6]
;;;211    /********************OVER***********************/
;;;212    			TIM_ClearITPendingBit(TIM4, TIM_IT_Update); 
000196  2101              MOVS     r1,#1
000198  4818              LDR      r0,|L1.508|
00019a  f7fffffe          BL       TIM_ClearITPendingBit
                  |L1.414|
;;;213    		}
;;;214    }
00019e  e8bd87f0          POP      {r4-r10,pc}
;;;215    
                          ENDP

                  TIM1_IRQHandler PROC
;;;222    **************************************************************************/
;;;223    void TIM1_IRQHandler()
0001a2  4920              LDR      r1,|L1.548|
;;;224    {
;;;225    	u16 tsr;
;;;226    	tsr=TIM1->SR;	
0001a4  8808              LDRH     r0,[r1,#0]
;;;227    	if(tsr&0X0001)
;;;228    	{
;;;229    																				
;;;230    	}				   
;;;231    	TIM1->SR&=~(1<<0);
0001a6  8809              LDRH     r1,[r1,#0]
0001a8  f0210101          BIC      r1,r1,#1
0001ac  4a1d              LDR      r2,|L1.548|
0001ae  8011              STRH     r1,[r2,#0]
;;;232    }
0001b0  4770              BX       lr
;;;233    
                          ENDP

                  TIM8_IRQHandler PROC
;;;259    **************************************************************************/
;;;260    void TIM8_IRQHandler()
0001b2  491d              LDR      r1,|L1.552|
;;;261    {
;;;262    	u16 tsr;
;;;263    	tsr=TIM8->SR;	
0001b4  8808              LDRH     r0,[r1,#0]
;;;264    	if(tsr&0X0001)
;;;265    	{
;;;266    																				
;;;267    	}				   
;;;268    	TIM8->SR&=~(1<<0);
0001b6  8809              LDRH     r1,[r1,#0]
0001b8  f0210101          BIC      r1,r1,#1
0001bc  4a1a              LDR      r2,|L1.552|
0001be  8011              STRH     r1,[r2,#0]
;;;269    }
0001c0  4770              BX       lr
;;;270    /**************************************************************************
                          ENDP

                  USART1_IRQHandler PROC
;;;275    **************************************************************************/
;;;276    void USART1_IRQHandler(void)
0001c2  b510              PUSH     {r4,lr}
;;;277    {
;;;278    	uint8_t ch;
;;;279    	
;;;280    	if(USART_GetITStatus(USART1, USART_IT_RXNE) != RESET)
0001c4  f2405125          MOV      r1,#0x525
0001c8  4818              LDR      r0,|L1.556|
0001ca  f7fffffe          BL       USART_GetITStatus
0001ce  b130              CBZ      r0,|L1.478|
;;;281    	{ 	
;;;282    			ch = USART_ReceiveData(USART1);
0001d0  4816              LDR      r0,|L1.556|
0001d2  f7fffffe          BL       USART_ReceiveData
0001d6  b2c4              UXTB     r4,r0
;;;283    //		USART1_SendByte(ch);
;;;284    		FrameCharGet(ch);
0001d8  4620              MOV      r0,r4
0001da  f7fffffe          BL       FrameCharGet
                  |L1.478|
;;;285    //			PCout(13) = 1;
;;;286    //			FrameGet(ch);
;;;287    	} 
;;;288    }	
0001de  bd10              POP      {r4,pc}
;;;289    
                          ENDP

                  USART2_IRQHandler PROC
;;;295    **************************************************************************/
;;;296    void USART2_IRQHandler(void)
0001e0  b510              PUSH     {r4,lr}
;;;297    {
;;;298    	uint8_t ch;
;;;299    	
;;;300    	if(USART_GetITStatus(USART2, USART_IT_RXNE) != RESET)
0001e2  f2405125          MOV      r1,#0x525
0001e6  4812              LDR      r0,|L1.560|
0001e8  f7fffffe          BL       USART_GetITStatus
0001ec  b118              CBZ      r0,|L1.502|
;;;301    	{ 	
;;;302    			ch = USART_ReceiveData(USART2);
0001ee  4810              LDR      r0,|L1.560|
0001f0  f7fffffe          BL       USART_ReceiveData
0001f4  b2c4              UXTB     r4,r0
                  |L1.502|
;;;303    	} 
;;;304    }
0001f6  bd10              POP      {r4,pc}
;;;305    
                          ENDP

                  |L1.504|
                          DCD      0x40001000
                  |L1.508|
                          DCD      0x40000800
                  |L1.512|
                          DCD      theta
                  |L1.516|
                          DCD      0x44fa0000
                  |L1.520|
                          DCD      0xc083126f
                  |L1.524|
                          DCD      0x400921ca
                  |L1.528|
                          DCD      0x40977000
                  |L1.532|
                          DCD      0x40000434
                  |L1.536|
                          DCD      Pectoral_Theta
                  |L1.540|
                          DCD      0x40668000
                  |L1.544|
                          DCD      OutData
                  |L1.548|
                          DCD      0x40012c10
                  |L1.552|
                          DCD      0x40013410
                  |L1.556|
                          DCD      0x40013800
                  |L1.560|
                          DCD      0x40004400
