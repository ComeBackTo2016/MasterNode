; generated by Component: ARM Compiler 5.06 update 2 (build 183) Tool: ArmCC [4d35cd]
; commandline ArmCC [--list --debug -c --asm --interleave -o..\..\output\bsp_i2c_ee.o --asm_dir=..\..\Listing\ --list_dir=..\..\Listing\ --depend=..\..\output\bsp_i2c_ee.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\..\Libraries\CMSIS -I..\..\User -I..\..\Libraries\FWlib\inc -I..\..\User\Alogrisem\inc -I..\..\User\BSP_Init\inc -I..\..\User\exDev\inc -IH:\CETC\Project\第二代机器鱼程序\AV1.3\Project\RVMDK（uv4）\RTE -ID:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\1.0.5\Device\Include -ID:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=520 -DSTM32F10X_HD -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -W --omf_browse=..\..\output\bsp_i2c_ee.crf ..\..\User\exDev\src\bsp_i2c_ee.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  I2C_GPIO_Config PROC
;;;38       */
;;;39     static void I2C_GPIO_Config(void)
000000  b508              PUSH     {r3,lr}
;;;40     {
;;;41       GPIO_InitTypeDef  GPIO_InitStructure; 
;;;42     
;;;43     	/* 使能与 I2C1 有关的时钟 */
;;;44     	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB,ENABLE);
000002  2101              MOVS     r1,#1
000004  2008              MOVS     r0,#8
000006  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;45       RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1,ENABLE);  
00000a  2101              MOVS     r1,#1
00000c  0548              LSLS     r0,r1,#21
00000e  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;46         
;;;47       /* PB6-I2C1_SCL、PB7-I2C1_SDA*/
;;;48       GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_6 | GPIO_Pin_7;
000012  20c0              MOVS     r0,#0xc0
000014  f8ad0000          STRH     r0,[sp,#0]
;;;49       GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000018  2003              MOVS     r0,#3
00001a  f88d0002          STRB     r0,[sp,#2]
;;;50       GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_OD;	       // 开漏输出
00001e  201c              MOVS     r0,#0x1c
000020  f88d0003          STRB     r0,[sp,#3]
;;;51       GPIO_Init(GPIOB, &GPIO_InitStructure);
000024  4669              MOV      r1,sp
000026  48e7              LDR      r0,|L1.964|
000028  f7fffffe          BL       GPIO_Init
;;;52     }
00002c  bd08              POP      {r3,pc}
;;;53     
                          ENDP

                  I2C_Mode_Configu PROC
;;;58       */
;;;59     static void I2C_Mode_Configu(void)
00002e  b51f              PUSH     {r0-r4,lr}
;;;60     {
;;;61       I2C_InitTypeDef  I2C_InitStructure; 
;;;62     
;;;63       /* I2C 配置 */
;;;64       I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
000030  2000              MOVS     r0,#0
000032  f8ad0004          STRH     r0,[sp,#4]
;;;65     	
;;;66     	/* 高电平数据稳定，低电平数据变化 SCL 时钟线的占空比 */
;;;67       I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
000036  f64b70ff          MOV      r0,#0xbfff
00003a  f8ad0006          STRH     r0,[sp,#6]
;;;68     	
;;;69       I2C_InitStructure.I2C_OwnAddress1 =I2C1_OWN_ADDRESS7; 
00003e  200a              MOVS     r0,#0xa
000040  f8ad0008          STRH     r0,[sp,#8]
;;;70       I2C_InitStructure.I2C_Ack = I2C_Ack_Enable ;
000044  f44f6080          MOV      r0,#0x400
000048  f8ad000a          STRH     r0,[sp,#0xa]
;;;71     	
;;;72     	/* I2C的寻址模式 */
;;;73       I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
00004c  0100              LSLS     r0,r0,#4
00004e  f8ad000c          STRH     r0,[sp,#0xc]
;;;74     	
;;;75     	/* 通信速率 */
;;;76       I2C_InitStructure.I2C_ClockSpeed = I2C_Speed;
000052  48dd              LDR      r0,|L1.968|
000054  9000              STR      r0,[sp,#0]
;;;77       
;;;78     	/* I2C1 初始化 */
;;;79       I2C_Init(I2C1, &I2C_InitStructure);
000056  4669              MOV      r1,sp
000058  48dc              LDR      r0,|L1.972|
00005a  f7fffffe          BL       I2C_Init
;;;80       
;;;81     	/* 使能 I2C1 */
;;;82       I2C_Cmd(I2C1, ENABLE);   
00005e  2101              MOVS     r1,#1
000060  48da              LDR      r0,|L1.972|
000062  f7fffffe          BL       I2C_Cmd
;;;83     }
000066  bd1f              POP      {r0-r4,pc}
;;;84     
                          ENDP

                  I2C_EE_Init PROC
;;;89       */
;;;90     void I2C_EE_Init(void)
000068  b510              PUSH     {r4,lr}
;;;91     {
;;;92     
;;;93       I2C_GPIO_Config(); 
00006a  f7fffffe          BL       I2C_GPIO_Config
;;;94      
;;;95       I2C_Mode_Configu();
00006e  f7fffffe          BL       I2C_Mode_Configu
;;;96     
;;;97     /* 根据头文件i2c_ee.h中的定义来选择EEPROM要写入的地址 */
;;;98     #ifdef EEPROM_Block0_ADDRESS
;;;99       /* 选择 EEPROM Block0 来写入 */
;;;100      EEPROM_ADDRESS = EEPROM_Block0_ADDRESS;
000072  20a0              MOVS     r0,#0xa0
000074  49d6              LDR      r1,|L1.976|
000076  8008              STRH     r0,[r1,#0]
;;;101    #endif
;;;102    
;;;103    #ifdef EEPROM_Block1_ADDRESS  
;;;104    	/* 选择 EEPROM Block1 来写入 */
;;;105      EEPROM_ADDRESS = EEPROM_Block1_ADDRESS;
;;;106    #endif
;;;107    
;;;108    #ifdef EEPROM_Block2_ADDRESS  
;;;109    	/* 选择 EEPROM Block2 来写入 */
;;;110      EEPROM_ADDRESS = EEPROM_Block2_ADDRESS;
;;;111    #endif
;;;112    
;;;113    #ifdef EEPROM_Block3_ADDRESS  
;;;114    	/* 选择 EEPROM Block3 来写入 */
;;;115      EEPROM_ADDRESS = EEPROM_Block3_ADDRESS;
;;;116    #endif
;;;117    }
000078  bd10              POP      {r4,pc}
;;;118    
                          ENDP

                  I2C_EE_WaitEepromStandbyState PROC
;;;369      */
;;;370    void I2C_EE_WaitEepromStandbyState(void)      
00007a  b508              PUSH     {r3,lr}
;;;371    {
;;;372      vu16 SR1_Tmp = 0;
00007c  2000              MOVS     r0,#0
00007e  9000              STR      r0,[sp,#0]
;;;373    
;;;374      do
000080  bf00              NOP      
                  |L1.130|
;;;375      {
;;;376        /* Send START condition */
;;;377        I2C_GenerateSTART(I2C1, ENABLE);
000082  2101              MOVS     r1,#1
000084  48d1              LDR      r0,|L1.972|
000086  f7fffffe          BL       I2C_GenerateSTART
;;;378        /* Read I2C1 SR1 register */
;;;379        SR1_Tmp = I2C_ReadRegister(I2C1, I2C_Register_SR1);
00008a  2114              MOVS     r1,#0x14
00008c  48cf              LDR      r0,|L1.972|
00008e  f7fffffe          BL       I2C_ReadRegister
000092  9000              STR      r0,[sp,#0]
;;;380        /* Send EEPROM address for write */
;;;381        I2C_Send7bitAddress(I2C1, EEPROM_ADDRESS, I2C_Direction_Transmitter);
000094  48ce              LDR      r0,|L1.976|
000096  7801              LDRB     r1,[r0,#0]  ; EEPROM_ADDRESS
000098  2200              MOVS     r2,#0
00009a  48cc              LDR      r0,|L1.972|
00009c  f7fffffe          BL       I2C_Send7bitAddress
;;;382      }while(!(I2C_ReadRegister(I2C1, I2C_Register_SR1) & 0x0002));
0000a0  2114              MOVS     r1,#0x14
0000a2  48ca              LDR      r0,|L1.972|
0000a4  f7fffffe          BL       I2C_ReadRegister
0000a8  f0000002          AND      r0,r0,#2
0000ac  2800              CMP      r0,#0
0000ae  d0e8              BEQ      |L1.130|
;;;383      
;;;384      /* Clear AF flag */
;;;385      I2C_ClearFlag(I2C1, I2C_FLAG_AF);
0000b0  49c8              LDR      r1,|L1.980|
0000b2  48c6              LDR      r0,|L1.972|
0000b4  f7fffffe          BL       I2C_ClearFlag
;;;386        /* STOP condition */    
;;;387        I2C_GenerateSTOP(I2C1, ENABLE); 
0000b8  2101              MOVS     r1,#1
0000ba  48c4              LDR      r0,|L1.972|
0000bc  f7fffffe          BL       I2C_GenerateSTOP
;;;388    }
0000c0  bd08              POP      {r3,pc}
;;;389    
                          ENDP

                  I2C_EE_PageWrite PROC
;;;248      */
;;;249    void I2C_EE_PageWrite(u8* pBuffer, u8 WriteAddr, u8 NumByteToWrite)
0000c2  b570              PUSH     {r4-r6,lr}
;;;250    {
0000c4  4604              MOV      r4,r0
0000c6  460e              MOV      r6,r1
0000c8  4615              MOV      r5,r2
;;;251        while(I2C_GetFlagStatus(I2C1, I2C_FLAG_BUSY)); // Added by Najoua 27/08/2008
0000ca  bf00              NOP      
                  |L1.204|
0000cc  f44f3100          MOV      r1,#0x20000
0000d0  48be              LDR      r0,|L1.972|
0000d2  f7fffffe          BL       I2C_GetFlagStatus
0000d6  2800              CMP      r0,#0
0000d8  d1f8              BNE      |L1.204|
;;;252        
;;;253      /* Send START condition */
;;;254      I2C_GenerateSTART(I2C1, ENABLE);
0000da  2101              MOVS     r1,#1
0000dc  48bb              LDR      r0,|L1.972|
0000de  f7fffffe          BL       I2C_GenerateSTART
;;;255      
;;;256      /* Test on EV5 and clear it */
;;;257      while(!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT)); 
0000e2  bf00              NOP      
                  |L1.228|
0000e4  49bc              LDR      r1,|L1.984|
0000e6  48b9              LDR      r0,|L1.972|
0000e8  f7fffffe          BL       I2C_CheckEvent
0000ec  2800              CMP      r0,#0
0000ee  d0f9              BEQ      |L1.228|
;;;258      
;;;259      /* Send EEPROM address for write */
;;;260      I2C_Send7bitAddress(I2C1, EEPROM_ADDRESS, I2C_Direction_Transmitter);
0000f0  48b7              LDR      r0,|L1.976|
0000f2  7801              LDRB     r1,[r0,#0]  ; EEPROM_ADDRESS
0000f4  2200              MOVS     r2,#0
0000f6  48b5              LDR      r0,|L1.972|
0000f8  f7fffffe          BL       I2C_Send7bitAddress
;;;261      
;;;262      /* Test on EV6 and clear it */
;;;263      while(!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED));  
0000fc  bf00              NOP      
                  |L1.254|
0000fe  49b7              LDR      r1,|L1.988|
000100  48b2              LDR      r0,|L1.972|
000102  f7fffffe          BL       I2C_CheckEvent
000106  2800              CMP      r0,#0
000108  d0f9              BEQ      |L1.254|
;;;264    
;;;265      /* Send the EEPROM's internal address to write to */    
;;;266      I2C_SendData(I2C1, WriteAddr);  
00010a  4631              MOV      r1,r6
00010c  48af              LDR      r0,|L1.972|
00010e  f7fffffe          BL       I2C_SendData
;;;267    
;;;268      /* Test on EV8 and clear it */
;;;269      while(! I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED));
000112  bf00              NOP      
                  |L1.276|
000114  49b1              LDR      r1,|L1.988|
000116  1c89              ADDS     r1,r1,#2
000118  48ac              LDR      r0,|L1.972|
00011a  f7fffffe          BL       I2C_CheckEvent
00011e  2800              CMP      r0,#0
000120  d0f8              BEQ      |L1.276|
;;;270    
;;;271      /* While there is data to be written */
;;;272      while(NumByteToWrite--)  
000122  e00c              B        |L1.318|
                  |L1.292|
;;;273      {
;;;274        /* Send the current byte */
;;;275        I2C_SendData(I2C1, *pBuffer); 
000124  7821              LDRB     r1,[r4,#0]
000126  48a9              LDR      r0,|L1.972|
000128  f7fffffe          BL       I2C_SendData
;;;276    
;;;277        /* Point to the next byte to be written */
;;;278        pBuffer++; 
00012c  1c64              ADDS     r4,r4,#1
;;;279      
;;;280        /* Test on EV8 and clear it */
;;;281        while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED));
00012e  bf00              NOP      
                  |L1.304|
000130  49aa              LDR      r1,|L1.988|
000132  1c89              ADDS     r1,r1,#2
000134  48a5              LDR      r0,|L1.972|
000136  f7fffffe          BL       I2C_CheckEvent
00013a  2800              CMP      r0,#0
00013c  d0f8              BEQ      |L1.304|
                  |L1.318|
00013e  1e28              SUBS     r0,r5,#0              ;272
000140  f1a50101          SUB      r1,r5,#1              ;272
000144  b2cd              UXTB     r5,r1                 ;272
000146  d1ed              BNE      |L1.292|
;;;282      }
;;;283    
;;;284      /* Send STOP condition */
;;;285      I2C_GenerateSTOP(I2C1, ENABLE);
000148  2101              MOVS     r1,#1
00014a  48a0              LDR      r0,|L1.972|
00014c  f7fffffe          BL       I2C_GenerateSTOP
;;;286    }
000150  bd70              POP      {r4-r6,pc}
;;;287    
                          ENDP

                  I2C_EE_BufferWrite PROC
;;;126      */
;;;127    void I2C_EE_BufferWrite(u8* pBuffer, u8 WriteAddr, u16 NumByteToWrite)
000152  e92d47f0          PUSH     {r4-r10,lr}
;;;128    {
000156  4607              MOV      r7,r0
000158  460d              MOV      r5,r1
00015a  4614              MOV      r4,r2
;;;129      u8 NumOfPage = 0, NumOfSingle = 0, Addr = 0, count = 0;
00015c  f04f0800          MOV      r8,#0
000160  46c1              MOV      r9,r8
000162  46c2              MOV      r10,r8
000164  2600              MOVS     r6,#0
;;;130    
;;;131      Addr = WriteAddr % I2C_PageSize;
000166  4628              MOV      r0,r5
000168  17e9              ASRS     r1,r5,#31
00016a  eb057151          ADD      r1,r5,r1,LSR #29
00016e  10c9              ASRS     r1,r1,#3
000170  eba501c1          SUB      r1,r5,r1,LSL #3
000174  f0010aff          AND      r10,r1,#0xff
;;;132      count = I2C_PageSize - Addr;
000178  f1ca0008          RSB      r0,r10,#8
00017c  b2c6              UXTB     r6,r0
;;;133      NumOfPage =  NumByteToWrite / I2C_PageSize;
00017e  4620              MOV      r0,r4
000180  17e1              ASRS     r1,r4,#31
000182  eb047151          ADD      r1,r4,r1,LSR #29
000186  f3c108c7          UBFX     r8,r1,#3,#8
;;;134      NumOfSingle = NumByteToWrite % I2C_PageSize;
00018a  17e1              ASRS     r1,r4,#31
00018c  eb047151          ADD      r1,r4,r1,LSR #29
000190  10c9              ASRS     r1,r1,#3
000192  eba401c1          SUB      r1,r4,r1,LSL #3
000196  f00109ff          AND      r9,r1,#0xff
;;;135     
;;;136      /* If WriteAddr is I2C_PageSize aligned  */
;;;137      if(Addr == 0) 
00019a  f1ba0f00          CMP      r10,#0
00019e  d128              BNE      |L1.498|
;;;138      {
;;;139        /* If NumByteToWrite < I2C_PageSize */
;;;140        if(NumOfPage == 0) 
0001a0  f1b80f00          CMP      r8,#0
0001a4  d107              BNE      |L1.438|
;;;141        {
;;;142          I2C_EE_PageWrite(pBuffer, WriteAddr, NumOfSingle);
0001a6  464a              MOV      r2,r9
0001a8  4629              MOV      r1,r5
0001aa  4638              MOV      r0,r7
0001ac  f7fffffe          BL       I2C_EE_PageWrite
;;;143          I2C_EE_WaitEepromStandbyState();
0001b0  f7fffffe          BL       I2C_EE_WaitEepromStandbyState
0001b4  e060              B        |L1.632|
                  |L1.438|
;;;144        }
;;;145        /* If NumByteToWrite > I2C_PageSize */
;;;146        else  
;;;147        {
;;;148          while(NumOfPage--)
0001b6  e00a              B        |L1.462|
                  |L1.440|
;;;149          {
;;;150            I2C_EE_PageWrite(pBuffer, WriteAddr, I2C_PageSize); 
0001b8  2208              MOVS     r2,#8
0001ba  4629              MOV      r1,r5
0001bc  4638              MOV      r0,r7
0001be  f7fffffe          BL       I2C_EE_PageWrite
;;;151        	I2C_EE_WaitEepromStandbyState();
0001c2  f7fffffe          BL       I2C_EE_WaitEepromStandbyState
;;;152            WriteAddr +=  I2C_PageSize;
0001c6  f1050008          ADD      r0,r5,#8
0001ca  b2c5              UXTB     r5,r0
;;;153            pBuffer += I2C_PageSize;
0001cc  3708              ADDS     r7,r7,#8
                  |L1.462|
0001ce  f1b80000          SUBS     r0,r8,#0              ;148
0001d2  f1a80101          SUB      r1,r8,#1              ;148
0001d6  f00108ff          AND      r8,r1,#0xff           ;148
0001da  d1ed              BNE      |L1.440|
;;;154          }
;;;155    
;;;156          if(NumOfSingle!=0)
0001dc  f1b90f00          CMP      r9,#0
0001e0  d04a              BEQ      |L1.632|
;;;157          {
;;;158            I2C_EE_PageWrite(pBuffer, WriteAddr, NumOfSingle);
0001e2  464a              MOV      r2,r9
0001e4  4629              MOV      r1,r5
0001e6  4638              MOV      r0,r7
0001e8  f7fffffe          BL       I2C_EE_PageWrite
;;;159            I2C_EE_WaitEepromStandbyState();
0001ec  f7fffffe          BL       I2C_EE_WaitEepromStandbyState
0001f0  e042              B        |L1.632|
                  |L1.498|
;;;160          }
;;;161        }
;;;162      }
;;;163      /* If WriteAddr is not I2C_PageSize aligned  */
;;;164      else 
;;;165      {
;;;166        /* If NumByteToWrite < I2C_PageSize */
;;;167        if(NumOfPage== 0) 
0001f2  f1b80f00          CMP      r8,#0
0001f6  d107              BNE      |L1.520|
;;;168        {
;;;169          I2C_EE_PageWrite(pBuffer, WriteAddr, NumOfSingle);
0001f8  464a              MOV      r2,r9
0001fa  4629              MOV      r1,r5
0001fc  4638              MOV      r0,r7
0001fe  f7fffffe          BL       I2C_EE_PageWrite
;;;170          I2C_EE_WaitEepromStandbyState();
000202  f7fffffe          BL       I2C_EE_WaitEepromStandbyState
000206  e037              B        |L1.632|
                  |L1.520|
;;;171        }
;;;172        /* If NumByteToWrite > I2C_PageSize */
;;;173        else
;;;174        {
;;;175          NumByteToWrite -= count;
000208  1ba0              SUBS     r0,r4,r6
00020a  b284              UXTH     r4,r0
;;;176          NumOfPage =  NumByteToWrite / I2C_PageSize;
00020c  4620              MOV      r0,r4
00020e  17e1              ASRS     r1,r4,#31
000210  eb047151          ADD      r1,r4,r1,LSR #29
000214  f3c108c7          UBFX     r8,r1,#3,#8
;;;177          NumOfSingle = NumByteToWrite % I2C_PageSize;	
000218  17e1              ASRS     r1,r4,#31
00021a  eb047151          ADD      r1,r4,r1,LSR #29
00021e  10c9              ASRS     r1,r1,#3
000220  eba401c1          SUB      r1,r4,r1,LSL #3
000224  f00109ff          AND      r9,r1,#0xff
;;;178          
;;;179          if(count != 0)
000228  b14e              CBZ      r6,|L1.574|
;;;180          {  
;;;181            I2C_EE_PageWrite(pBuffer, WriteAddr, count);
00022a  4632              MOV      r2,r6
00022c  4629              MOV      r1,r5
00022e  4638              MOV      r0,r7
000230  f7fffffe          BL       I2C_EE_PageWrite
;;;182            I2C_EE_WaitEepromStandbyState();
000234  f7fffffe          BL       I2C_EE_WaitEepromStandbyState
;;;183            WriteAddr += count;
000238  19a8              ADDS     r0,r5,r6
00023a  b2c5              UXTB     r5,r0
;;;184            pBuffer += count;
00023c  4437              ADD      r7,r7,r6
                  |L1.574|
;;;185          } 
;;;186          
;;;187          while(NumOfPage--)
00023e  e00a              B        |L1.598|
                  |L1.576|
;;;188          {
;;;189            I2C_EE_PageWrite(pBuffer, WriteAddr, I2C_PageSize);
000240  2208              MOVS     r2,#8
000242  4629              MOV      r1,r5
000244  4638              MOV      r0,r7
000246  f7fffffe          BL       I2C_EE_PageWrite
;;;190            I2C_EE_WaitEepromStandbyState();
00024a  f7fffffe          BL       I2C_EE_WaitEepromStandbyState
;;;191            WriteAddr +=  I2C_PageSize;
00024e  f1050008          ADD      r0,r5,#8
000252  b2c5              UXTB     r5,r0
;;;192            pBuffer += I2C_PageSize;  
000254  3708              ADDS     r7,r7,#8
                  |L1.598|
000256  f1b80000          SUBS     r0,r8,#0              ;187
00025a  f1a80101          SUB      r1,r8,#1              ;187
00025e  f00108ff          AND      r8,r1,#0xff           ;187
000262  d1ed              BNE      |L1.576|
;;;193          }
;;;194          if(NumOfSingle != 0)
000264  f1b90f00          CMP      r9,#0
000268  d006              BEQ      |L1.632|
;;;195          {
;;;196            I2C_EE_PageWrite(pBuffer, WriteAddr, NumOfSingle); 
00026a  464a              MOV      r2,r9
00026c  4629              MOV      r1,r5
00026e  4638              MOV      r0,r7
000270  f7fffffe          BL       I2C_EE_PageWrite
;;;197            I2C_EE_WaitEepromStandbyState();
000274  f7fffffe          BL       I2C_EE_WaitEepromStandbyState
                  |L1.632|
;;;198          }
;;;199        }
;;;200      }  
;;;201    }
000278  e8bd87f0          POP      {r4-r10,pc}
;;;202    
                          ENDP

                  I2C_EE_ByteWrite PROC
;;;209      */
;;;210    void I2C_EE_ByteWrite(u8* pBuffer, u8 WriteAddr)
00027c  b570              PUSH     {r4-r6,lr}
;;;211    {
00027e  4604              MOV      r4,r0
000280  460d              MOV      r5,r1
;;;212      /* Send STRAT condition */
;;;213      I2C_GenerateSTART(I2C1, ENABLE);
000282  2101              MOVS     r1,#1
000284  4851              LDR      r0,|L1.972|
000286  f7fffffe          BL       I2C_GenerateSTART
;;;214    
;;;215      /* Test on EV5 and clear it */
;;;216      while(!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT));  
00028a  bf00              NOP      
                  |L1.652|
00028c  4952              LDR      r1,|L1.984|
00028e  484f              LDR      r0,|L1.972|
000290  f7fffffe          BL       I2C_CheckEvent
000294  2800              CMP      r0,#0
000296  d0f9              BEQ      |L1.652|
;;;217    
;;;218      /* Send EEPROM address for write */
;;;219      I2C_Send7bitAddress(I2C1, EEPROM_ADDRESS, I2C_Direction_Transmitter);
000298  484d              LDR      r0,|L1.976|
00029a  7801              LDRB     r1,[r0,#0]  ; EEPROM_ADDRESS
00029c  2200              MOVS     r2,#0
00029e  484b              LDR      r0,|L1.972|
0002a0  f7fffffe          BL       I2C_Send7bitAddress
;;;220      
;;;221      /* Test on EV6 and clear it */
;;;222      while(!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED));
0002a4  bf00              NOP      
                  |L1.678|
0002a6  494d              LDR      r1,|L1.988|
0002a8  4848              LDR      r0,|L1.972|
0002aa  f7fffffe          BL       I2C_CheckEvent
0002ae  2800              CMP      r0,#0
0002b0  d0f9              BEQ      |L1.678|
;;;223          
;;;224      /* Send the EEPROM's internal address to write to */
;;;225      I2C_SendData(I2C1, WriteAddr);
0002b2  4629              MOV      r1,r5
0002b4  4845              LDR      r0,|L1.972|
0002b6  f7fffffe          BL       I2C_SendData
;;;226      
;;;227      /* Test on EV8 and clear it */
;;;228      while(!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED));
0002ba  bf00              NOP      
                  |L1.700|
0002bc  4947              LDR      r1,|L1.988|
0002be  1c89              ADDS     r1,r1,#2
0002c0  4842              LDR      r0,|L1.972|
0002c2  f7fffffe          BL       I2C_CheckEvent
0002c6  2800              CMP      r0,#0
0002c8  d0f8              BEQ      |L1.700|
;;;229    
;;;230      /* Send the byte to be written */
;;;231      I2C_SendData(I2C1, *pBuffer); 
0002ca  7821              LDRB     r1,[r4,#0]
0002cc  483f              LDR      r0,|L1.972|
0002ce  f7fffffe          BL       I2C_SendData
;;;232       
;;;233      /* Test on EV8 and clear it */
;;;234      while(!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED));
0002d2  bf00              NOP      
                  |L1.724|
0002d4  4941              LDR      r1,|L1.988|
0002d6  1c89              ADDS     r1,r1,#2
0002d8  483c              LDR      r0,|L1.972|
0002da  f7fffffe          BL       I2C_CheckEvent
0002de  2800              CMP      r0,#0
0002e0  d0f8              BEQ      |L1.724|
;;;235      
;;;236      /* Send STOP condition */
;;;237      I2C_GenerateSTOP(I2C1, ENABLE);
0002e2  2101              MOVS     r1,#1
0002e4  4839              LDR      r0,|L1.972|
0002e6  f7fffffe          BL       I2C_GenerateSTOP
;;;238    }
0002ea  bd70              POP      {r4-r6,pc}
;;;239    
                          ENDP

                  I2C_EE_BufferRead PROC
;;;295      */
;;;296    void I2C_EE_BufferRead(u8* pBuffer, u8 ReadAddr, u16 NumByteToRead)
0002ec  b570              PUSH     {r4-r6,lr}
;;;297    {  
0002ee  4605              MOV      r5,r0
0002f0  460e              MOV      r6,r1
0002f2  4614              MOV      r4,r2
;;;298      //*((u8 *)0x4001080c) |=0x80; 
;;;299        while(I2C_GetFlagStatus(I2C1, I2C_FLAG_BUSY)); // Added by Najoua 27/08/2008    
0002f4  bf00              NOP      
                  |L1.758|
0002f6  f44f3100          MOV      r1,#0x20000
0002fa  4834              LDR      r0,|L1.972|
0002fc  f7fffffe          BL       I2C_GetFlagStatus
000300  2800              CMP      r0,#0
000302  d1f8              BNE      |L1.758|
;;;300        
;;;301      /* Send START condition */
;;;302      I2C_GenerateSTART(I2C1, ENABLE);
000304  2101              MOVS     r1,#1
000306  4831              LDR      r0,|L1.972|
000308  f7fffffe          BL       I2C_GenerateSTART
;;;303      //*((u8 *)0x4001080c) &=~0x80;
;;;304      
;;;305      /* Test on EV5 and clear it */
;;;306      while(!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT));
00030c  bf00              NOP      
                  |L1.782|
00030e  4932              LDR      r1,|L1.984|
000310  482e              LDR      r0,|L1.972|
000312  f7fffffe          BL       I2C_CheckEvent
000316  2800              CMP      r0,#0
000318  d0f9              BEQ      |L1.782|
;;;307    
;;;308      /* Send EEPROM address for write */
;;;309      I2C_Send7bitAddress(I2C1, EEPROM_ADDRESS, I2C_Direction_Transmitter);
00031a  482d              LDR      r0,|L1.976|
00031c  7801              LDRB     r1,[r0,#0]  ; EEPROM_ADDRESS
00031e  2200              MOVS     r2,#0
000320  482a              LDR      r0,|L1.972|
000322  f7fffffe          BL       I2C_Send7bitAddress
;;;310    
;;;311      /* Test on EV6 and clear it */
;;;312      while(!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED));
000326  bf00              NOP      
                  |L1.808|
000328  492c              LDR      r1,|L1.988|
00032a  4828              LDR      r0,|L1.972|
00032c  f7fffffe          BL       I2C_CheckEvent
000330  2800              CMP      r0,#0
000332  d0f9              BEQ      |L1.808|
;;;313      
;;;314      /* Clear EV6 by setting again the PE bit */
;;;315      I2C_Cmd(I2C1, ENABLE);
000334  2101              MOVS     r1,#1
000336  4825              LDR      r0,|L1.972|
000338  f7fffffe          BL       I2C_Cmd
;;;316    
;;;317      /* Send the EEPROM's internal address to write to */
;;;318      I2C_SendData(I2C1, ReadAddr);  
00033c  4631              MOV      r1,r6
00033e  4823              LDR      r0,|L1.972|
000340  f7fffffe          BL       I2C_SendData
;;;319    
;;;320      /* Test on EV8 and clear it */
;;;321      while(!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED));
000344  bf00              NOP      
                  |L1.838|
000346  4925              LDR      r1,|L1.988|
000348  1c89              ADDS     r1,r1,#2
00034a  4820              LDR      r0,|L1.972|
00034c  f7fffffe          BL       I2C_CheckEvent
000350  2800              CMP      r0,#0
000352  d0f8              BEQ      |L1.838|
;;;322      
;;;323      /* Send STRAT condition a second time */  
;;;324      I2C_GenerateSTART(I2C1, ENABLE);
000354  2101              MOVS     r1,#1
000356  481d              LDR      r0,|L1.972|
000358  f7fffffe          BL       I2C_GenerateSTART
;;;325      
;;;326      /* Test on EV5 and clear it */
;;;327      while(!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT));
00035c  bf00              NOP      
                  |L1.862|
00035e  491e              LDR      r1,|L1.984|
000360  481a              LDR      r0,|L1.972|
000362  f7fffffe          BL       I2C_CheckEvent
000366  2800              CMP      r0,#0
000368  d0f9              BEQ      |L1.862|
;;;328      
;;;329      /* Send EEPROM address for read */
;;;330      I2C_Send7bitAddress(I2C1, EEPROM_ADDRESS, I2C_Direction_Receiver);
00036a  4819              LDR      r0,|L1.976|
00036c  7801              LDRB     r1,[r0,#0]  ; EEPROM_ADDRESS
00036e  2201              MOVS     r2,#1
000370  4816              LDR      r0,|L1.972|
000372  f7fffffe          BL       I2C_Send7bitAddress
;;;331      
;;;332      /* Test on EV6 and clear it */
;;;333      while(!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED));
000376  bf00              NOP      
                  |L1.888|
000378  4917              LDR      r1,|L1.984|
00037a  1c49              ADDS     r1,r1,#1
00037c  4813              LDR      r0,|L1.972|
00037e  f7fffffe          BL       I2C_CheckEvent
000382  2800              CMP      r0,#0
000384  d0f8              BEQ      |L1.888|
;;;334      
;;;335      /* While there is data to be read */
;;;336      while(NumByteToRead)  
000386  e016              B        |L1.950|
                  |L1.904|
;;;337      {
;;;338        if(NumByteToRead == 1)
000388  2c01              CMP      r4,#1
00038a  d107              BNE      |L1.924|
;;;339        {
;;;340          /* Disable Acknowledgement */
;;;341          I2C_AcknowledgeConfig(I2C1, DISABLE);
00038c  2100              MOVS     r1,#0
00038e  480f              LDR      r0,|L1.972|
000390  f7fffffe          BL       I2C_AcknowledgeConfig
;;;342          
;;;343          /* Send STOP Condition */
;;;344          I2C_GenerateSTOP(I2C1, ENABLE);
000394  2101              MOVS     r1,#1
000396  480d              LDR      r0,|L1.972|
000398  f7fffffe          BL       I2C_GenerateSTOP
                  |L1.924|
;;;345        }
;;;346    
;;;347        /* Test on EV7 and clear it */
;;;348        if(I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_RECEIVED))  
00039c  490e              LDR      r1,|L1.984|
00039e  313f              ADDS     r1,r1,#0x3f
0003a0  480a              LDR      r0,|L1.972|
0003a2  f7fffffe          BL       I2C_CheckEvent
0003a6  b130              CBZ      r0,|L1.950|
;;;349        {      
;;;350          /* Read a byte from the EEPROM */
;;;351          *pBuffer = I2C_ReceiveData(I2C1);
0003a8  4808              LDR      r0,|L1.972|
0003aa  f7fffffe          BL       I2C_ReceiveData
0003ae  7028              STRB     r0,[r5,#0]
;;;352    
;;;353          /* Point to the next location where the byte read will be saved */
;;;354          pBuffer++; 
0003b0  1c6d              ADDS     r5,r5,#1
;;;355          
;;;356          /* Decrement the read bytes counter */
;;;357          NumByteToRead--;        
0003b2  1e60              SUBS     r0,r4,#1
0003b4  b284              UXTH     r4,r0
                  |L1.950|
0003b6  2c00              CMP      r4,#0                 ;336
0003b8  d1e6              BNE      |L1.904|
;;;358        }   
;;;359      }
;;;360    
;;;361      /* Enable Acknowledgement to be ready for another reception */
;;;362      I2C_AcknowledgeConfig(I2C1, ENABLE);
0003ba  2101              MOVS     r1,#1
0003bc  4803              LDR      r0,|L1.972|
0003be  f7fffffe          BL       I2C_AcknowledgeConfig
;;;363    }
0003c2  bd70              POP      {r4-r6,pc}
;;;364    
                          ENDP

                  |L1.964|
                          DCD      0x40010c00
                  |L1.968|
                          DCD      0x00061a80
                  |L1.972|
                          DCD      0x40005400
                  |L1.976|
                          DCD      EEPROM_ADDRESS
                  |L1.980|
                          DCD      0x10000400
                  |L1.984|
                          DCD      0x00030001
                  |L1.988|
                          DCD      0x00070082

                          AREA ||.data||, DATA, ALIGN=1

                  EEPROM_ADDRESS
000000  0000              DCB      0x00,0x00
