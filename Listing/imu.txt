; generated by Component: ARM Compiler 5.06 update 2 (build 183) Tool: ArmCC [4d35cd]
; commandline ArmCC [--list --debug -c --asm --interleave -o..\..\output\imu.o --asm_dir=..\..\Listing\ --list_dir=..\..\Listing\ --depend=..\..\output\imu.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\..\Libraries\CMSIS -I..\..\User -I..\..\Libraries\FWlib\inc -I..\..\User\Alogrisem\inc -I..\..\User\BSP_Init\inc -I..\..\User\exDev\inc -IH:\CETC\Project\第二代机器鱼程序\AV1.3\Project\RVMDK（uv4）\RTE -ID:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\1.0.5\Device\Include -ID:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=520 -DSTM32F10X_HD -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -W --omf_browse=..\..\output\imu.crf ..\..\User\exDev\src\IMU.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  Get_POSE PROC
;;;25     /********在接收完一帧IMU姿态报告后，调用这个子程序来取出姿态数据******/
;;;26     void Get_POSE(void)
000000  b570              PUSH     {r4-r6,lr}
;;;27     {
;;;28     	int16_t temp;
;;;29     	
;;;30     	temp = 0;
000002  2400              MOVS     r4,#0
;;;31     	temp = rx_buffer[2];
000004  48f8              LDR      r0,|L1.1000|
000006  7884              LDRB     r4,[r0,#2]  ; rx_buffer
;;;32     	temp <<= 8;
000008  0220              LSLS     r0,r4,#8
00000a  b204              SXTH     r4,r0
;;;33     	temp |= rx_buffer[3];
00000c  48f6              LDR      r0,|L1.1000|
00000e  78c0              LDRB     r0,[r0,#3]  ; rx_buffer
000010  4304              ORRS     r4,r4,r0
;;;34     	if(temp&0x8000){
000012  f4044000          AND      r0,r4,#0x8000
000016  b120              CBZ      r0,|L1.34|
;;;35     	temp = 0-(temp&0x7fff);
000018  f3c4000e          UBFX     r0,r4,#0,#15
00001c  4240              RSBS     r0,r0,#0
00001e  b204              SXTH     r4,r0
000020  e001              B        |L1.38|
                  |L1.34|
;;;36     	}else temp = (temp&0x7fff);
000022  f3c4040e          UBFX     r4,r4,#0,#15
                  |L1.38|
;;;37     	yaw=(float)temp / 10.0f; //偏航角
000026  4620              MOV      r0,r4
000028  f7fffffe          BL       __aeabi_i2f
00002c  4605              MOV      r5,r0
00002e  49ef              LDR      r1,|L1.1004|
000030  f7fffffe          BL       __aeabi_fdiv
000034  49ee              LDR      r1,|L1.1008|
000036  6008              STR      r0,[r1,#0]  ; yaw
;;;38     	
;;;39     	temp = 0;
000038  2400              MOVS     r4,#0
;;;40     	temp = rx_buffer[4];
00003a  48eb              LDR      r0,|L1.1000|
00003c  7904              LDRB     r4,[r0,#4]  ; rx_buffer
;;;41     	temp <<= 8;
00003e  0220              LSLS     r0,r4,#8
000040  b204              SXTH     r4,r0
;;;42     	temp |= rx_buffer[5];
000042  48e9              LDR      r0,|L1.1000|
000044  7940              LDRB     r0,[r0,#5]  ; rx_buffer
000046  4304              ORRS     r4,r4,r0
;;;43     	if(temp&0x8000){
000048  f4044000          AND      r0,r4,#0x8000
00004c  b120              CBZ      r0,|L1.88|
;;;44     	temp = 0-(temp&0x7fff);
00004e  f3c4000e          UBFX     r0,r4,#0,#15
000052  4240              RSBS     r0,r0,#0
000054  b204              SXTH     r4,r0
000056  e001              B        |L1.92|
                  |L1.88|
;;;45     	}else temp = (temp&0x7fff);
000058  f3c4040e          UBFX     r4,r4,#0,#15
                  |L1.92|
;;;46     	pitch=(float)temp / 10.0f;//俯仰
00005c  4620              MOV      r0,r4
00005e  f7fffffe          BL       __aeabi_i2f
000062  4605              MOV      r5,r0
000064  49e1              LDR      r1,|L1.1004|
000066  f7fffffe          BL       __aeabi_fdiv
00006a  49e2              LDR      r1,|L1.1012|
00006c  6008              STR      r0,[r1,#0]  ; pitch
;;;47     	
;;;48     	temp = 0;
00006e  2400              MOVS     r4,#0
;;;49     	temp = rx_buffer[6];
000070  48dd              LDR      r0,|L1.1000|
000072  7984              LDRB     r4,[r0,#6]  ; rx_buffer
;;;50     	temp <<= 8;
000074  0220              LSLS     r0,r4,#8
000076  b204              SXTH     r4,r0
;;;51     	temp |= rx_buffer[7];
000078  48db              LDR      r0,|L1.1000|
00007a  79c0              LDRB     r0,[r0,#7]  ; rx_buffer
00007c  4304              ORRS     r4,r4,r0
;;;52     	if(temp&0x8000){
00007e  f4044000          AND      r0,r4,#0x8000
000082  b120              CBZ      r0,|L1.142|
;;;53     	temp = 0-(temp&0x7fff);
000084  f3c4000e          UBFX     r0,r4,#0,#15
000088  4240              RSBS     r0,r0,#0
00008a  b204              SXTH     r4,r0
00008c  e001              B        |L1.146|
                  |L1.142|
;;;54     	}else temp = (temp&0x7fff);
00008e  f3c4040e          UBFX     r4,r4,#0,#15
                  |L1.146|
;;;55     	roll=(float)temp / 10.0f;//滚转
000092  4620              MOV      r0,r4
000094  f7fffffe          BL       __aeabi_i2f
000098  4605              MOV      r5,r0
00009a  49d4              LDR      r1,|L1.1004|
00009c  f7fffffe          BL       __aeabi_fdiv
0000a0  49d5              LDR      r1,|L1.1016|
0000a2  6008              STR      r0,[r1,#0]  ; roll
;;;56     
;;;57     	temp = 0;
0000a4  2400              MOVS     r4,#0
;;;58     	temp = rx_buffer[8];
0000a6  48d0              LDR      r0,|L1.1000|
0000a8  7a04              LDRB     r4,[r0,#8]  ; rx_buffer
;;;59     	temp <<= 8;
0000aa  0220              LSLS     r0,r4,#8
0000ac  b204              SXTH     r4,r0
;;;60     	temp |= rx_buffer[9];
0000ae  48ce              LDR      r0,|L1.1000|
0000b0  7a40              LDRB     r0,[r0,#9]  ; rx_buffer
0000b2  4304              ORRS     r4,r4,r0
;;;61     	if(temp&0x8000){
0000b4  f4044000          AND      r0,r4,#0x8000
0000b8  b120              CBZ      r0,|L1.196|
;;;62     	temp = 0-(temp&0x7fff);
0000ba  f3c4000e          UBFX     r0,r4,#0,#15
0000be  4240              RSBS     r0,r0,#0
0000c0  b204              SXTH     r4,r0
0000c2  e001              B        |L1.200|
                  |L1.196|
;;;63     	}else temp = (temp&0x7fff);
0000c4  f3c4040e          UBFX     r4,r4,#0,#15
                  |L1.200|
;;;64     	alt=(float)temp / 10.0f;//高度
0000c8  4620              MOV      r0,r4
0000ca  f7fffffe          BL       __aeabi_i2f
0000ce  4605              MOV      r5,r0
0000d0  49c6              LDR      r1,|L1.1004|
0000d2  f7fffffe          BL       __aeabi_fdiv
0000d6  49c9              LDR      r1,|L1.1020|
0000d8  6008              STR      r0,[r1,#0]  ; alt
;;;65     	
;;;66     	temp = 0;
0000da  2400              MOVS     r4,#0
;;;67     	temp = rx_buffer[10];
0000dc  48c2              LDR      r0,|L1.1000|
0000de  7a84              LDRB     r4,[r0,#0xa]  ; rx_buffer
;;;68     	temp <<= 8;
0000e0  0220              LSLS     r0,r4,#8
0000e2  b204              SXTH     r4,r0
;;;69     	temp |= rx_buffer[11];
0000e4  48c0              LDR      r0,|L1.1000|
0000e6  7ac0              LDRB     r0,[r0,#0xb]  ; rx_buffer
0000e8  4304              ORRS     r4,r4,r0
;;;70     	if(temp&0x8000){
0000ea  f4044000          AND      r0,r4,#0x8000
0000ee  b120              CBZ      r0,|L1.250|
;;;71     	temp = 0-(temp&0x7fff);
0000f0  f3c4000e          UBFX     r0,r4,#0,#15
0000f4  4240              RSBS     r0,r0,#0
0000f6  b204              SXTH     r4,r0
0000f8  e001              B        |L1.254|
                  |L1.250|
;;;72     	}else temp = (temp&0x7fff);
0000fa  f3c4040e          UBFX     r4,r4,#0,#15
                  |L1.254|
;;;73     	tempr=(float)temp / 10.0f;//温度
0000fe  4620              MOV      r0,r4
000100  f7fffffe          BL       __aeabi_i2f
000104  4605              MOV      r5,r0
000106  49b9              LDR      r1,|L1.1004|
000108  f7fffffe          BL       __aeabi_fdiv
00010c  49bc              LDR      r1,|L1.1024|
00010e  6008              STR      r0,[r1,#0]  ; tempr
;;;74     	
;;;75     	temp = 0;
000110  2400              MOVS     r4,#0
;;;76     	temp = rx_buffer[12];
000112  48b5              LDR      r0,|L1.1000|
000114  7b04              LDRB     r4,[r0,#0xc]  ; rx_buffer
;;;77     	temp <<= 8;
000116  0220              LSLS     r0,r4,#8
000118  b204              SXTH     r4,r0
;;;78     	temp |= rx_buffer[13];
00011a  48b3              LDR      r0,|L1.1000|
00011c  7b40              LDRB     r0,[r0,#0xd]  ; rx_buffer
00011e  4304              ORRS     r4,r4,r0
;;;79     	if(temp&0x8000){
000120  f4044000          AND      r0,r4,#0x8000
000124  b120              CBZ      r0,|L1.304|
;;;80     	temp = 0-(temp&0x7fff);
000126  f3c4000e          UBFX     r0,r4,#0,#15
00012a  4240              RSBS     r0,r0,#0
00012c  b204              SXTH     r4,r0
00012e  e001              B        |L1.308|
                  |L1.304|
;;;81     	}else temp = (temp&0x7fff);
000130  f3c4040e          UBFX     r4,r4,#0,#15
                  |L1.308|
;;;82     	press=(float)temp * 10.0f;//气压
000134  4620              MOV      r0,r4
000136  f7fffffe          BL       __aeabi_i2f
00013a  4605              MOV      r5,r0
00013c  49ab              LDR      r1,|L1.1004|
00013e  f7fffffe          BL       __aeabi_fmul
000142  49b0              LDR      r1,|L1.1028|
000144  6008              STR      r0,[r1,#0]  ; press
;;;83     
;;;84     }
000146  bd70              POP      {r4-r6,pc}
;;;85     
                          ENDP

                  Get_Motion PROC
;;;90     //在接收一帧ReportMotion 后调用这个子程序来取出ADC数据
;;;91     void Get_Motion(void)
000148  2000              MOVS     r0,#0
;;;92     {
;;;93     	int16_t temp;
;;;94     	
;;;95     	temp = 0;
;;;96     	temp = rx_buffer[2];
00014a  49a7              LDR      r1,|L1.1000|
00014c  7888              LDRB     r0,[r1,#2]  ; rx_buffer
;;;97     	temp <<= 8;
00014e  0201              LSLS     r1,r0,#8
000150  b208              SXTH     r0,r1
;;;98     	temp |= rx_buffer[3];
000152  49a5              LDR      r1,|L1.1000|
000154  78c9              LDRB     r1,[r1,#3]  ; rx_buffer
000156  4308              ORRS     r0,r0,r1
;;;99     	if(temp&0x8000){
000158  f4004100          AND      r1,r0,#0x8000
00015c  b121              CBZ      r1,|L1.360|
;;;100    	temp = 0-(temp&0x7fff);
00015e  f3c0010e          UBFX     r1,r0,#0,#15
000162  4249              RSBS     r1,r1,#0
000164  b208              SXTH     r0,r1
000166  e001              B        |L1.364|
                  |L1.360|
;;;101    	}else temp = (temp&0x7fff);
000168  f3c0000e          UBFX     r0,r0,#0,#15
                  |L1.364|
;;;102    	ax=temp;//加速度计 X轴的ADC值
00016c  49a6              LDR      r1,|L1.1032|
00016e  8008              STRH     r0,[r1,#0]
;;;103    	
;;;104    	temp = 0;
000170  2000              MOVS     r0,#0
;;;105    	temp = rx_buffer[4];
000172  499d              LDR      r1,|L1.1000|
000174  7908              LDRB     r0,[r1,#4]  ; rx_buffer
;;;106    	temp <<= 8;
000176  0201              LSLS     r1,r0,#8
000178  b208              SXTH     r0,r1
;;;107    	temp |= rx_buffer[5];
00017a  499b              LDR      r1,|L1.1000|
00017c  7949              LDRB     r1,[r1,#5]  ; rx_buffer
00017e  4308              ORRS     r0,r0,r1
;;;108    	if(temp&0x8000){
000180  f4004100          AND      r1,r0,#0x8000
000184  b121              CBZ      r1,|L1.400|
;;;109    	temp = 0-(temp&0x7fff);
000186  f3c0010e          UBFX     r1,r0,#0,#15
00018a  4249              RSBS     r1,r1,#0
00018c  b208              SXTH     r0,r1
00018e  e001              B        |L1.404|
                  |L1.400|
;;;110    	}else temp = (temp&0x7fff);
000190  f3c0000e          UBFX     r0,r0,#0,#15
                  |L1.404|
;;;111    	ay=temp;//加速度计 Y轴的ADC值
000194  499d              LDR      r1,|L1.1036|
000196  8008              STRH     r0,[r1,#0]
;;;112    	
;;;113    	temp = 0;
000198  2000              MOVS     r0,#0
;;;114    	temp = rx_buffer[6];
00019a  4993              LDR      r1,|L1.1000|
00019c  7988              LDRB     r0,[r1,#6]  ; rx_buffer
;;;115    	temp <<= 8;
00019e  0201              LSLS     r1,r0,#8
0001a0  b208              SXTH     r0,r1
;;;116    	temp |= rx_buffer[7];
0001a2  4991              LDR      r1,|L1.1000|
0001a4  79c9              LDRB     r1,[r1,#7]  ; rx_buffer
0001a6  4308              ORRS     r0,r0,r1
;;;117    	if(temp&0x8000){
0001a8  f4004100          AND      r1,r0,#0x8000
0001ac  b121              CBZ      r1,|L1.440|
;;;118    	temp = 0-(temp&0x7fff);
0001ae  f3c0010e          UBFX     r1,r0,#0,#15
0001b2  4249              RSBS     r1,r1,#0
0001b4  b208              SXTH     r0,r1
0001b6  e001              B        |L1.444|
                  |L1.440|
;;;119    	}else temp = (temp&0x7fff);
0001b8  f3c0000e          UBFX     r0,r0,#0,#15
                  |L1.444|
;;;120    	az=temp;//加速度计 Z轴的ADC值
0001bc  4994              LDR      r1,|L1.1040|
0001be  8008              STRH     r0,[r1,#0]
;;;121    	
;;;122    	temp = 0;
0001c0  2000              MOVS     r0,#0
;;;123    	temp = rx_buffer[8];
0001c2  4989              LDR      r1,|L1.1000|
0001c4  7a08              LDRB     r0,[r1,#8]  ; rx_buffer
;;;124    	temp <<= 8;
0001c6  0201              LSLS     r1,r0,#8
0001c8  b208              SXTH     r0,r1
;;;125    	temp |= rx_buffer[9];
0001ca  4987              LDR      r1,|L1.1000|
0001cc  7a49              LDRB     r1,[r1,#9]  ; rx_buffer
0001ce  4308              ORRS     r0,r0,r1
;;;126    	if(temp&0x8000){
0001d0  f4004100          AND      r1,r0,#0x8000
0001d4  b121              CBZ      r1,|L1.480|
;;;127    	temp = 0-(temp&0x7fff);
0001d6  f3c0010e          UBFX     r1,r0,#0,#15
0001da  4249              RSBS     r1,r1,#0
0001dc  b208              SXTH     r0,r1
0001de  e001              B        |L1.484|
                  |L1.480|
;;;128    	}else temp = (temp&0x7fff);
0001e0  f3c0000e          UBFX     r0,r0,#0,#15
                  |L1.484|
;;;129    	gx=temp;//陀螺仪 X轴的ADC值
0001e4  498b              LDR      r1,|L1.1044|
0001e6  8008              STRH     r0,[r1,#0]
;;;130    	
;;;131    	temp = 0;
0001e8  2000              MOVS     r0,#0
;;;132    	temp = rx_buffer[10];
0001ea  497f              LDR      r1,|L1.1000|
0001ec  7a88              LDRB     r0,[r1,#0xa]  ; rx_buffer
;;;133    	temp <<= 8;
0001ee  0201              LSLS     r1,r0,#8
0001f0  b208              SXTH     r0,r1
;;;134    	temp |= rx_buffer[11];
0001f2  497d              LDR      r1,|L1.1000|
0001f4  7ac9              LDRB     r1,[r1,#0xb]  ; rx_buffer
0001f6  4308              ORRS     r0,r0,r1
;;;135    	if(temp&0x8000){
0001f8  f4004100          AND      r1,r0,#0x8000
0001fc  b121              CBZ      r1,|L1.520|
;;;136    	temp = 0-(temp&0x7fff);
0001fe  f3c0010e          UBFX     r1,r0,#0,#15
000202  4249              RSBS     r1,r1,#0
000204  b208              SXTH     r0,r1
000206  e001              B        |L1.524|
                  |L1.520|
;;;137    	}else temp = (temp&0x7fff);
000208  f3c0000e          UBFX     r0,r0,#0,#15
                  |L1.524|
;;;138    	gy=temp;//陀螺仪 Y轴的ADC值
00020c  4982              LDR      r1,|L1.1048|
00020e  8008              STRH     r0,[r1,#0]
;;;139    	
;;;140    	temp = 0;
000210  2000              MOVS     r0,#0
;;;141    	temp = rx_buffer[12];
000212  4975              LDR      r1,|L1.1000|
000214  7b08              LDRB     r0,[r1,#0xc]  ; rx_buffer
;;;142    	temp <<= 8;
000216  0201              LSLS     r1,r0,#8
000218  b208              SXTH     r0,r1
;;;143    	temp |= rx_buffer[13];
00021a  4973              LDR      r1,|L1.1000|
00021c  7b49              LDRB     r1,[r1,#0xd]  ; rx_buffer
00021e  4308              ORRS     r0,r0,r1
;;;144    	if(temp&0x8000){
000220  f4004100          AND      r1,r0,#0x8000
000224  b121              CBZ      r1,|L1.560|
;;;145    	temp = 0-(temp&0x7fff);
000226  f3c0010e          UBFX     r1,r0,#0,#15
00022a  4249              RSBS     r1,r1,#0
00022c  b208              SXTH     r0,r1
00022e  e001              B        |L1.564|
                  |L1.560|
;;;146    	}else temp = (temp&0x7fff);
000230  f3c0000e          UBFX     r0,r0,#0,#15
                  |L1.564|
;;;147    	gz=temp;//陀螺仪 Z轴的ADC值
000234  4979              LDR      r1,|L1.1052|
000236  8008              STRH     r0,[r1,#0]
;;;148    	
;;;149    	temp = 0;
000238  2000              MOVS     r0,#0
;;;150    	temp = rx_buffer[14];
00023a  496b              LDR      r1,|L1.1000|
00023c  7b88              LDRB     r0,[r1,#0xe]  ; rx_buffer
;;;151    	temp <<= 8;
00023e  0201              LSLS     r1,r0,#8
000240  b208              SXTH     r0,r1
;;;152    	temp |= rx_buffer[15];
000242  4969              LDR      r1,|L1.1000|
000244  7bc9              LDRB     r1,[r1,#0xf]  ; rx_buffer
000246  4308              ORRS     r0,r0,r1
;;;153    	if(temp&0x8000){
000248  f4004100          AND      r1,r0,#0x8000
00024c  b121              CBZ      r1,|L1.600|
;;;154    	temp = 0-(temp&0x7fff);
00024e  f3c0010e          UBFX     r1,r0,#0,#15
000252  4249              RSBS     r1,r1,#0
000254  b208              SXTH     r0,r1
000256  e001              B        |L1.604|
                  |L1.600|
;;;155    	}else temp = (temp&0x7fff);
000258  f3c0000e          UBFX     r0,r0,#0,#15
                  |L1.604|
;;;156    	hx=temp;//磁力计 X轴的ADC值
00025c  4970              LDR      r1,|L1.1056|
00025e  8008              STRH     r0,[r1,#0]
;;;157    	
;;;158    	temp = 0;
000260  2000              MOVS     r0,#0
;;;159    	temp = rx_buffer[16];
000262  4961              LDR      r1,|L1.1000|
000264  7c08              LDRB     r0,[r1,#0x10]  ; rx_buffer
;;;160    	temp <<= 8;
000266  0201              LSLS     r1,r0,#8
000268  b208              SXTH     r0,r1
;;;161    	temp |= rx_buffer[17];
00026a  495f              LDR      r1,|L1.1000|
00026c  7c49              LDRB     r1,[r1,#0x11]  ; rx_buffer
00026e  4308              ORRS     r0,r0,r1
;;;162    	if(temp&0x8000){
000270  f4004100          AND      r1,r0,#0x8000
000274  b121              CBZ      r1,|L1.640|
;;;163    	temp = 0-(temp&0x7fff);
000276  f3c0010e          UBFX     r1,r0,#0,#15
00027a  4249              RSBS     r1,r1,#0
00027c  b208              SXTH     r0,r1
00027e  e001              B        |L1.644|
                  |L1.640|
;;;164    	}else temp = (temp&0x7fff);
000280  f3c0000e          UBFX     r0,r0,#0,#15
                  |L1.644|
;;;165    	hy=temp;//磁力计 Y轴的ADC值
000284  4967              LDR      r1,|L1.1060|
000286  8008              STRH     r0,[r1,#0]
;;;166    	
;;;167    	temp = 0;
000288  2000              MOVS     r0,#0
;;;168    	temp = rx_buffer[18];
00028a  4957              LDR      r1,|L1.1000|
00028c  7c88              LDRB     r0,[r1,#0x12]  ; rx_buffer
;;;169    	temp <<= 8;
00028e  0201              LSLS     r1,r0,#8
000290  b208              SXTH     r0,r1
;;;170    	temp |= rx_buffer[19];
000292  4955              LDR      r1,|L1.1000|
000294  7cc9              LDRB     r1,[r1,#0x13]  ; rx_buffer
000296  4308              ORRS     r0,r0,r1
;;;171    	if(temp&0x8000){
000298  f4004100          AND      r1,r0,#0x8000
00029c  b121              CBZ      r1,|L1.680|
;;;172    	temp = 0-(temp&0x7fff);
00029e  f3c0010e          UBFX     r1,r0,#0,#15
0002a2  4249              RSBS     r1,r1,#0
0002a4  b208              SXTH     r0,r1
0002a6  e001              B        |L1.684|
                  |L1.680|
;;;173    	}else temp = (temp&0x7fff);
0002a8  f3c0000e          UBFX     r0,r0,#0,#15
                  |L1.684|
;;;174    	hz=temp;//磁力计 Z轴的ADC值
0002ac  495e              LDR      r1,|L1.1064|
0002ae  8008              STRH     r0,[r1,#0]
;;;175    }
0002b0  4770              BX       lr
;;;176    
                          ENDP

                  Get_GPS PROC
;;;177    //处理一帧接收到的GPS数据
;;;178    void Get_GPS(void)
0002b2  2100              MOVS     r1,#0
;;;179    {
;;;180    	int16_t temp;
;;;181            int32_t ltemp;
;;;182    	
;;;183    	ltemp = 0;
;;;184            ltemp |= (rx_buffer[2] << 24);
0002b4  4a4c              LDR      r2,|L1.1000|
0002b6  7892              LDRB     r2,[r2,#2]  ; rx_buffer
0002b8  ea416102          ORR      r1,r1,r2,LSL #24
;;;185            ltemp |= (rx_buffer[3] << 16);
0002bc  4a4a              LDR      r2,|L1.1000|
0002be  78d2              LDRB     r2,[r2,#3]  ; rx_buffer
0002c0  ea414102          ORR      r1,r1,r2,LSL #16
;;;186            ltemp |= (rx_buffer[4] <<  8);
0002c4  4a48              LDR      r2,|L1.1000|
0002c6  7912              LDRB     r2,[r2,#4]  ; rx_buffer
0002c8  ea412102          ORR      r1,r1,r2,LSL #8
;;;187    	ltemp |= rx_buffer[5];
0002cc  4a46              LDR      r2,|L1.1000|
0002ce  7952              LDRB     r2,[r2,#5]  ; rx_buffer
0002d0  4311              ORRS     r1,r1,r2
;;;188    	if(ltemp&0x80000000){
0002d2  f0014200          AND      r2,r1,#0x80000000
0002d6  b11a              CBZ      r2,|L1.736|
;;;189    	ltemp = 0-(ltemp&0x7fffffff);
0002d8  f0214200          BIC      r2,r1,#0x80000000
0002dc  4251              RSBS     r1,r2,#0
0002de  e001              B        |L1.740|
                  |L1.736|
;;;190    	}else ltemp = (ltemp&0x7fffffff);
0002e0  f0214100          BIC      r1,r1,#0x80000000
                  |L1.740|
;;;191    	lon=ltemp;//GPS的lon
0002e4  4a51              LDR      r2,|L1.1068|
0002e6  6011              STR      r1,[r2,#0]  ; lon
;;;192            
;;;193    	ltemp = 0;
0002e8  2100              MOVS     r1,#0
;;;194            ltemp |= (rx_buffer[6] << 24);
0002ea  4a3f              LDR      r2,|L1.1000|
0002ec  7992              LDRB     r2,[r2,#6]  ; rx_buffer
0002ee  ea416102          ORR      r1,r1,r2,LSL #24
;;;195            ltemp |= (rx_buffer[7] << 16);
0002f2  4a3d              LDR      r2,|L1.1000|
0002f4  79d2              LDRB     r2,[r2,#7]  ; rx_buffer
0002f6  ea414102          ORR      r1,r1,r2,LSL #16
;;;196            ltemp |= (rx_buffer[8] <<  8);
0002fa  4a3b              LDR      r2,|L1.1000|
0002fc  7a12              LDRB     r2,[r2,#8]  ; rx_buffer
0002fe  ea412102          ORR      r1,r1,r2,LSL #8
;;;197    	ltemp |= rx_buffer[9];
000302  4a39              LDR      r2,|L1.1000|
000304  7a52              LDRB     r2,[r2,#9]  ; rx_buffer
000306  4311              ORRS     r1,r1,r2
;;;198    	if(ltemp&0x80000000){
000308  f0014200          AND      r2,r1,#0x80000000
00030c  b11a              CBZ      r2,|L1.790|
;;;199    	ltemp = 0-(ltemp&0x7fffffff);
00030e  f0214200          BIC      r2,r1,#0x80000000
000312  4251              RSBS     r1,r2,#0
000314  e001              B        |L1.794|
                  |L1.790|
;;;200    	}else ltemp = (ltemp&0x7fffffff);
000316  f0214100          BIC      r1,r1,#0x80000000
                  |L1.794|
;;;201    	lat=ltemp;//GPS的lat
00031a  4a45              LDR      r2,|L1.1072|
00031c  6011              STR      r1,[r2,#0]  ; lat
;;;202            
;;;203    	temp = 0;
00031e  2000              MOVS     r0,#0
;;;204    	temp = rx_buffer[10];
000320  4a31              LDR      r2,|L1.1000|
000322  7a90              LDRB     r0,[r2,#0xa]  ; rx_buffer
;;;205    	temp <<= 8;
000324  0202              LSLS     r2,r0,#8
000326  b210              SXTH     r0,r2
;;;206    	temp |= rx_buffer[11];
000328  4a2f              LDR      r2,|L1.1000|
00032a  7ad2              LDRB     r2,[r2,#0xb]  ; rx_buffer
00032c  4310              ORRS     r0,r0,r2
;;;207    	if(temp&0x8000){
00032e  f4004200          AND      r2,r0,#0x8000
000332  b122              CBZ      r2,|L1.830|
;;;208    	temp = 0-(temp&0x7fff);
000334  f3c0020e          UBFX     r2,r0,#0,#15
000338  4252              RSBS     r2,r2,#0
00033a  b210              SXTH     r0,r2
00033c  e001              B        |L1.834|
                  |L1.830|
;;;209    	}else temp = (temp&0x7fff);
00033e  f3c0000e          UBFX     r0,r0,#0,#15
                  |L1.834|
;;;210    	hight=temp;//GPS的高度只
000342  4a3c              LDR      r2,|L1.1076|
000344  8010              STRH     r0,[r2,#0]
;;;211            
;;;212    	temp = 0;
000346  2000              MOVS     r0,#0
;;;213    	temp = rx_buffer[12];
000348  4a27              LDR      r2,|L1.1000|
00034a  7b10              LDRB     r0,[r2,#0xc]  ; rx_buffer
;;;214    	if(temp&0x80){
00034c  f0000280          AND      r2,r0,#0x80
000350  b11a              CBZ      r2,|L1.858|
;;;215    	temp = 0-(temp&0x7f);
000352  f000027f          AND      r2,r0,#0x7f
000356  4250              RSBS     r0,r2,#0
000358  e001              B        |L1.862|
                  |L1.858|
;;;216    	}else temp = (temp&0x7f);
00035a  f000007f          AND      r0,r0,#0x7f
                  |L1.862|
;;;217    	STnum=temp;//卫星的数量
00035e  b242              SXTB     r2,r0
000360  4b35              LDR      r3,|L1.1080|
000362  701a              STRB     r2,[r3,#0]
;;;218            
;;;219    	temp = 0;
000364  2000              MOVS     r0,#0
;;;220    	temp = rx_buffer[13];
000366  4a20              LDR      r2,|L1.1000|
000368  7b50              LDRB     r0,[r2,#0xd]  ; rx_buffer
;;;221    	temp <<= 8;
00036a  0202              LSLS     r2,r0,#8
00036c  b210              SXTH     r0,r2
;;;222    	temp |= rx_buffer[14];
00036e  4a1e              LDR      r2,|L1.1000|
000370  7b92              LDRB     r2,[r2,#0xe]  ; rx_buffer
000372  4310              ORRS     r0,r0,r2
;;;223    	if(temp&0x8000){
000374  f4004200          AND      r2,r0,#0x8000
000378  b122              CBZ      r2,|L1.900|
;;;224    	temp = 0-(temp&0x7fff);
00037a  f3c0020e          UBFX     r2,r0,#0,#15
00037e  4252              RSBS     r2,r2,#0
000380  b210              SXTH     r0,r2
000382  e001              B        |L1.904|
                  |L1.900|
;;;225    	}else temp = (temp&0x7fff);
000384  f3c0000e          UBFX     r0,r0,#0,#15
                  |L1.904|
;;;226    	heading=temp;//GPS航向值
000388  4a2c              LDR      r2,|L1.1084|
00038a  8010              STRH     r0,[r2,#0]
;;;227            
;;;228    	temp = 0;
00038c  2000              MOVS     r0,#0
;;;229    	temp = rx_buffer[15];
00038e  4a16              LDR      r2,|L1.1000|
000390  7bd0              LDRB     r0,[r2,#0xf]  ; rx_buffer
;;;230    	temp <<= 8;
000392  0202              LSLS     r2,r0,#8
000394  b210              SXTH     r0,r2
;;;231    	temp |= rx_buffer[16];
000396  4a14              LDR      r2,|L1.1000|
000398  7c12              LDRB     r2,[r2,#0x10]  ; rx_buffer
00039a  4310              ORRS     r0,r0,r2
;;;232    	if(temp&0x8000){
00039c  f4004200          AND      r2,r0,#0x8000
0003a0  b122              CBZ      r2,|L1.940|
;;;233    	temp = 0-(temp&0x7fff);
0003a2  f3c0020e          UBFX     r2,r0,#0,#15
0003a6  4252              RSBS     r2,r2,#0
0003a8  b210              SXTH     r0,r2
0003aa  e001              B        |L1.944|
                  |L1.940|
;;;234    	}else temp = (temp&0x7fff);
0003ac  f3c0000e          UBFX     r0,r0,#0,#15
                  |L1.944|
;;;235    	speed=temp;//GPS速度值
0003b0  4a23              LDR      r2,|L1.1088|
0003b2  8010              STRH     r0,[r2,#0]
;;;236    }
0003b4  4770              BX       lr
;;;237    
                          ENDP

                  Sum_check PROC
;;;238    //--校验当前接收到的一帧数据是否 与帧校验字节一致
;;;239    unsigned char Sum_check(void)
0003b6  b510              PUSH     {r4,lr}
;;;240    { 
;;;241      unsigned char i;
;;;242      unsigned int checksum=0; 
0003b8  2200              MOVS     r2,#0
;;;243      for(i=0;i<rx_buffer[0]-2;i++)
0003ba  2100              MOVS     r1,#0
0003bc  e004              B        |L1.968|
                  |L1.958|
;;;244       checksum+=rx_buffer[i];
0003be  480a              LDR      r0,|L1.1000|
0003c0  5c40              LDRB     r0,[r0,r1]
0003c2  4402              ADD      r2,r2,r0
0003c4  1c48              ADDS     r0,r1,#1              ;243
0003c6  b2c1              UXTB     r1,r0                 ;243
                  |L1.968|
0003c8  4807              LDR      r0,|L1.1000|
0003ca  7800              LDRB     r0,[r0,#0]            ;243  ; rx_buffer
0003cc  1e80              SUBS     r0,r0,#2              ;243
0003ce  4288              CMP      r0,r1                 ;243
0003d0  dcf5              BGT      |L1.958|
;;;245      if((checksum%256)==rx_buffer[rx_buffer[0]-2])
0003d2  b2d3              UXTB     r3,r2
0003d4  4804              LDR      r0,|L1.1000|
0003d6  7800              LDRB     r0,[r0,#0]  ; rx_buffer
0003d8  1e80              SUBS     r0,r0,#2
0003da  4c03              LDR      r4,|L1.1000|
0003dc  5c20              LDRB     r0,[r4,r0]
0003de  4283              CMP      r3,r0
0003e0  d130              BNE      |L1.1092|
;;;246       return(0x01); //Checksum successful
0003e2  2001              MOVS     r0,#1
;;;247      else
;;;248       return(0x00); //Checksum error
;;;249    }
0003e4  bd10              POP      {r4,pc}
0003e6  0000              DCW      0x0000
                  |L1.1000|
                          DCD      rx_buffer
                  |L1.1004|
                          DCD      0x41200000
                  |L1.1008|
                          DCD      yaw
                  |L1.1012|
                          DCD      pitch
                  |L1.1016|
                          DCD      roll
                  |L1.1020|
                          DCD      alt
                  |L1.1024|
                          DCD      tempr
                  |L1.1028|
                          DCD      press
                  |L1.1032|
                          DCD      ||ax||
                  |L1.1036|
                          DCD      ||ay||
                  |L1.1040|
                          DCD      ||az||
                  |L1.1044|
                          DCD      ||gx||
                  |L1.1048|
                          DCD      ||gy||
                  |L1.1052|
                          DCD      ||gz||
                  |L1.1056|
                          DCD      ||hx||
                  |L1.1060|
                          DCD      ||hy||
                  |L1.1064|
                          DCD      ||hz||
                  |L1.1068|
                          DCD      lon
                  |L1.1072|
                          DCD      lat
                  |L1.1076|
                          DCD      hight
                  |L1.1080|
                          DCD      STnum
                  |L1.1084|
                          DCD      heading
                  |L1.1088|
                          DCD      speed
                  |L1.1092|
000444  2000              MOVS     r0,#0                 ;248
000446  bd10              POP      {r4,pc}
;;;250    
                          ENDP

                  IMU_UART_GET PROC
;;;251    //-----------中断中调用-------------
;;;252    void IMU_UART_GET(unsigned char data)
000448  28a5              CMP      r0,#0xa5
;;;253    {
;;;254      if (data == 0xa5)
00044a  d10d              BNE      |L1.1128|
;;;255      {
;;;256        RC_Flag|=b_uart_head; //如果接收到A5 置位帧头标专位
00044c  4939              LDR      r1,|L1.1332|
00044e  7809              LDRB     r1,[r1,#0]  ; RC_Flag
000450  f0410180          ORR      r1,r1,#0x80
000454  4a37              LDR      r2,|L1.1332|
000456  7011              STRB     r1,[r2,#0]
;;;257        rx_buffer[rx_wr_index++]=data; //保存这个字节.
000458  4a37              LDR      r2,|L1.1336|
00045a  7811              LDRB     r1,[r2,#0]  ; rx_wr_index
00045c  1c4a              ADDS     r2,r1,#1
00045e  4b36              LDR      r3,|L1.1336|
000460  701a              STRB     r2,[r3,#0]
000462  4a36              LDR      r2,|L1.1340|
000464  5450              STRB     r0,[r2,r1]
000466  e037              B        |L1.1240|
                  |L1.1128|
;;;258      }
;;;259      else if (data == 0x5a)
000468  285a              CMP      r0,#0x5a
00046a  d11c              BNE      |L1.1190|
;;;260      {
;;;261        if(RC_Flag&b_uart_head) //如果上一个字节是A5 那么认定 这个是帧起始字节
00046c  4931              LDR      r1,|L1.1332|
00046e  7809              LDRB     r1,[r1,#0]  ; RC_Flag
000470  f0010180          AND      r1,r1,#0x80
000474  b149              CBZ      r1,|L1.1162|
;;;262        {
;;;263          rx_wr_index=0;  //重置 缓冲区指针
000476  2100              MOVS     r1,#0
000478  4a2f              LDR      r2,|L1.1336|
00047a  7011              STRB     r1,[r2,#0]
;;;264          RC_Flag&=~b_rx_over; //这个帧才刚刚开始收
00047c  492d              LDR      r1,|L1.1332|
00047e  7809              LDRB     r1,[r1,#0]  ; RC_Flag
000480  f0210140          BIC      r1,r1,#0x40
000484  4a2b              LDR      r2,|L1.1332|
000486  7011              STRB     r1,[r2,#0]
000488  e006              B        |L1.1176|
                  |L1.1162|
;;;265        }
;;;266        else
;;;267        {
;;;268          rx_buffer[rx_wr_index++]=data;
00048a  4a2b              LDR      r2,|L1.1336|
00048c  7811              LDRB     r1,[r2,#0]  ; rx_wr_index
00048e  1c4a              ADDS     r2,r1,#1
000490  4b29              LDR      r3,|L1.1336|
000492  701a              STRB     r2,[r3,#0]
000494  4a29              LDR      r2,|L1.1340|
000496  5450              STRB     r0,[r2,r1]
                  |L1.1176|
;;;269        }
;;;270        RC_Flag&=~b_uart_head; //清帧头标志
000498  4926              LDR      r1,|L1.1332|
00049a  7809              LDRB     r1,[r1,#0]  ; RC_Flag
00049c  f0210180          BIC      r1,r1,#0x80
0004a0  4a24              LDR      r2,|L1.1332|
0004a2  7011              STRB     r1,[r2,#0]
0004a4  e018              B        |L1.1240|
                  |L1.1190|
;;;271      }
;;;272      else
;;;273      {
;;;274        rx_buffer[rx_wr_index++]=data;
0004a6  4a24              LDR      r2,|L1.1336|
0004a8  7811              LDRB     r1,[r2,#0]  ; rx_wr_index
0004aa  1c4a              ADDS     r2,r1,#1
0004ac  4b22              LDR      r3,|L1.1336|
0004ae  701a              STRB     r2,[r3,#0]
0004b0  4a22              LDR      r2,|L1.1340|
0004b2  5450              STRB     r0,[r2,r1]
;;;275        RC_Flag&=~b_uart_head;
0004b4  491f              LDR      r1,|L1.1332|
0004b6  7809              LDRB     r1,[r1,#0]  ; RC_Flag
0004b8  f0210180          BIC      r1,r1,#0x80
0004bc  4a1d              LDR      r2,|L1.1332|
0004be  7011              STRB     r1,[r2,#0]
;;;276        if(rx_wr_index==rx_buffer[0]) //收够了字节数.(警告说明：用volatile修饰的变量一般不直接参与运算，volatile就以为着这个变量在运算过程中有可能已经改变了)
0004c0  491e              LDR      r1,|L1.1340|
0004c2  7809              LDRB     r1,[r1,#0]  ; rx_buffer
0004c4  461a              MOV      r2,r3
0004c6  7812              LDRB     r2,[r2,#0]  ; rx_wr_index
0004c8  4291              CMP      r1,r2
0004ca  d105              BNE      |L1.1240|
;;;277        {
;;;278          RC_Flag|=b_rx_over; //置位 接收完整的一帧数据
0004cc  4919              LDR      r1,|L1.1332|
0004ce  7809              LDRB     r1,[r1,#0]  ; RC_Flag
0004d0  f0410140          ORR      r1,r1,#0x40
0004d4  4a17              LDR      r2,|L1.1332|
0004d6  7011              STRB     r1,[r2,#0]
                  |L1.1240|
;;;279        }
;;;280      }
;;;281      
;;;282      if(rx_wr_index==RX_BUFFER_SIZE) //防止缓冲区溢出
0004d8  4917              LDR      r1,|L1.1336|
0004da  7809              LDRB     r1,[r1,#0]  ; rx_wr_index
0004dc  2964              CMP      r1,#0x64
0004de  d104              BNE      |L1.1258|
;;;283      {
;;;284        rx_wr_index--;
0004e0  4915              LDR      r1,|L1.1336|
0004e2  7809              LDRB     r1,[r1,#0]  ; rx_wr_index
0004e4  1e49              SUBS     r1,r1,#1
0004e6  4a14              LDR      r2,|L1.1336|
0004e8  7011              STRB     r1,[r2,#0]
                  |L1.1258|
;;;285      } 
;;;286    }
0004ea  4770              BX       lr
;;;287    
                          ENDP

                  IMU_Data_Get PROC
;;;288    //在定时器中定时更新此函数
;;;289    void IMU_Data_Get(void)
0004ec  b510              PUSH     {r4,lr}
;;;290    {
;;;291      if(RC_Flag&b_rx_over)
0004ee  4811              LDR      r0,|L1.1332|
0004f0  7800              LDRB     r0,[r0,#0]  ; RC_Flag
0004f2  f0000040          AND      r0,r0,#0x40
0004f6  b1d8              CBZ      r0,|L1.1328|
;;;292      {
;;;293        RC_Flag&=~b_rx_over; //清标志先
0004f8  480e              LDR      r0,|L1.1332|
0004fa  7800              LDRB     r0,[r0,#0]  ; RC_Flag
0004fc  f0200040          BIC      r0,r0,#0x40
000500  490c              LDR      r1,|L1.1332|
000502  7008              STRB     r0,[r1,#0]
;;;294        if(Sum_check() == 1)
000504  f7fffffe          BL       Sum_check
000508  2801              CMP      r0,#1
00050a  d111              BNE      |L1.1328|
;;;295        {
;;;296          //校验通过
;;;297          if(rx_buffer[1]==0xA1)//UART2_ReportIMU 的数据
00050c  480b              LDR      r0,|L1.1340|
00050e  7840              LDRB     r0,[r0,#1]  ; rx_buffer
000510  28a1              CMP      r0,#0xa1
000512  d101              BNE      |L1.1304|
;;;298          {
;;;299            Get_POSE();//取数据
000514  f7fffffe          BL       Get_POSE
                  |L1.1304|
;;;300          }
;;;301          if(rx_buffer[1]==0xA2)//UART2_ReportMotion 的数据
000518  4808              LDR      r0,|L1.1340|
00051a  7840              LDRB     r0,[r0,#1]  ; rx_buffer
00051c  28a2              CMP      r0,#0xa2
00051e  d101              BNE      |L1.1316|
;;;302          {
;;;303            Get_Motion();//取数据
000520  f7fffffe          BL       Get_Motion
                  |L1.1316|
;;;304          }
;;;305          if(rx_buffer[1]==0xA3)//UART2_P 的数据
000524  4805              LDR      r0,|L1.1340|
000526  7840              LDRB     r0,[r0,#1]  ; rx_buffer
000528  28a3              CMP      r0,#0xa3
00052a  d101              BNE      |L1.1328|
;;;306          {
;;;307            Get_GPS();//取数据
00052c  f7fffffe          BL       Get_GPS
                  |L1.1328|
;;;308          }  
;;;309        }
;;;310      }
;;;311    }
000530  bd10              POP      {r4,pc}
;;;312    
                          ENDP

000532  0000              DCW      0x0000
                  |L1.1332|
                          DCD      RC_Flag
                  |L1.1336|
                          DCD      rx_wr_index
                  |L1.1340|
                          DCD      rx_buffer

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  rx_buffer
                          %        100

                          AREA ||.data||, DATA, ALIGN=2

                  rx_wr_index
000000  00                DCB      0x00
                  RC_Flag
000001  000000            DCB      0x00,0x00,0x00
                  yaw
                          DCD      0x00000000
                  pitch
                          DCD      0x00000000
                  roll
                          DCD      0x00000000
                  alt
                          DCD      0x00000000
                  tempr
                          DCD      0x00000000
                  press
                          DCD      0x00000000
                  lon
                          DCD      0x00000000
                  lat
                          DCD      0x00000000
                  hight
000024  0000              DCB      0x00,0x00
                  STnum
000026  0000              DCB      0x00,0x00
                  heading
000028  0000              DCB      0x00,0x00
                  speed
00002a  0000              DCB      0x00,0x00
                  ||ax||
00002c  0000              DCB      0x00,0x00
                  ||ay||
00002e  0000              DCB      0x00,0x00
                  ||az||
000030  0000              DCB      0x00,0x00
                  ||gx||
000032  0000              DCB      0x00,0x00
                  ||gy||
000034  0000              DCB      0x00,0x00
                  ||gz||
000036  0000              DCB      0x00,0x00
                  ||hx||
000038  0000              DCB      0x00,0x00
                  ||hy||
00003a  0000              DCB      0x00,0x00
                  ||hz||
00003c  0000              DCB      0x00,0x00
