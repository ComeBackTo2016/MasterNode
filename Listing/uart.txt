; generated by Component: ARM Compiler 5.06 update 2 (build 183) Tool: ArmCC [4d35cd]
; commandline ArmCC [--list --debug -c --asm --interleave -o..\..\output\uart.o --asm_dir=..\..\Listing\ --list_dir=..\..\Listing\ --depend=..\..\output\uart.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\..\Libraries\CMSIS -I..\..\User -I..\..\Libraries\FWlib\inc -I..\..\User\Alogrisem\inc -I..\..\User\BSP_Init\inc -I..\..\User\exDev\inc -IH:\CETC\Project\第二代机器鱼程序\AV1.3\Project\RVMDK（uv4）\RTE -ID:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\1.0.5\Device\Include -ID:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=520 -DSTM32F10X_HD -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -W --omf_browse=..\..\output\uart.crf ..\..\User\BSP_Init\src\uart.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  UART1_PA09_PA10_Config PROC
;;;5      
;;;6      void UART1_PA09_PA10_Config(void)
000000  b500              PUSH     {lr}
;;;7      {
000002  b085              SUB      sp,sp,#0x14
;;;8      		GPIO_InitTypeDef GPIO_InitStructure;
;;;9      		USART_InitTypeDef USART_InitStructure;
;;;10     		
;;;11     		/* config USART1 clock */
;;;12     		RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1 | RCC_APB2Periph_GPIOA | RCC_APB2Periph_AFIO, ENABLE);
000004  2101              MOVS     r1,#1
000006  f2440005          MOV      r0,#0x4005
00000a  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;13     		
;;;14     		/* USART1 GPIO config */
;;;15     		/* Configure USART1 Tx (PA.09) as alternate function push-pull */
;;;16     		GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
00000e  f44f7000          MOV      r0,#0x200
000012  f8ad0010          STRH     r0,[sp,#0x10]
;;;17     		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
000016  2018              MOVS     r0,#0x18
000018  f88d0013          STRB     r0,[sp,#0x13]
;;;18     		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
00001c  2003              MOVS     r0,#3
00001e  f88d0012          STRB     r0,[sp,#0x12]
;;;19     		GPIO_Init(GPIOA, &GPIO_InitStructure);
000022  a904              ADD      r1,sp,#0x10
000024  48d4              LDR      r0,|L1.888|
000026  f7fffffe          BL       GPIO_Init
;;;20     	
;;;21     		/* Configure USART1 Rx (PA.10) as input floating */
;;;22     		GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
00002a  f44f6080          MOV      r0,#0x400
00002e  f8ad0010          STRH     r0,[sp,#0x10]
;;;23     		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
000032  2004              MOVS     r0,#4
000034  f88d0013          STRB     r0,[sp,#0x13]
;;;24     		GPIO_Init(GPIOA, &GPIO_InitStructure);
000038  a904              ADD      r1,sp,#0x10
00003a  48cf              LDR      r0,|L1.888|
00003c  f7fffffe          BL       GPIO_Init
;;;25     			
;;;26     		/* USART1 mode config */
;;;27     		USART_InitStructure.USART_BaudRate = 9600;
000040  f44f5016          MOV      r0,#0x2580
000044  9000              STR      r0,[sp,#0]
;;;28     		USART_InitStructure.USART_WordLength = USART_WordLength_8b;
000046  2000              MOVS     r0,#0
000048  f8ad0004          STRH     r0,[sp,#4]
;;;29     		USART_InitStructure.USART_StopBits = USART_StopBits_1;
00004c  f8ad0006          STRH     r0,[sp,#6]
;;;30     		USART_InitStructure.USART_Parity = USART_Parity_No ;
000050  f8ad0008          STRH     r0,[sp,#8]
;;;31     		USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
000054  f8ad000c          STRH     r0,[sp,#0xc]
;;;32     		USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
000058  200c              MOVS     r0,#0xc
00005a  f8ad000a          STRH     r0,[sp,#0xa]
;;;33     		USART_Init(USART1, &USART_InitStructure); 
00005e  4669              MOV      r1,sp
000060  48c6              LDR      r0,|L1.892|
000062  f7fffffe          BL       USART_Init
;;;34     		USART_Cmd(USART1, ENABLE);
000066  2101              MOVS     r1,#1
000068  48c4              LDR      r0,|L1.892|
00006a  f7fffffe          BL       USART_Cmd
;;;35     		USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);
00006e  2201              MOVS     r2,#1
000070  f2405125          MOV      r1,#0x525
000074  48c1              LDR      r0,|L1.892|
000076  f7fffffe          BL       USART_ITConfig
;;;36     }
00007a  b005              ADD      sp,sp,#0x14
00007c  bd00              POP      {pc}
;;;37     
                          ENDP

                  UART1_NVIC_Config PROC
;;;38     void UART1_NVIC_Config(unsigned char PreemptionPriority, unsigned char SubPriority)
00007e  b538              PUSH     {r3-r5,lr}
;;;39     {
000080  4605              MOV      r5,r0
000082  460c              MOV      r4,r1
;;;40     	NVIC_InitTypeDef NVIC_InitStructure; 
;;;41     	/* Configure the NVIC Preemption Priority Bits */  
;;;42     	
;;;43     	/* Enable the USARTy Interrupt */
;;;44     	NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;	 
000084  2025              MOVS     r0,#0x25
000086  f88d0000          STRB     r0,[sp,#0]
;;;45     	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = PreemptionPriority;
00008a  f88d5001          STRB     r5,[sp,#1]
;;;46     	NVIC_InitStructure.NVIC_IRQChannelSubPriority = SubPriority;
00008e  f88d4002          STRB     r4,[sp,#2]
;;;47     	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
000092  2001              MOVS     r0,#1
000094  f88d0003          STRB     r0,[sp,#3]
;;;48     	NVIC_Init(&NVIC_InitStructure);
000098  4668              MOV      r0,sp
00009a  f7fffffe          BL       NVIC_Init
;;;49     }
00009e  bd38              POP      {r3-r5,pc}
;;;50     
                          ENDP

                  UART2_PA02_PA03_Config PROC
;;;51     void UART2_PA02_PA03_Config(void)
0000a0  b500              PUSH     {lr}
;;;52     {
0000a2  b085              SUB      sp,sp,#0x14
;;;53     	GPIO_InitTypeDef GPIO_InitStructure;
;;;54     	USART_InitTypeDef USART_InitStructure;
;;;55     	
;;;56     		/* config USART1 clock */
;;;57     	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
0000a4  2101              MOVS     r1,#1
0000a6  0448              LSLS     r0,r1,#17
0000a8  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;58     	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_AFIO, ENABLE);
0000ac  2101              MOVS     r1,#1
0000ae  2005              MOVS     r0,#5
0000b0  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;59     	
;;;60     	/* Configure USART2 Tx (PA.02) as alternate function push-pull */
;;;61       	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
0000b4  2004              MOVS     r0,#4
0000b6  f8ad0010          STRH     r0,[sp,#0x10]
;;;62       	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;   
0000ba  2018              MOVS     r0,#0x18
0000bc  f88d0013          STRB     r0,[sp,#0x13]
;;;63       	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
0000c0  2003              MOVS     r0,#3
0000c2  f88d0012          STRB     r0,[sp,#0x12]
;;;64       	GPIO_Init(GPIOA, &GPIO_InitStructure);
0000c6  a904              ADD      r1,sp,#0x10
0000c8  48ab              LDR      r0,|L1.888|
0000ca  f7fffffe          BL       GPIO_Init
;;;65         
;;;66       	/* Configure USART2 Rx (PA.03) as input floating */
;;;67       	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
0000ce  2008              MOVS     r0,#8
0000d0  f8ad0010          STRH     r0,[sp,#0x10]
;;;68       	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;  
0000d4  2004              MOVS     r0,#4
0000d6  f88d0013          STRB     r0,[sp,#0x13]
;;;69       	GPIO_Init(GPIOA, &GPIO_InitStructure);
0000da  a904              ADD      r1,sp,#0x10
0000dc  48a6              LDR      r0,|L1.888|
0000de  f7fffffe          BL       GPIO_Init
;;;70     	
;;;71     	USART_InitStructure.USART_BaudRate            = 9600  ;
0000e2  f44f5016          MOV      r0,#0x2580
0000e6  9000              STR      r0,[sp,#0]
;;;72     	USART_InitStructure.USART_WordLength          = USART_WordLength_8b;  
0000e8  2000              MOVS     r0,#0
0000ea  f8ad0004          STRH     r0,[sp,#4]
;;;73     	USART_InitStructure.USART_StopBits            = USART_StopBits_1;     
0000ee  f8ad0006          STRH     r0,[sp,#6]
;;;74     	USART_InitStructure.USART_Parity              = USART_Parity_No ;     
0000f2  f8ad0008          STRH     r0,[sp,#8]
;;;75     	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
0000f6  f8ad000c          STRH     r0,[sp,#0xc]
;;;76     	USART_InitStructure.USART_Mode                = USART_Mode_Rx | USART_Mode_Tx;
0000fa  200c              MOVS     r0,#0xc
0000fc  f8ad000a          STRH     r0,[sp,#0xa]
;;;77     	USART_Init(USART2, &USART_InitStructure);
000100  4669              MOV      r1,sp
000102  489f              LDR      r0,|L1.896|
000104  f7fffffe          BL       USART_Init
;;;78     	USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
000108  2201              MOVS     r2,#1
00010a  f2405125          MOV      r1,#0x525
00010e  489c              LDR      r0,|L1.896|
000110  f7fffffe          BL       USART_ITConfig
;;;79     	USART_Cmd(USART2, ENABLE); 
000114  2101              MOVS     r1,#1
000116  489a              LDR      r0,|L1.896|
000118  f7fffffe          BL       USART_Cmd
;;;80     }
00011c  b005              ADD      sp,sp,#0x14
00011e  bd00              POP      {pc}
;;;81     
                          ENDP

                  UART2_NVIC_Config PROC
;;;82     void UART2_NVIC_Config(unsigned char PreemptionPriority, unsigned char SubPriority)
000120  b538              PUSH     {r3-r5,lr}
;;;83     {
000122  4605              MOV      r5,r0
000124  460c              MOV      r4,r1
;;;84     	NVIC_InitTypeDef NVIC_InitStructure; 
;;;85     	/* Configure the NVIC Preemption Priority Bits */  
;;;86     	
;;;87     	/* Enable the USARTy Interrupt */
;;;88     	NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;	 
000126  2026              MOVS     r0,#0x26
000128  f88d0000          STRB     r0,[sp,#0]
;;;89     	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = PreemptionPriority;
00012c  f88d5001          STRB     r5,[sp,#1]
;;;90     	NVIC_InitStructure.NVIC_IRQChannelSubPriority = SubPriority;
000130  f88d4002          STRB     r4,[sp,#2]
;;;91     	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
000134  2001              MOVS     r0,#1
000136  f88d0003          STRB     r0,[sp,#3]
;;;92     	NVIC_Init(&NVIC_InitStructure);
00013a  4668              MOV      r0,sp
00013c  f7fffffe          BL       NVIC_Init
;;;93     }
000140  bd38              POP      {r3-r5,pc}
;;;94     
                          ENDP

                  UART3_PB10_PB11_Config PROC
;;;95     void UART3_PB10_PB11_Config(void)
000142  b500              PUSH     {lr}
;;;96     {
000144  b085              SUB      sp,sp,#0x14
;;;97     	GPIO_InitTypeDef GPIO_InitStructure;
;;;98     	USART_InitTypeDef USART_InitStructure;
;;;99     	
;;;100    	/* config USART1 clock */
;;;101    	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);
000146  2101              MOVS     r1,#1
000148  0488              LSLS     r0,r1,#18
00014a  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;102    	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB | RCC_APB2Periph_AFIO, ENABLE);
00014e  2101              MOVS     r1,#1
000150  2009              MOVS     r0,#9
000152  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;103    	
;;;104    	/* Configure USART3 Tx (PB.10) as alternate function push-pull */
;;;105      	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
000156  f44f6080          MOV      r0,#0x400
00015a  f8ad0010          STRH     r0,[sp,#0x10]
;;;106      	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP; 
00015e  2018              MOVS     r0,#0x18
000160  f88d0013          STRB     r0,[sp,#0x13]
;;;107      	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000164  2003              MOVS     r0,#3
000166  f88d0012          STRB     r0,[sp,#0x12]
;;;108      	GPIO_Init(GPIOB, &GPIO_InitStructure);
00016a  a904              ADD      r1,sp,#0x10
00016c  4885              LDR      r0,|L1.900|
00016e  f7fffffe          BL       GPIO_Init
;;;109        
;;;110      	/* Configure USART3 Rx (PB.11) as input floating */
;;;111      	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11;
000172  f44f6000          MOV      r0,#0x800
000176  f8ad0010          STRH     r0,[sp,#0x10]
;;;112      	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;  
00017a  2004              MOVS     r0,#4
00017c  f88d0013          STRB     r0,[sp,#0x13]
;;;113      	GPIO_Init(GPIOB, &GPIO_InitStructure);
000180  a904              ADD      r1,sp,#0x10
000182  4880              LDR      r0,|L1.900|
000184  f7fffffe          BL       GPIO_Init
;;;114    	
;;;115    	USART_InitStructure.USART_BaudRate            = 9600  ;
000188  f44f5016          MOV      r0,#0x2580
00018c  9000              STR      r0,[sp,#0]
;;;116    	USART_InitStructure.USART_WordLength          = USART_WordLength_8b;  
00018e  2000              MOVS     r0,#0
000190  f8ad0004          STRH     r0,[sp,#4]
;;;117    	USART_InitStructure.USART_StopBits            = USART_StopBits_1;     
000194  f8ad0006          STRH     r0,[sp,#6]
;;;118    	USART_InitStructure.USART_Parity              = USART_Parity_No ;     
000198  f8ad0008          STRH     r0,[sp,#8]
;;;119    	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
00019c  f8ad000c          STRH     r0,[sp,#0xc]
;;;120    	USART_InitStructure.USART_Mode                = USART_Mode_Rx | USART_Mode_Tx;
0001a0  200c              MOVS     r0,#0xc
0001a2  f8ad000a          STRH     r0,[sp,#0xa]
;;;121    	USART_Init(USART3, &USART_InitStructure);
0001a6  4669              MOV      r1,sp
0001a8  4877              LDR      r0,|L1.904|
0001aa  f7fffffe          BL       USART_Init
;;;122    	USART_ITConfig(USART3, USART_IT_RXNE, ENABLE);
0001ae  2201              MOVS     r2,#1
0001b0  f2405125          MOV      r1,#0x525
0001b4  4874              LDR      r0,|L1.904|
0001b6  f7fffffe          BL       USART_ITConfig
;;;123    	USART_Cmd(USART3, ENABLE);     
0001ba  2101              MOVS     r1,#1
0001bc  4872              LDR      r0,|L1.904|
0001be  f7fffffe          BL       USART_Cmd
;;;124    }
0001c2  b005              ADD      sp,sp,#0x14
0001c4  bd00              POP      {pc}
;;;125    
                          ENDP

                  UART4_PC10_PC11_Config PROC
;;;126    void UART4_PC10_PC11_Config(void)
0001c6  b500              PUSH     {lr}
;;;127    {
0001c8  b085              SUB      sp,sp,#0x14
;;;128    	GPIO_InitTypeDef GPIO_InitStructure;
;;;129    	USART_InitTypeDef USART_InitStructure;
;;;130    	
;;;131    	/* config UART4 clock */
;;;132    	RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART4, ENABLE);
0001ca  2101              MOVS     r1,#1
0001cc  04c8              LSLS     r0,r1,#19
0001ce  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;133    	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC | RCC_APB2Periph_AFIO, ENABLE);
0001d2  2101              MOVS     r1,#1
0001d4  2011              MOVS     r0,#0x11
0001d6  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;134    	
;;;135    	/* Configure UART4 Tx (PC.10) as alternate function push-pull */
;;;136      	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
0001da  f44f6080          MOV      r0,#0x400
0001de  f8ad0010          STRH     r0,[sp,#0x10]
;;;137      	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP; 
0001e2  2018              MOVS     r0,#0x18
0001e4  f88d0013          STRB     r0,[sp,#0x13]
;;;138      	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
0001e8  2003              MOVS     r0,#3
0001ea  f88d0012          STRB     r0,[sp,#0x12]
;;;139      	GPIO_Init(GPIOC, &GPIO_InitStructure);
0001ee  a904              ADD      r1,sp,#0x10
0001f0  4866              LDR      r0,|L1.908|
0001f2  f7fffffe          BL       GPIO_Init
;;;140        
;;;141      	/* Configure UART4 Rx (PC.11) as input floating */
;;;142      	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11;
0001f6  f44f6000          MOV      r0,#0x800
0001fa  f8ad0010          STRH     r0,[sp,#0x10]
;;;143      	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;  
0001fe  2004              MOVS     r0,#4
000200  f88d0013          STRB     r0,[sp,#0x13]
;;;144      	GPIO_Init(GPIOC, &GPIO_InitStructure);
000204  a904              ADD      r1,sp,#0x10
000206  4861              LDR      r0,|L1.908|
000208  f7fffffe          BL       GPIO_Init
;;;145    	
;;;146    	USART_InitStructure.USART_BaudRate            = 9600  ;
00020c  f44f5016          MOV      r0,#0x2580
000210  9000              STR      r0,[sp,#0]
;;;147    	USART_InitStructure.USART_WordLength          = USART_WordLength_8b;  
000212  2000              MOVS     r0,#0
000214  f8ad0004          STRH     r0,[sp,#4]
;;;148    	USART_InitStructure.USART_StopBits            = USART_StopBits_1;     
000218  f8ad0006          STRH     r0,[sp,#6]
;;;149    	USART_InitStructure.USART_Parity              = USART_Parity_No ;     
00021c  f8ad0008          STRH     r0,[sp,#8]
;;;150    	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
000220  f8ad000c          STRH     r0,[sp,#0xc]
;;;151    	USART_InitStructure.USART_Mode                = USART_Mode_Rx | USART_Mode_Tx;
000224  200c              MOVS     r0,#0xc
000226  f8ad000a          STRH     r0,[sp,#0xa]
;;;152    	USART_Init(UART4, &USART_InitStructure);
00022a  4669              MOV      r1,sp
00022c  4858              LDR      r0,|L1.912|
00022e  f7fffffe          BL       USART_Init
;;;153    	USART_ITConfig(UART4, USART_IT_RXNE, ENABLE);
000232  2201              MOVS     r2,#1
000234  f2405125          MOV      r1,#0x525
000238  4855              LDR      r0,|L1.912|
00023a  f7fffffe          BL       USART_ITConfig
;;;154    	USART_Cmd(UART4, ENABLE);     
00023e  2101              MOVS     r1,#1
000240  4853              LDR      r0,|L1.912|
000242  f7fffffe          BL       USART_Cmd
;;;155    }
000246  b005              ADD      sp,sp,#0x14
000248  bd00              POP      {pc}
;;;156    
                          ENDP

                  UART5_PC12_PD02_Config PROC
;;;157    void UART5_PC12_PD02_Config(void)
00024a  b500              PUSH     {lr}
;;;158    {
00024c  b085              SUB      sp,sp,#0x14
;;;159    	GPIO_InitTypeDef GPIO_InitStructure;
;;;160    	USART_InitTypeDef USART_InitStructure;
;;;161    	
;;;162    	/* config UART4 clock */
;;;163    	RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART5, ENABLE);
00024e  2101              MOVS     r1,#1
000250  0508              LSLS     r0,r1,#20
000252  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;164    	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC | RCC_APB2Periph_GPIOD | RCC_APB2Periph_AFIO, ENABLE);
000256  2101              MOVS     r1,#1
000258  2031              MOVS     r0,#0x31
00025a  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;165    	
;;;166    	/* Configure UART5 Tx (PC.12) as alternate function push-pull */
;;;167      	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12;
00025e  f44f5080          MOV      r0,#0x1000
000262  f8ad0010          STRH     r0,[sp,#0x10]
;;;168      	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP; 
000266  2018              MOVS     r0,#0x18
000268  f88d0013          STRB     r0,[sp,#0x13]
;;;169      	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
00026c  2003              MOVS     r0,#3
00026e  f88d0012          STRB     r0,[sp,#0x12]
;;;170      	GPIO_Init(GPIOC, &GPIO_InitStructure);
000272  a904              ADD      r1,sp,#0x10
000274  4845              LDR      r0,|L1.908|
000276  f7fffffe          BL       GPIO_Init
;;;171        
;;;172      	/* Configure UART5 Rx (PD.02) as input floating */
;;;173      	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
00027a  2004              MOVS     r0,#4
00027c  f8ad0010          STRH     r0,[sp,#0x10]
;;;174      	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;  
000280  f88d0013          STRB     r0,[sp,#0x13]
;;;175      	GPIO_Init(GPIOD, &GPIO_InitStructure);
000284  a904              ADD      r1,sp,#0x10
000286  4843              LDR      r0,|L1.916|
000288  f7fffffe          BL       GPIO_Init
;;;176    	
;;;177    	USART_InitStructure.USART_BaudRate            = 9600  ;
00028c  f44f5016          MOV      r0,#0x2580
000290  9000              STR      r0,[sp,#0]
;;;178    	USART_InitStructure.USART_WordLength          = USART_WordLength_8b;  
000292  2000              MOVS     r0,#0
000294  f8ad0004          STRH     r0,[sp,#4]
;;;179    	USART_InitStructure.USART_StopBits            = USART_StopBits_1;     
000298  f8ad0006          STRH     r0,[sp,#6]
;;;180    	USART_InitStructure.USART_Parity              = USART_Parity_No ;     
00029c  f8ad0008          STRH     r0,[sp,#8]
;;;181    	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
0002a0  f8ad000c          STRH     r0,[sp,#0xc]
;;;182    	USART_InitStructure.USART_Mode                = USART_Mode_Rx | USART_Mode_Tx;
0002a4  200c              MOVS     r0,#0xc
0002a6  f8ad000a          STRH     r0,[sp,#0xa]
;;;183    	USART_Init(UART5, &USART_InitStructure);
0002aa  4669              MOV      r1,sp
0002ac  483a              LDR      r0,|L1.920|
0002ae  f7fffffe          BL       USART_Init
;;;184    	USART_ITConfig(UART5, USART_IT_RXNE, ENABLE);
0002b2  2201              MOVS     r2,#1
0002b4  f2405125          MOV      r1,#0x525
0002b8  4837              LDR      r0,|L1.920|
0002ba  f7fffffe          BL       USART_ITConfig
;;;185    	USART_Cmd(UART5, ENABLE);     
0002be  2101              MOVS     r1,#1
0002c0  4835              LDR      r0,|L1.920|
0002c2  f7fffffe          BL       USART_Cmd
;;;186    }
0002c6  b005              ADD      sp,sp,#0x14
0002c8  bd00              POP      {pc}
;;;187    
                          ENDP

                  USART1_SendByte PROC
;;;188    
;;;189    void USART1_SendByte(u16 Data)
0002ca  bf00              NOP      
                  |L1.716|
;;;190    { 
;;;191       while (!(USART1->SR & USART_FLAG_TXE));
0002cc  492b              LDR      r1,|L1.892|
0002ce  8809              LDRH     r1,[r1,#0]
0002d0  f0010180          AND      r1,r1,#0x80
0002d4  2900              CMP      r1,#0
0002d6  d0f9              BEQ      |L1.716|
;;;192       USART1->DR = (Data & (uint16_t)0x01FF);	 
0002d8  f3c00108          UBFX     r1,r0,#0,#9
0002dc  4a27              LDR      r2,|L1.892|
0002de  1d12              ADDS     r2,r2,#4
0002e0  8011              STRH     r1,[r2,#0]
;;;193    }
0002e2  4770              BX       lr
;;;194    
                          ENDP

                  USART2_SendByte PROC
;;;195    void USART2_SendByte(u16 Data)
0002e4  bf00              NOP      
                  |L1.742|
;;;196    { 
;;;197       while (!(USART2->SR & USART_FLAG_TXE));
0002e6  4926              LDR      r1,|L1.896|
0002e8  8809              LDRH     r1,[r1,#0]
0002ea  f0010180          AND      r1,r1,#0x80
0002ee  2900              CMP      r1,#0
0002f0  d0f9              BEQ      |L1.742|
;;;198       USART2->DR = (Data & (uint16_t)0x01FF);	   
0002f2  f3c00108          UBFX     r1,r0,#0,#9
0002f6  4a22              LDR      r2,|L1.896|
0002f8  1d12              ADDS     r2,r2,#4
0002fa  8011              STRH     r1,[r2,#0]
;;;199    }
0002fc  4770              BX       lr
;;;200    
                          ENDP

                  USART2_SendString PROC
;;;201    void USART2_SendString(uint8_t *ch)
0002fe  b510              PUSH     {r4,lr}
;;;202    {
000300  4604              MOV      r4,r0
;;;203    	while(*ch!=0)
000302  e00b              B        |L1.796|
                  |L1.772|
;;;204    	{		
;;;205    		while(!USART_GetFlagStatus(USART2, USART_FLAG_TXE));
000304  bf00              NOP      
                  |L1.774|
000306  2180              MOVS     r1,#0x80
000308  481d              LDR      r0,|L1.896|
00030a  f7fffffe          BL       USART_GetFlagStatus
00030e  2800              CMP      r0,#0
000310  d0f9              BEQ      |L1.774|
;;;206    		USART_SendData(USART2, *ch);
000312  7821              LDRB     r1,[r4,#0]
000314  481a              LDR      r0,|L1.896|
000316  f7fffffe          BL       USART_SendData
;;;207    		ch++;
00031a  1c64              ADDS     r4,r4,#1
                  |L1.796|
00031c  7820              LDRB     r0,[r4,#0]            ;203
00031e  2800              CMP      r0,#0                 ;203
000320  d1f0              BNE      |L1.772|
;;;208    	}   	
;;;209    }
000322  bd10              POP      {r4,pc}
;;;210    
                          ENDP

                  USART3_SendByte PROC
;;;211    void USART3_SendByte(u16 Data)
000324  bf00              NOP      
                  |L1.806|
;;;212    {
;;;213       while (!(USART3->SR & USART_FLAG_TXE));
000326  4918              LDR      r1,|L1.904|
000328  8809              LDRH     r1,[r1,#0]
00032a  f0010180          AND      r1,r1,#0x80
00032e  2900              CMP      r1,#0
000330  d0f9              BEQ      |L1.806|
;;;214       USART3->DR = (Data & (uint16_t)0x01FF);	 
000332  f3c00108          UBFX     r1,r0,#0,#9
000336  4a14              LDR      r2,|L1.904|
000338  1d12              ADDS     r2,r2,#4
00033a  8011              STRH     r1,[r2,#0]
;;;215    }
00033c  4770              BX       lr
;;;216    
                          ENDP

                  fputc PROC
;;;217    int fputc(int ch, FILE *f)
00033e  b570              PUSH     {r4-r6,lr}
;;;218    {
000340  4604              MOV      r4,r0
000342  460d              MOV      r5,r1
;;;219    		USART_SendData(USART1, (uint8_t) ch);
000344  b2e1              UXTB     r1,r4
000346  480d              LDR      r0,|L1.892|
000348  f7fffffe          BL       USART_SendData
;;;220    		while (USART_GetFlagStatus(USART1, USART_FLAG_TC) == RESET);		
00034c  bf00              NOP      
                  |L1.846|
00034e  2140              MOVS     r1,#0x40
000350  480a              LDR      r0,|L1.892|
000352  f7fffffe          BL       USART_GetFlagStatus
000356  2800              CMP      r0,#0
000358  d0f9              BEQ      |L1.846|
;;;221    		return (ch);
00035a  4620              MOV      r0,r4
;;;222    }
00035c  bd70              POP      {r4-r6,pc}
;;;223    
                          ENDP

                  fgetc PROC
;;;224    int fgetc(FILE *f)
00035e  b510              PUSH     {r4,lr}
;;;225    {
000360  4604              MOV      r4,r0
;;;226    		while (USART_GetFlagStatus(USART1, USART_FLAG_RXNE) == RESET);
000362  bf00              NOP      
                  |L1.868|
000364  2120              MOVS     r1,#0x20
000366  4805              LDR      r0,|L1.892|
000368  f7fffffe          BL       USART_GetFlagStatus
00036c  2800              CMP      r0,#0
00036e  d0f9              BEQ      |L1.868|
;;;227    		return (int)USART_ReceiveData(USART1);
000370  4802              LDR      r0,|L1.892|
000372  f7fffffe          BL       USART_ReceiveData
;;;228    }
000376  bd10              POP      {r4,pc}
;;;229    
                          ENDP

                  |L1.888|
                          DCD      0x40010800
                  |L1.892|
                          DCD      0x40013800
                  |L1.896|
                          DCD      0x40004400
                  |L1.900|
                          DCD      0x40010c00
                  |L1.904|
                          DCD      0x40004800
                  |L1.908|
                          DCD      0x40011000
                  |L1.912|
                          DCD      0x40004c00
                  |L1.916|
                          DCD      0x40011400
                  |L1.920|
                          DCD      0x40005000
