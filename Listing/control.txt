; generated by Component: ARM Compiler 5.06 update 2 (build 183) Tool: ArmCC [4d35cd]
; commandline ArmCC [--list --debug -c --asm --interleave -o..\..\output\control.o --asm_dir=..\..\Listing\ --list_dir=..\..\Listing\ --depend=..\..\output\control.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\..\Libraries\CMSIS -I..\..\User -I..\..\Libraries\FWlib\inc -I..\..\User\Alogrisem\inc -I..\..\User\BSP_Init\inc -I..\..\User\exDev\inc -IH:\CETC\Project\第二代机器鱼程序\AV1.3\Project\RVMDK（uv4）\RTE -ID:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\1.0.5\Device\Include -ID:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=520 -DSTM32F10X_HD -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -W --omf_browse=..\..\output\control.crf ..\..\User\Alogrisem\src\Control.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  Send_float_to_byte PROC
;;;27       */
;;;28     unsigned char* Send_float_to_byte(float temp)
000000  b508              PUSH     {r3,lr}
;;;29     {
000002  4602              MOV      r2,r0
;;;30     	union UFLOAT
;;;31     	{
;;;32     		float f;
;;;33     		unsigned char byte[4];
;;;34     	};
;;;35     	union UFLOAT data;	
;;;36     	int i;
;;;37     	data.f = temp;
000004  9200              STR      r2,[sp,#0]
;;;38     	for(i=0;i<4;i++)
000006  2100              MOVS     r1,#0
000008  e004              B        |L1.20|
                  |L1.10|
;;;39     	float2byte[i] = data.byte[i];
00000a  f81d0001          LDRB     r0,[sp,r1]
00000e  4bfe              LDR      r3,|L1.1032|
000010  5458              STRB     r0,[r3,r1]
000012  1c49              ADDS     r1,r1,#1              ;38
                  |L1.20|
000014  2904              CMP      r1,#4                 ;38
000016  dbf8              BLT      |L1.10|
;;;40     	return float2byte;
000018  48fb              LDR      r0,|L1.1032|
;;;41     }
00001a  bd08              POP      {r3,pc}
;;;42     
                          ENDP

                  Receive_byte_to_float PROC
;;;43     float Receive_byte_to_float(unsigned char* temp)
00001c  b508              PUSH     {r3,lr}
;;;44     {
00001e  4602              MOV      r2,r0
;;;45     	union UFLOAT
;;;46     	{
;;;47     		float f;
;;;48     		unsigned char byte[4];
;;;49     	};
;;;50     	union UFLOAT data;
;;;51     	unsigned char i;
;;;52     	for(i=0;i<4;i++)
000020  2100              MOVS     r1,#0
000022  e004              B        |L1.46|
                  |L1.36|
;;;53     	data.byte[i] = *(temp+i);
000024  5c50              LDRB     r0,[r2,r1]
000026  f80d0001          STRB     r0,[sp,r1]
00002a  1c48              ADDS     r0,r1,#1              ;52
00002c  b2c1              UXTB     r1,r0                 ;52
                  |L1.46|
00002e  2904              CMP      r1,#4                 ;52
000030  dbf8              BLT      |L1.36|
;;;54     	return data.f;
000032  9800              LDR      r0,[sp,#0]
;;;55     }
000034  bd08              POP      {r3,pc}
;;;56     
                          ENDP

                  Receive_byte_to_int PROC
;;;57     int Receive_byte_to_int(unsigned char* temp)
000036  b508              PUSH     {r3,lr}
;;;58     {
000038  4602              MOV      r2,r0
;;;59     	union UINT
;;;60     	{
;;;61     		int in;
;;;62     		unsigned char byte[2];
;;;63     	};
;;;64     	union UINT data;
;;;65     	unsigned char i;
;;;66     	for(i=0;i<2;i++)
00003a  2100              MOVS     r1,#0
00003c  e004              B        |L1.72|
                  |L1.62|
;;;67     	data.byte[i] = *(temp+i);
00003e  5c50              LDRB     r0,[r2,r1]
000040  f80d0001          STRB     r0,[sp,r1]
000044  1c48              ADDS     r0,r1,#1              ;66
000046  b2c1              UXTB     r1,r0                 ;66
                  |L1.72|
000048  2902              CMP      r1,#2                 ;66
00004a  dbf8              BLT      |L1.62|
;;;68     	return data.in;
00004c  9800              LDR      r0,[sp,#0]
;;;69     }
00004e  bd08              POP      {r3,pc}
;;;70     
                          ENDP

                  MOTION_UART_GET PROC
;;;83     static unsigned char rC_fLAG = 0x00;
;;;84     void MOTION_UART_GET(unsigned char data)
000050  285a              CMP      r0,#0x5a
;;;85     {
;;;86     	
;;;87     	static unsigned char rC_cNT = 0;
;;;88     	if (data == 0x5a)								//接收0x5a可能为首帧
000052  d10e              BNE      |L1.114|
;;;89     	{
;;;90     		rC_fLAG |= COM_HEAD;					//接收标志位标志首帧接收
000054  49ed              LDR      r1,|L1.1036|
000056  7809              LDRB     r1,[r1,#0]  ; rC_fLAG
000058  f0410180          ORR      r1,r1,#0x80
00005c  4aeb              LDR      r2,|L1.1036|
00005e  7011              STRB     r1,[r2,#0]
;;;91     		RC_CONL_BOX[rC_cNT++] = data;	//存储该帧数据
000060  49eb              LDR      r1,|L1.1040|
000062  780a              LDRB     r2,[r1,#0]  ; rC_cNT
000064  7809              LDRB     r1,[r1,#0]  ; rC_cNT
000066  1c49              ADDS     r1,r1,#1
000068  4be9              LDR      r3,|L1.1040|
00006a  7019              STRB     r1,[r3,#0]
00006c  49e9              LDR      r1,|L1.1044|
00006e  5488              STRB     r0,[r1,r2]
000070  e03a              B        |L1.232|
                  |L1.114|
;;;92     	}
;;;93     	else if(data == 0xa5)						
000072  28a5              CMP      r0,#0xa5
000074  d11d              BNE      |L1.178|
;;;94     	{
;;;95     		if (rC_fLAG & COM_HEAD)				//判断上一帧一定为首帧
000076  49e5              LDR      r1,|L1.1036|
000078  7809              LDRB     r1,[r1,#0]  ; rC_fLAG
00007a  f0010180          AND      r1,r1,#0x80
00007e  b149              CBZ      r1,|L1.148|
;;;96     		{
;;;97     			rC_cNT = 0;									//计数指针清零
000080  2100              MOVS     r1,#0
000082  4ae3              LDR      r2,|L1.1040|
000084  7011              STRB     r1,[r2,#0]
;;;98     			rC_fLAG &= ~COM_OVER;
000086  49e1              LDR      r1,|L1.1036|
000088  7809              LDRB     r1,[r1,#0]  ; rC_fLAG
00008a  f0210140          BIC      r1,r1,#0x40
00008e  4adf              LDR      r2,|L1.1036|
000090  7011              STRB     r1,[r2,#0]
000092  e007              B        |L1.164|
                  |L1.148|
;;;99     		}
;;;100    		else
;;;101    		{
;;;102    			RC_CONL_BOX[rC_cNT++] = data;
000094  49de              LDR      r1,|L1.1040|
000096  780a              LDRB     r2,[r1,#0]  ; rC_cNT
000098  7809              LDRB     r1,[r1,#0]  ; rC_cNT
00009a  1c49              ADDS     r1,r1,#1
00009c  4bdc              LDR      r3,|L1.1040|
00009e  7019              STRB     r1,[r3,#0]
0000a0  49dc              LDR      r1,|L1.1044|
0000a2  5488              STRB     r0,[r1,r2]
                  |L1.164|
;;;103    		}
;;;104    		rC_fLAG &= ~COM_HEAD;					//清零首帧标志
0000a4  49d9              LDR      r1,|L1.1036|
0000a6  7809              LDRB     r1,[r1,#0]  ; rC_fLAG
0000a8  f0210180          BIC      r1,r1,#0x80
0000ac  4ad7              LDR      r2,|L1.1036|
0000ae  7011              STRB     r1,[r2,#0]
0000b0  e01a              B        |L1.232|
                  |L1.178|
;;;105    	}
;;;106    	else
;;;107    	{
;;;108    		RC_CONL_BOX[rC_cNT++] = data;
0000b2  49d7              LDR      r1,|L1.1040|
0000b4  780a              LDRB     r2,[r1,#0]  ; rC_cNT
0000b6  7809              LDRB     r1,[r1,#0]  ; rC_cNT
0000b8  1c49              ADDS     r1,r1,#1
0000ba  4bd5              LDR      r3,|L1.1040|
0000bc  7019              STRB     r1,[r3,#0]
0000be  49d5              LDR      r1,|L1.1044|
0000c0  5488              STRB     r0,[r1,r2]
;;;109    		rC_fLAG &= ~COM_HEAD;					//清零首帧标志
0000c2  49d2              LDR      r1,|L1.1036|
0000c4  7809              LDRB     r1,[r1,#0]  ; rC_fLAG
0000c6  f0210180          BIC      r1,r1,#0x80
0000ca  4ad0              LDR      r2,|L1.1036|
0000cc  7011              STRB     r1,[r2,#0]
;;;110    		if (rC_cNT == RC_CONL_BOX[0] * 4)		//字节接收完毕
0000ce  49d1              LDR      r1,|L1.1044|
0000d0  7809              LDRB     r1,[r1,#0]  ; RC_CONL_BOX
0000d2  461a              MOV      r2,r3
0000d4  7812              LDRB     r2,[r2,#0]  ; rC_cNT
0000d6  ebb20f81          CMP      r2,r1,LSL #2
0000da  d105              BNE      |L1.232|
;;;111    		{
;;;112    			rC_fLAG |= COM_OVER;							//接受完一帧数据
0000dc  49cb              LDR      r1,|L1.1036|
0000de  7809              LDRB     r1,[r1,#0]  ; rC_fLAG
0000e0  f0410140          ORR      r1,r1,#0x40
0000e4  4ac9              LDR      r2,|L1.1036|
0000e6  7011              STRB     r1,[r2,#0]
                  |L1.232|
;;;113    		}
;;;114    	}
;;;115    	
;;;116    	if (rC_cNT == 128)
0000e8  49c9              LDR      r1,|L1.1040|
0000ea  7809              LDRB     r1,[r1,#0]  ; rC_cNT
0000ec  2980              CMP      r1,#0x80
0000ee  d104              BNE      |L1.250|
;;;117    	{
;;;118    		rC_cNT--;
0000f0  49c7              LDR      r1,|L1.1040|
0000f2  7809              LDRB     r1,[r1,#0]  ; rC_cNT
0000f4  1e49              SUBS     r1,r1,#1
0000f6  4ac6              LDR      r2,|L1.1040|
0000f8  7011              STRB     r1,[r2,#0]
                  |L1.250|
;;;119    	}
;;;120    }
0000fa  4770              BX       lr
;;;121    
                          ENDP

                  CPGParameterUpdate PROC
;;;218    
;;;219    void CPGParameterUpdate(void)
0000fc  b5f8              PUSH     {r3-r7,lr}
;;;220    {
;;;221    	union FLOAT2CHAR temp;
;;;222    	unsigned char i = 0, j;
0000fe  2500              MOVS     r5,#0
;;;223    	unsigned char b_len = 2;
000100  2602              MOVS     r6,#2
;;;224    	
;;;225    	if (b_len == 4)
000102  2e04              CMP      r6,#4
000104  d11f              BNE      |L1.326|
;;;226    	{
;;;227    		for (j = 2; j < rec_data[0] - 4; j += 4, i++)
000106  2402              MOVS     r4,#2
000108  e018              B        |L1.316|
                  |L1.266|
;;;228    		{
;;;229    			temp.byte[0] = rec_data[j];
00010a  48c3              LDR      r0,|L1.1048|
00010c  5d00              LDRB     r0,[r0,r4]
00010e  f88d0000          STRB     r0,[sp,#0]
;;;230    			temp.byte[1] = rec_data[j + 1];
000112  49c1              LDR      r1,|L1.1048|
000114  1c60              ADDS     r0,r4,#1
000116  5c08              LDRB     r0,[r1,r0]
000118  f88d0001          STRB     r0,[sp,#1]
;;;231    			temp.byte[2] = rec_data[j + 2];
00011c  1ca0              ADDS     r0,r4,#2
00011e  5c08              LDRB     r0,[r1,r0]
000120  f88d0002          STRB     r0,[sp,#2]
;;;232    			temp.byte[3] = rec_data[j + 3];
000124  1ce0              ADDS     r0,r4,#3
000126  5c08              LDRB     r0,[r1,r0]
000128  f88d0003          STRB     r0,[sp,#3]
;;;233    			cpg_para4[i] = temp.num;
00012c  49bb              LDR      r1,|L1.1052|
00012e  9800              LDR      r0,[sp,#0]
000130  f8410025          STR      r0,[r1,r5,LSL #2]
000134  1d20              ADDS     r0,r4,#4              ;227
000136  b2c4              UXTB     r4,r0                 ;227
000138  1c68              ADDS     r0,r5,#1              ;227
00013a  b2c5              UXTB     r5,r0                 ;227
                  |L1.316|
00013c  48b6              LDR      r0,|L1.1048|
00013e  7800              LDRB     r0,[r0,#0]            ;227  ; rec_data
000140  1f00              SUBS     r0,r0,#4              ;227
000142  42a0              CMP      r0,r4                 ;227
000144  dce1              BGT      |L1.266|
                  |L1.326|
;;;234    		}	
;;;235    	}
;;;236    	if (b_len == 2)
000146  2e02              CMP      r6,#2
000148  d11a              BNE      |L1.384|
;;;237    	{
;;;238    		for (j = 2; j < rec_data[0] - 2; j += 2, i++)
00014a  2402              MOVS     r4,#2
00014c  e013              B        |L1.374|
                  |L1.334|
;;;239    		{
;;;240    			temp.byte[0] = rec_data[j];
00014e  48b2              LDR      r0,|L1.1048|
000150  5d00              LDRB     r0,[r0,r4]
000152  f88d0000          STRB     r0,[sp,#0]
;;;241    			temp.byte[1] = rec_data[j + 1];
000156  49b0              LDR      r1,|L1.1048|
000158  1c60              ADDS     r0,r4,#1
00015a  5c08              LDRB     r0,[r1,r0]
00015c  f88d0001          STRB     r0,[sp,#1]
;;;242    			cpg_para2[i] = temp.num;
000160  9800              LDR      r0,[sp,#0]
000162  f7fffffe          BL       __aeabi_f2iz
000166  b200              SXTH     r0,r0
000168  49ad              LDR      r1,|L1.1056|
00016a  f8210015          STRH     r0,[r1,r5,LSL #1]
00016e  1ca0              ADDS     r0,r4,#2              ;238
000170  b2c4              UXTB     r4,r0                 ;238
000172  1c68              ADDS     r0,r5,#1              ;238
000174  b2c5              UXTB     r5,r0                 ;238
                  |L1.374|
000176  48a8              LDR      r0,|L1.1048|
000178  7800              LDRB     r0,[r0,#0]            ;238  ; rec_data
00017a  1e80              SUBS     r0,r0,#2              ;238
00017c  42a0              CMP      r0,r4                 ;238
00017e  dce6              BGT      |L1.334|
                  |L1.384|
;;;243    		}
;;;244    	}
;;;245    }
000180  bdf8              POP      {r3-r7,pc}
;;;246    /**************************************************************************
                          ENDP

                  SumCheck PROC
;;;190    **************************************************************************/
;;;191    unsigned char SumCheck(void)
000182  b570              PUSH     {r4-r6,lr}
;;;192    {
;;;193    	unsigned char i = 0;
000184  2400              MOVS     r4,#0
;;;194    	unsigned int sum_byte = 0x00;
000186  2500              MOVS     r5,#0
;;;195    	
;;;196    	for (i = 0; i < rec_data[0] - 2; i++)
000188  bf00              NOP      
00018a  e004              B        |L1.406|
                  |L1.396|
;;;197    	{
;;;198    		sum_byte += rec_data[i];
00018c  48a2              LDR      r0,|L1.1048|
00018e  5d00              LDRB     r0,[r0,r4]
000190  4405              ADD      r5,r5,r0
000192  1c60              ADDS     r0,r4,#1              ;196
000194  b2c4              UXTB     r4,r0                 ;196
                  |L1.406|
000196  48a0              LDR      r0,|L1.1048|
000198  7800              LDRB     r0,[r0,#0]            ;196  ; rec_data
00019a  1e80              SUBS     r0,r0,#2              ;196
00019c  42a0              CMP      r0,r4                 ;196
00019e  dcf5              BGT      |L1.396|
;;;199    	}
;;;200    	if ((sum_byte % 256) == rec_data[rec_data[0] - 2])
0001a0  b2e9              UXTB     r1,r5
0001a2  489d              LDR      r0,|L1.1048|
0001a4  7800              LDRB     r0,[r0,#0]  ; rec_data
0001a6  1e80              SUBS     r0,r0,#2
0001a8  4a9b              LDR      r2,|L1.1048|
0001aa  5c10              LDRB     r0,[r2,r0]
0001ac  4281              CMP      r1,r0
0001ae  d104              BNE      |L1.442|
;;;201    	{
;;;202    		USART1_SendByte(sum_byte % 256);
0001b0  b2e8              UXTB     r0,r5
0001b2  f7fffffe          BL       USART1_SendByte
;;;203    		return 1;
0001b6  2001              MOVS     r0,#1
                  |L1.440|
;;;204    	}
;;;205    	else
;;;206    	{
;;;207    		return 0;
;;;208    	}
;;;209    }
0001b8  bd70              POP      {r4-r6,pc}
                  |L1.442|
0001ba  2000              MOVS     r0,#0                 ;207
0001bc  e7fc              B        |L1.440|
;;;210    /**************************************************************************
                          ENDP

                  CommondProcess PROC
;;;254    #define case3 0x03
;;;255    void CommondProcess(void)
0001be  b510              PUSH     {r4,lr}
;;;256    {
;;;257    	unsigned char rec_ID;
;;;258    	if (rec_flag & FRAME_OVER_FLAG)
0001c0  4898              LDR      r0,|L1.1060|
0001c2  7800              LDRB     r0,[r0,#0]  ; rec_flag
0001c4  f0000002          AND      r0,r0,#2
0001c8  b1a0              CBZ      r0,|L1.500|
;;;259    	{
;;;260    		rec_flag &= ~FRAME_OVER_FLAG;
0001ca  4896              LDR      r0,|L1.1060|
0001cc  7800              LDRB     r0,[r0,#0]  ; rec_flag
0001ce  f0200002          BIC      r0,r0,#2
0001d2  4994              LDR      r1,|L1.1060|
0001d4  7008              STRB     r0,[r1,#0]
;;;261    		if (SumCheck())
0001d6  f7fffffe          BL       SumCheck
0001da  b158              CBZ      r0,|L1.500|
;;;262    		{
;;;263    			rec_ID = rec_data[1];
0001dc  488e              LDR      r0,|L1.1048|
0001de  7844              LDRB     r4,[r0,#1]  ; rec_data
;;;264    			switch(rec_ID)
0001e0  2c01              CMP      r4,#1
0001e2  d002              BEQ      |L1.490|
0001e4  2c02              CMP      r4,#2
0001e6  d104              BNE      |L1.498|
0001e8  e002              B        |L1.496|
                  |L1.490|
;;;265    			{
;;;266    				case CPG_PARAMTER:
;;;267    						CPGParameterUpdate();
0001ea  f7fffffe          BL       CPGParameterUpdate
;;;268    				break;
0001ee  e000              B        |L1.498|
                  |L1.496|
;;;269    				case case2:
;;;270    					
;;;271    				break;
0001f0  bf00              NOP      
                  |L1.498|
0001f2  bf00              NOP                            ;268
                  |L1.500|
;;;272    			}
;;;273    		}
;;;274    	}
;;;275    }
0001f4  bd10              POP      {r4,pc}
;;;276    
                          ENDP

                  FrameGet PROC
;;;139    
;;;140    void FrameGet(unsigned char data)
0001f6  b510              PUSH     {r4,lr}
;;;141    {
0001f8  4604              MOV      r4,r0
;;;142    	
;;;143    	unsigned char i;
;;;144    
;;;145    	if (data == FRAME_BYTE_FST)
0001fa  2cca              CMP      r4,#0xca
0001fc  d10f              BNE      |L1.542|
;;;146    	{
;;;147    		rec_flag = rec_flag | FRAME_HEAD_FLAG;
0001fe  4889              LDR      r0,|L1.1060|
000200  7800              LDRB     r0,[r0,#0]  ; rec_flag
000202  f0400001          ORR      r0,r0,#1
000206  4987              LDR      r1,|L1.1060|
000208  7008              STRB     r0,[r1,#0]
;;;148    		rec_data[rec_index] = data;
00020a  4883              LDR      r0,|L1.1048|
00020c  4986              LDR      r1,|L1.1064|
00020e  7809              LDRB     r1,[r1,#0]  ; rec_index
000210  5444              STRB     r4,[r0,r1]
;;;149    		rec_index++;
000212  4885              LDR      r0,|L1.1064|
000214  7800              LDRB     r0,[r0,#0]  ; rec_index
000216  1c40              ADDS     r0,r0,#1
000218  4983              LDR      r1,|L1.1064|
00021a  7008              STRB     r0,[r1,#0]
00021c  e03f              B        |L1.670|
                  |L1.542|
;;;150    	}
;;;151    	else if (data == FRAME_BYTE_SEC)
00021e  2cac              CMP      r4,#0xac
000220  d11e              BNE      |L1.608|
;;;152    	{
;;;153    		if (rec_flag & FRAME_HEAD_FLAG)
000222  4880              LDR      r0,|L1.1060|
000224  7800              LDRB     r0,[r0,#0]  ; rec_flag
000226  f0000001          AND      r0,r0,#1
00022a  b148              CBZ      r0,|L1.576|
;;;154    		{
;;;155    			rec_flag = rec_flag & ~FRAME_OVER_FLAG;
00022c  487d              LDR      r0,|L1.1060|
00022e  7800              LDRB     r0,[r0,#0]  ; rec_flag
000230  f0200002          BIC      r0,r0,#2
000234  497b              LDR      r1,|L1.1060|
000236  7008              STRB     r0,[r1,#0]
;;;156    			rec_index = 0;
000238  2000              MOVS     r0,#0
00023a  497b              LDR      r1,|L1.1064|
00023c  7008              STRB     r0,[r1,#0]
00023e  e02e              B        |L1.670|
                  |L1.576|
;;;157    		}
;;;158    		else
;;;159    		{
;;;160    			rec_data[rec_index] = data;
000240  4875              LDR      r0,|L1.1048|
000242  4979              LDR      r1,|L1.1064|
000244  7809              LDRB     r1,[r1,#0]  ; rec_index
000246  5444              STRB     r4,[r0,r1]
;;;161    			rec_index++;
000248  4877              LDR      r0,|L1.1064|
00024a  7800              LDRB     r0,[r0,#0]  ; rec_index
00024c  1c40              ADDS     r0,r0,#1
00024e  4976              LDR      r1,|L1.1064|
000250  7008              STRB     r0,[r1,#0]
;;;162    			rec_flag = rec_flag & ~FRAME_HEAD_FLAG;
000252  4874              LDR      r0,|L1.1060|
000254  7800              LDRB     r0,[r0,#0]  ; rec_flag
000256  f0200001          BIC      r0,r0,#1
00025a  4972              LDR      r1,|L1.1060|
00025c  7008              STRB     r0,[r1,#0]
00025e  e01e              B        |L1.670|
                  |L1.608|
;;;163    		}
;;;164    	}
;;;165    	else
;;;166    	{
;;;167    		rec_data[rec_index] = data;
000260  486d              LDR      r0,|L1.1048|
000262  4971              LDR      r1,|L1.1064|
000264  7809              LDRB     r1,[r1,#0]  ; rec_index
000266  5444              STRB     r4,[r0,r1]
;;;168    		rec_flag &= ~FRAME_HEAD_FLAG;
000268  486e              LDR      r0,|L1.1060|
00026a  7800              LDRB     r0,[r0,#0]  ; rec_flag
00026c  f0200001          BIC      r0,r0,#1
000270  496c              LDR      r1,|L1.1060|
000272  7008              STRB     r0,[r1,#0]
;;;169    		rec_index++;
000274  486c              LDR      r0,|L1.1064|
000276  7800              LDRB     r0,[r0,#0]  ; rec_index
000278  1c40              ADDS     r0,r0,#1
00027a  496b              LDR      r1,|L1.1064|
00027c  7008              STRB     r0,[r1,#0]
;;;170    		if (rec_index == rec_data[0])
00027e  4866              LDR      r0,|L1.1048|
000280  7800              LDRB     r0,[r0,#0]  ; rec_data
000282  7809              LDRB     r1,[r1,#0]  ; rec_index
000284  4288              CMP      r0,r1
000286  d10a              BNE      |L1.670|
;;;171    		{
;;;172    			rec_flag |= FRAME_OVER_FLAG;
000288  4866              LDR      r0,|L1.1060|
00028a  7800              LDRB     r0,[r0,#0]  ; rec_flag
00028c  f0400002          ORR      r0,r0,#2
000290  4964              LDR      r1,|L1.1060|
000292  7008              STRB     r0,[r1,#0]
;;;173    			PCout(13) = 0;
000294  2000              MOVS     r0,#0
000296  4965              LDR      r1,|L1.1068|
000298  6008              STR      r0,[r1,#0]
;;;174    			CommondProcess();
00029a  f7fffffe          BL       CommondProcess
                  |L1.670|
;;;175    		}
;;;176    	}
;;;177    	
;;;178    	if (rec_index == BUFFER_SIZE)
00029e  4862              LDR      r0,|L1.1064|
0002a0  7800              LDRB     r0,[r0,#0]  ; rec_index
0002a2  2858              CMP      r0,#0x58
0002a4  d104              BNE      |L1.688|
;;;179    	{
;;;180    		rec_index--;
0002a6  4860              LDR      r0,|L1.1064|
0002a8  7800              LDRB     r0,[r0,#0]  ; rec_index
0002aa  1e40              SUBS     r0,r0,#1
0002ac  495e              LDR      r1,|L1.1064|
0002ae  7008              STRB     r0,[r1,#0]
                  |L1.688|
;;;181    	}
;;;182    }
0002b0  bd10              POP      {r4,pc}
;;;183    
                          ENDP

                  CharDataProcess PROC
;;;389    float parameter[6];
;;;390    void CharDataProcess(void)
0002b2  e92d47f0          PUSH     {r4-r10,lr}
;;;391    {
;;;392    	unsigned char index;
;;;393    	unsigned short int _4th, _3th, _2nd, _1st;
;;;394    	unsigned char i;
;;;395    	index = 4;
0002b6  2404              MOVS     r4,#4
;;;396    	_4th = (rec_char_data[index + 0] - '0') * 1000;		//USART1_SendByte(rec_char_data[4]);
0002b8  485d              LDR      r0,|L1.1072|
0002ba  5d00              LDRB     r0,[r0,r4]
0002bc  3830              SUBS     r0,r0,#0x30
0002be  eb000140          ADD      r1,r0,r0,LSL #1
0002c2  ebc110c0          RSB      r0,r1,r0,LSL #7
0002c6  f64f71ff          MOV      r1,#0xffff
0002ca  ea0105c0          AND      r5,r1,r0,LSL #3
;;;397    	_3th = (rec_char_data[index + 1] - '0') *  100;		//USART1_SendByte(rec_char_data[5]);
0002ce  4958              LDR      r1,|L1.1072|
0002d0  1c60              ADDS     r0,r4,#1
0002d2  5c08              LDRB     r0,[r1,r0]
0002d4  3830              SUBS     r0,r0,#0x30
0002d6  eb0001c0          ADD      r1,r0,r0,LSL #3
0002da  eb011000          ADD      r0,r1,r0,LSL #4
0002de  f64f71ff          MOV      r1,#0xffff
0002e2  ea010680          AND      r6,r1,r0,LSL #2
;;;398    	_2nd = (rec_char_data[index + 2] - '0') *   10;		//USART1_SendByte(rec_char_data[6]);
0002e6  4952              LDR      r1,|L1.1072|
0002e8  1ca0              ADDS     r0,r4,#2
0002ea  5c08              LDRB     r0,[r1,r0]
0002ec  3830              SUBS     r0,r0,#0x30
0002ee  eb000080          ADD      r0,r0,r0,LSL #2
0002f2  f64f71ff          MOV      r1,#0xffff
0002f6  ea010740          AND      r7,r1,r0,LSL #1
;;;399    	_1st = (rec_char_data[index + 3] - '0');					//USART1_SendByte(rec_char_data[7]);
0002fa  494d              LDR      r1,|L1.1072|
0002fc  1ce0              ADDS     r0,r4,#3
0002fe  5c08              LDRB     r0,[r1,r0]
000300  3830              SUBS     r0,r0,#0x30
000302  fa1ff880          UXTH     r8,r0
;;;400    	Motor_Speed = (float)((_4th + _3th + _2nd + _1st) - 2000)/1000;		//USART1_SendByte('X');		USART1_SendByte(' ');
000306  19a9              ADDS     r1,r5,r6
000308  4439              ADD      r1,r1,r7
00030a  4441              ADD      r1,r1,r8
00030c  f5a160fa          SUB      r0,r1,#0x7d0
000310  f7fffffe          BL       __aeabi_i2f
000314  4682              MOV      r10,r0
000316  4947              LDR      r1,|L1.1076|
000318  f7fffffe          BL       __aeabi_fdiv
00031c  4946              LDR      r1,|L1.1080|
00031e  6008              STR      r0,[r1,#0]  ; Motor_Speed
;;;401    	
;;;402    	index += 4;	// index = 8
000320  1d24              ADDS     r4,r4,#4
;;;403    	_4th = (rec_char_data[index + 0] - '0') * 1000;		//USART1_SendByte(rec_char_data[8]);
000322  4843              LDR      r0,|L1.1072|
000324  5d00              LDRB     r0,[r0,r4]
000326  3830              SUBS     r0,r0,#0x30
000328  eb000140          ADD      r1,r0,r0,LSL #1
00032c  ebc110c0          RSB      r0,r1,r0,LSL #7
000330  f64f71ff          MOV      r1,#0xffff
000334  ea0105c0          AND      r5,r1,r0,LSL #3
;;;404    	_3th = (rec_char_data[index + 1] - '0') *  100;		//USART1_SendByte(rec_char_data[9]);
000338  493d              LDR      r1,|L1.1072|
00033a  1c60              ADDS     r0,r4,#1
00033c  5c08              LDRB     r0,[r1,r0]
00033e  3830              SUBS     r0,r0,#0x30
000340  eb0001c0          ADD      r1,r0,r0,LSL #3
000344  eb011000          ADD      r0,r1,r0,LSL #4
000348  f64f71ff          MOV      r1,#0xffff
00034c  ea010680          AND      r6,r1,r0,LSL #2
;;;405    	_2nd = (rec_char_data[index + 2] - '0')*   10;		//USART1_SendByte(rec_char_data[10]);
000350  4937              LDR      r1,|L1.1072|
000352  1ca0              ADDS     r0,r4,#2
000354  5c08              LDRB     r0,[r1,r0]
000356  3830              SUBS     r0,r0,#0x30
000358  eb000080          ADD      r0,r0,r0,LSL #2
00035c  f64f71ff          MOV      r1,#0xffff
000360  ea010740          AND      r7,r1,r0,LSL #1
;;;406    	_1st = (rec_char_data[index + 3] - '0');					//USART1_SendByte(rec_char_data[11]);
000364  4932              LDR      r1,|L1.1072|
000366  1ce0              ADDS     r0,r4,#3
000368  5c08              LDRB     r0,[r1,r0]
00036a  3830              SUBS     r0,r0,#0x30
00036c  fa1ff880          UXTH     r8,r0
;;;407    	Motor_Log_degree_12 = (float)(_4th + _3th + _2nd + _1st) - 2000;		//USART1_SendByte('Y');		USART1_SendByte(' ');
000370  19a9              ADDS     r1,r5,r6
000372  4439              ADD      r1,r1,r7
000374  eb010008          ADD      r0,r1,r8
000378  f7fffffe          BL       __aeabi_i2f
00037c  4682              MOV      r10,r0
00037e  492f              LDR      r1,|L1.1084|
000380  f7fffffe          BL       __aeabi_fsub
000384  492e              LDR      r1,|L1.1088|
000386  6008              STR      r0,[r1,#0]  ; Motor_Log_degree_12
;;;408    	
;;;409    	index += 4;		// index = 12
000388  1d24              ADDS     r4,r4,#4
;;;410    	_4th = (rec_char_data[index + 0] - '0') * 1000;		
00038a  4829              LDR      r0,|L1.1072|
00038c  5d00              LDRB     r0,[r0,r4]
00038e  3830              SUBS     r0,r0,#0x30
000390  eb000140          ADD      r1,r0,r0,LSL #1
000394  ebc110c0          RSB      r0,r1,r0,LSL #7
000398  f64f71ff          MOV      r1,#0xffff
00039c  ea0105c0          AND      r5,r1,r0,LSL #3
;;;411    	_3th = (rec_char_data[index + 1] - '0') *  100;		
0003a0  4923              LDR      r1,|L1.1072|
0003a2  1c60              ADDS     r0,r4,#1
0003a4  5c08              LDRB     r0,[r1,r0]
0003a6  3830              SUBS     r0,r0,#0x30
0003a8  eb0001c0          ADD      r1,r0,r0,LSL #3
0003ac  eb011000          ADD      r0,r1,r0,LSL #4
0003b0  f64f71ff          MOV      r1,#0xffff
0003b4  ea010680          AND      r6,r1,r0,LSL #2
;;;412    	_2nd = (rec_char_data[index + 2] - '0')*   10;		
0003b8  491d              LDR      r1,|L1.1072|
0003ba  1ca0              ADDS     r0,r4,#2
0003bc  5c08              LDRB     r0,[r1,r0]
0003be  3830              SUBS     r0,r0,#0x30
0003c0  eb000080          ADD      r0,r0,r0,LSL #2
0003c4  f64f71ff          MOV      r1,#0xffff
0003c8  ea010740          AND      r7,r1,r0,LSL #1
;;;413    	_1st = (rec_char_data[index + 3] - '0');					
0003cc  4918              LDR      r1,|L1.1072|
0003ce  1ce0              ADDS     r0,r4,#3
0003d0  5c08              LDRB     r0,[r1,r0]
0003d2  3830              SUBS     r0,r0,#0x30
0003d4  fa1ff880          UXTH     r8,r0
;;;414    	Motor_Log_degree_13 = (float)(_4th + _3th + _2nd + _1st) - 2000;	
0003d8  19a9              ADDS     r1,r5,r6
0003da  4439              ADD      r1,r1,r7
0003dc  eb010008          ADD      r0,r1,r8
0003e0  f7fffffe          BL       __aeabi_i2f
0003e4  4682              MOV      r10,r0
0003e6  4915              LDR      r1,|L1.1084|
0003e8  f7fffffe          BL       __aeabi_fsub
0003ec  4915              LDR      r1,|L1.1092|
0003ee  6008              STR      r0,[r1,#0]  ; Motor_Log_degree_13
;;;415    	
;;;416    	index += 4;		// index = 16
0003f0  1d24              ADDS     r4,r4,#4
;;;417    	_4th = (rec_char_data[index + 0] - '0') * 1000;		
0003f2  480f              LDR      r0,|L1.1072|
0003f4  5d00              LDRB     r0,[r0,r4]
0003f6  3830              SUBS     r0,r0,#0x30
0003f8  eb000140          ADD      r1,r0,r0,LSL #1
0003fc  ebc110c0          RSB      r0,r1,r0,LSL #7
000400  f64f71ff          MOV      r1,#0xffff
000404  e020              B        |L1.1096|
000406  0000              DCW      0x0000
                  |L1.1032|
                          DCD      float2byte
                  |L1.1036|
                          DCD      rC_fLAG
                  |L1.1040|
                          DCD      rC_cNT
                  |L1.1044|
                          DCD      RC_CONL_BOX
                  |L1.1048|
                          DCD      rec_data
                  |L1.1052|
                          DCD      cpg_para4
                  |L1.1056|
                          DCD      cpg_para2
                  |L1.1060|
                          DCD      rec_flag
                  |L1.1064|
                          DCD      rec_index
                  |L1.1068|
                          DCD      0x422201b4
                  |L1.1072|
                          DCD      rec_char_data
                  |L1.1076|
                          DCD      0x447a0000
                  |L1.1080|
                          DCD      Motor_Speed
                  |L1.1084|
                          DCD      0x44fa0000
                  |L1.1088|
                          DCD      Motor_Log_degree_12
                  |L1.1092|
                          DCD      Motor_Log_degree_13
                  |L1.1096|
000448  ea0105c0          AND      r5,r1,r0,LSL #3
;;;418    	_3th = (rec_char_data[index + 1] - '0') *  100;		
00044c  49f0              LDR      r1,|L1.2064|
00044e  1c60              ADDS     r0,r4,#1
000450  5c08              LDRB     r0,[r1,r0]
000452  3830              SUBS     r0,r0,#0x30
000454  eb0001c0          ADD      r1,r0,r0,LSL #3
000458  eb011000          ADD      r0,r1,r0,LSL #4
00045c  f64f71ff          MOV      r1,#0xffff
000460  ea010680          AND      r6,r1,r0,LSL #2
;;;419    	_2nd = (rec_char_data[index + 2] - '0')*   10;		
000464  49ea              LDR      r1,|L1.2064|
000466  1ca0              ADDS     r0,r4,#2
000468  5c08              LDRB     r0,[r1,r0]
00046a  3830              SUBS     r0,r0,#0x30
00046c  eb000080          ADD      r0,r0,r0,LSL #2
000470  f64f71ff          MOV      r1,#0xffff
000474  ea010740          AND      r7,r1,r0,LSL #1
;;;420    	_1st = (rec_char_data[index + 3] - '0');					
000478  49e5              LDR      r1,|L1.2064|
00047a  1ce0              ADDS     r0,r4,#3
00047c  5c08              LDRB     r0,[r1,r0]
00047e  3830              SUBS     r0,r0,#0x30
000480  fa1ff880          UXTH     r8,r0
;;;421    	Motor_Amplitude_degree[0] = (float)(_4th + _3th + _2nd + _1st) - 2000;	
000484  19a9              ADDS     r1,r5,r6
000486  4439              ADD      r1,r1,r7
000488  eb010008          ADD      r0,r1,r8
00048c  f7fffffe          BL       __aeabi_i2f
000490  4682              MOV      r10,r0
000492  49e0              LDR      r1,|L1.2068|
000494  f7fffffe          BL       __aeabi_fsub
000498  49df              LDR      r1,|L1.2072|
00049a  6008              STR      r0,[r1,#0]  ; Motor_Amplitude_degree
;;;422    	
;;;423    	index += 4;		// index = 20
00049c  1d24              ADDS     r4,r4,#4
;;;424    	_4th = (rec_char_data[index + 0] - '0') * 1000;		
00049e  48dc              LDR      r0,|L1.2064|
0004a0  5d00              LDRB     r0,[r0,r4]
0004a2  3830              SUBS     r0,r0,#0x30
0004a4  eb000140          ADD      r1,r0,r0,LSL #1
0004a8  ebc110c0          RSB      r0,r1,r0,LSL #7
0004ac  f64f71ff          MOV      r1,#0xffff
0004b0  ea0105c0          AND      r5,r1,r0,LSL #3
;;;425    	_3th = (rec_char_data[index + 1] - '0') *  100;		
0004b4  49d6              LDR      r1,|L1.2064|
0004b6  1c60              ADDS     r0,r4,#1
0004b8  5c08              LDRB     r0,[r1,r0]
0004ba  3830              SUBS     r0,r0,#0x30
0004bc  eb0001c0          ADD      r1,r0,r0,LSL #3
0004c0  eb011000          ADD      r0,r1,r0,LSL #4
0004c4  f64f71ff          MOV      r1,#0xffff
0004c8  ea010680          AND      r6,r1,r0,LSL #2
;;;426    	_2nd = (rec_char_data[index + 2] - '0')*   10;		
0004cc  49d0              LDR      r1,|L1.2064|
0004ce  1ca0              ADDS     r0,r4,#2
0004d0  5c08              LDRB     r0,[r1,r0]
0004d2  3830              SUBS     r0,r0,#0x30
0004d4  eb000080          ADD      r0,r0,r0,LSL #2
0004d8  f64f71ff          MOV      r1,#0xffff
0004dc  ea010740          AND      r7,r1,r0,LSL #1
;;;427    	_1st = (rec_char_data[index + 3] - '0');					
0004e0  49cb              LDR      r1,|L1.2064|
0004e2  1ce0              ADDS     r0,r4,#3
0004e4  5c08              LDRB     r0,[r1,r0]
0004e6  3830              SUBS     r0,r0,#0x30
0004e8  fa1ff880          UXTH     r8,r0
;;;428    	Motor_Amplitude_degree[1] = (float)(_4th + _3th + _2nd + _1st) - 2000;	
0004ec  19a9              ADDS     r1,r5,r6
0004ee  4439              ADD      r1,r1,r7
0004f0  eb010008          ADD      r0,r1,r8
0004f4  f7fffffe          BL       __aeabi_i2f
0004f8  4682              MOV      r10,r0
0004fa  49c6              LDR      r1,|L1.2068|
0004fc  f7fffffe          BL       __aeabi_fsub
000500  49c5              LDR      r1,|L1.2072|
000502  6048              STR      r0,[r1,#4]  ; Motor_Amplitude_degree
;;;429    	
;;;430    	index += 4;		// index = 24
000504  1d24              ADDS     r4,r4,#4
;;;431    	_4th = (rec_char_data[index + 0] - '0') * 1000;		
000506  48c2              LDR      r0,|L1.2064|
000508  5d00              LDRB     r0,[r0,r4]
00050a  3830              SUBS     r0,r0,#0x30
00050c  eb000140          ADD      r1,r0,r0,LSL #1
000510  ebc110c0          RSB      r0,r1,r0,LSL #7
000514  f64f71ff          MOV      r1,#0xffff
000518  ea0105c0          AND      r5,r1,r0,LSL #3
;;;432    	_3th = (rec_char_data[index + 1] - '0') *  100;		
00051c  49bc              LDR      r1,|L1.2064|
00051e  1c60              ADDS     r0,r4,#1
000520  5c08              LDRB     r0,[r1,r0]
000522  3830              SUBS     r0,r0,#0x30
000524  eb0001c0          ADD      r1,r0,r0,LSL #3
000528  eb011000          ADD      r0,r1,r0,LSL #4
00052c  f64f71ff          MOV      r1,#0xffff
000530  ea010680          AND      r6,r1,r0,LSL #2
;;;433    	_2nd = (rec_char_data[index + 2] - '0')*   10;		
000534  49b6              LDR      r1,|L1.2064|
000536  1ca0              ADDS     r0,r4,#2
000538  5c08              LDRB     r0,[r1,r0]
00053a  3830              SUBS     r0,r0,#0x30
00053c  eb000080          ADD      r0,r0,r0,LSL #2
000540  f64f71ff          MOV      r1,#0xffff
000544  ea010740          AND      r7,r1,r0,LSL #1
;;;434    	_1st = (rec_char_data[index + 3] - '0');					
000548  49b1              LDR      r1,|L1.2064|
00054a  1ce0              ADDS     r0,r4,#3
00054c  5c08              LDRB     r0,[r1,r0]
00054e  3830              SUBS     r0,r0,#0x30
000550  fa1ff880          UXTH     r8,r0
;;;435    	Motor_Amplitude_degree[2] = (float)(_4th + _3th + _2nd + _1st) - 2000;	
000554  19a9              ADDS     r1,r5,r6
000556  4439              ADD      r1,r1,r7
000558  eb010008          ADD      r0,r1,r8
00055c  f7fffffe          BL       __aeabi_i2f
000560  4682              MOV      r10,r0
000562  49ac              LDR      r1,|L1.2068|
000564  f7fffffe          BL       __aeabi_fsub
000568  49ab              LDR      r1,|L1.2072|
00056a  6088              STR      r0,[r1,#8]  ; Motor_Amplitude_degree
;;;436    
;;;437    
;;;438    	index += 4;		// index = 28
00056c  1d20              ADDS     r0,r4,#4
00056e  b2c4              UXTB     r4,r0
;;;439    	_4th = (rec_char_data[index + 0] - '0') * 1000;		
000570  48a7              LDR      r0,|L1.2064|
000572  5d00              LDRB     r0,[r0,r4]
000574  3830              SUBS     r0,r0,#0x30
000576  eb000140          ADD      r1,r0,r0,LSL #1
00057a  ebc110c0          RSB      r0,r1,r0,LSL #7
00057e  f64f71ff          MOV      r1,#0xffff
000582  ea0105c0          AND      r5,r1,r0,LSL #3
;;;440    	_3th = (rec_char_data[index + 1] - '0') *  100;		
000586  49a2              LDR      r1,|L1.2064|
000588  1c60              ADDS     r0,r4,#1
00058a  5c08              LDRB     r0,[r1,r0]
00058c  3830              SUBS     r0,r0,#0x30
00058e  eb0001c0          ADD      r1,r0,r0,LSL #3
000592  eb011000          ADD      r0,r1,r0,LSL #4
000596  f64f71ff          MOV      r1,#0xffff
00059a  ea010680          AND      r6,r1,r0,LSL #2
;;;441    	_2nd = (rec_char_data[index + 2] - '0')*   10;		
00059e  499c              LDR      r1,|L1.2064|
0005a0  1ca0              ADDS     r0,r4,#2
0005a2  5c08              LDRB     r0,[r1,r0]
0005a4  3830              SUBS     r0,r0,#0x30
0005a6  eb000080          ADD      r0,r0,r0,LSL #2
0005aa  f64f71ff          MOV      r1,#0xffff
0005ae  ea010740          AND      r7,r1,r0,LSL #1
;;;442    	_1st = (rec_char_data[index + 3] - '0');					
0005b2  4997              LDR      r1,|L1.2064|
0005b4  1ce0              ADDS     r0,r4,#3
0005b6  5c08              LDRB     r0,[r1,r0]
0005b8  3830              SUBS     r0,r0,#0x30
0005ba  fa1ff880          UXTH     r8,r0
;;;443    	Motor_Dynamic_Offset_degree[0] = (float)(_4th + _3th + _2nd + _1st) - 2000;	
0005be  19a9              ADDS     r1,r5,r6
0005c0  4439              ADD      r1,r1,r7
0005c2  eb010008          ADD      r0,r1,r8
0005c6  f7fffffe          BL       __aeabi_i2f
0005ca  4682              MOV      r10,r0
0005cc  4991              LDR      r1,|L1.2068|
0005ce  f7fffffe          BL       __aeabi_fsub
0005d2  4992              LDR      r1,|L1.2076|
0005d4  6008              STR      r0,[r1,#0]  ; Motor_Dynamic_Offset_degree
;;;444    	
;;;445    	
;;;446    	index += 4;		// index = 32
0005d6  1d20              ADDS     r0,r4,#4
0005d8  b2c4              UXTB     r4,r0
;;;447    	_4th = (rec_char_data[index + 0] - '0') * 1000;		
0005da  488d              LDR      r0,|L1.2064|
0005dc  5d00              LDRB     r0,[r0,r4]
0005de  3830              SUBS     r0,r0,#0x30
0005e0  eb000140          ADD      r1,r0,r0,LSL #1
0005e4  ebc110c0          RSB      r0,r1,r0,LSL #7
0005e8  f64f71ff          MOV      r1,#0xffff
0005ec  ea0105c0          AND      r5,r1,r0,LSL #3
;;;448    	_3th = (rec_char_data[index + 1] - '0') *  100;		
0005f0  4987              LDR      r1,|L1.2064|
0005f2  1c60              ADDS     r0,r4,#1
0005f4  5c08              LDRB     r0,[r1,r0]
0005f6  3830              SUBS     r0,r0,#0x30
0005f8  eb0001c0          ADD      r1,r0,r0,LSL #3
0005fc  eb011000          ADD      r0,r1,r0,LSL #4
000600  f64f71ff          MOV      r1,#0xffff
000604  ea010680          AND      r6,r1,r0,LSL #2
;;;449    	_2nd = (rec_char_data[index + 2] - '0')*   10;		
000608  4981              LDR      r1,|L1.2064|
00060a  1ca0              ADDS     r0,r4,#2
00060c  5c08              LDRB     r0,[r1,r0]
00060e  3830              SUBS     r0,r0,#0x30
000610  eb000080          ADD      r0,r0,r0,LSL #2
000614  f64f71ff          MOV      r1,#0xffff
000618  ea010740          AND      r7,r1,r0,LSL #1
;;;450    	_1st = (rec_char_data[index + 3] - '0');					
00061c  497c              LDR      r1,|L1.2064|
00061e  1ce0              ADDS     r0,r4,#3
000620  5c08              LDRB     r0,[r1,r0]
000622  3830              SUBS     r0,r0,#0x30
000624  fa1ff880          UXTH     r8,r0
;;;451    	Motor_Dynamic_Offset_degree[1] = (float)(_4th + _3th + _2nd + _1st) - 2000;	
000628  19a9              ADDS     r1,r5,r6
00062a  4439              ADD      r1,r1,r7
00062c  eb010008          ADD      r0,r1,r8
000630  f7fffffe          BL       __aeabi_i2f
000634  4682              MOV      r10,r0
000636  4977              LDR      r1,|L1.2068|
000638  f7fffffe          BL       __aeabi_fsub
00063c  4977              LDR      r1,|L1.2076|
00063e  6048              STR      r0,[r1,#4]  ; Motor_Dynamic_Offset_degree
;;;452    	
;;;453    	index += 4;		// index = 36
000640  1d20              ADDS     r0,r4,#4
000642  b2c4              UXTB     r4,r0
;;;454    	_4th = (rec_char_data[index + 0] - '0') * 1000;		
000644  4872              LDR      r0,|L1.2064|
000646  5d00              LDRB     r0,[r0,r4]
000648  3830              SUBS     r0,r0,#0x30
00064a  eb000140          ADD      r1,r0,r0,LSL #1
00064e  ebc110c0          RSB      r0,r1,r0,LSL #7
000652  f64f71ff          MOV      r1,#0xffff
000656  ea0105c0          AND      r5,r1,r0,LSL #3
;;;455    	_3th = (rec_char_data[index + 1] - '0') *  100;		
00065a  496d              LDR      r1,|L1.2064|
00065c  1c60              ADDS     r0,r4,#1
00065e  5c08              LDRB     r0,[r1,r0]
000660  3830              SUBS     r0,r0,#0x30
000662  eb0001c0          ADD      r1,r0,r0,LSL #3
000666  eb011000          ADD      r0,r1,r0,LSL #4
00066a  f64f71ff          MOV      r1,#0xffff
00066e  ea010680          AND      r6,r1,r0,LSL #2
;;;456    	_2nd = (rec_char_data[index + 2] - '0')*   10;		
000672  4967              LDR      r1,|L1.2064|
000674  1ca0              ADDS     r0,r4,#2
000676  5c08              LDRB     r0,[r1,r0]
000678  3830              SUBS     r0,r0,#0x30
00067a  eb000080          ADD      r0,r0,r0,LSL #2
00067e  f64f71ff          MOV      r1,#0xffff
000682  ea010740          AND      r7,r1,r0,LSL #1
;;;457    	_1st = (rec_char_data[index + 3] - '0');					
000686  4962              LDR      r1,|L1.2064|
000688  1ce0              ADDS     r0,r4,#3
00068a  5c08              LDRB     r0,[r1,r0]
00068c  3830              SUBS     r0,r0,#0x30
00068e  fa1ff880          UXTH     r8,r0
;;;458    	Motor_Dynamic_Offset_degree[2] = (float)(_4th + _3th + _2nd + _1st) - 2000;
000692  19a9              ADDS     r1,r5,r6
000694  4439              ADD      r1,r1,r7
000696  eb010008          ADD      r0,r1,r8
00069a  f7fffffe          BL       __aeabi_i2f
00069e  4682              MOV      r10,r0
0006a0  495c              LDR      r1,|L1.2068|
0006a2  f7fffffe          BL       __aeabi_fsub
0006a6  495d              LDR      r1,|L1.2076|
0006a8  6088              STR      r0,[r1,#8]  ; Motor_Dynamic_Offset_degree
;;;459    	
;;;460    	for (i = 0; i < rec_char_index; i ++)
0006aa  f04f0900          MOV      r9,#0
0006ae  e007              B        |L1.1728|
                  |L1.1712|
;;;461    	{
;;;462    		rec_char_data[i] = 0x00;
0006b0  2000              MOVS     r0,#0
0006b2  4957              LDR      r1,|L1.2064|
0006b4  f8010009          STRB     r0,[r1,r9]
0006b8  f1090001          ADD      r0,r9,#1              ;460
0006bc  f00009ff          AND      r9,r0,#0xff           ;460
                  |L1.1728|
0006c0  4857              LDR      r0,|L1.2080|
0006c2  7800              LDRB     r0,[r0,#0]            ;460  ; rec_char_index
0006c4  4581              CMP      r9,r0                 ;460
0006c6  dbf3              BLT      |L1.1712|
;;;463    	}
;;;464    }
0006c8  e8bd87f0          POP      {r4-r10,pc}
;;;465    /***************************************************串口解析程序（结束）************************************************************/
                          ENDP

                  FrameCharGet PROC
;;;296    
;;;297    void FrameCharGet(unsigned char data)
0006cc  b570              PUSH     {r4-r6,lr}
;;;298    {
0006ce  4604              MOV      r4,r0
;;;299    	unsigned char i;
;;;300    	unsigned char ch;
;;;301    //	USART1_SendByte(data);
;;;302    	
;;;303    	if (data == 'c')																	// 帧首判断'c',说明可能一帧开始传输
0006d0  2c63              CMP      r4,#0x63
0006d2  d10f              BNE      |L1.1780|
;;;304    	{
;;;305    		rec_char_flag |= FRAME_HEAD_FLAG;								// 帧首标志位置位
0006d4  4853              LDR      r0,|L1.2084|
0006d6  7800              LDRB     r0,[r0,#0]  ; rec_char_flag
0006d8  f0400001          ORR      r0,r0,#1
0006dc  4951              LDR      r1,|L1.2084|
0006de  7008              STRB     r0,[r1,#0]
;;;306    		rec_char_data[rec_char_index] = data;						// 保存当前接受的字符
0006e0  484b              LDR      r0,|L1.2064|
0006e2  494f              LDR      r1,|L1.2080|
0006e4  7809              LDRB     r1,[r1,#0]  ; rec_char_index
0006e6  5444              STRB     r4,[r0,r1]
;;;307    		rec_char_index++;																// 数组索引后移一位
0006e8  484d              LDR      r0,|L1.2080|
0006ea  7800              LDRB     r0,[r0,#0]  ; rec_char_index
0006ec  1c40              ADDS     r0,r0,#1
0006ee  494c              LDR      r1,|L1.2080|
0006f0  7008              STRB     r0,[r1,#0]
0006f2  e074              B        |L1.2014|
                  |L1.1780|
;;;308    	}
;;;309    	else if (data == 'a')															// 当前接收字符为'a'
0006f4  2c61              CMP      r4,#0x61
0006f6  d126              BNE      |L1.1862|
;;;310    	{
;;;311    		if (rec_char_flag & FRAME_HEAD_FLAG)						// 且上一字符为'a'
0006f8  484a              LDR      r0,|L1.2084|
0006fa  7800              LDRB     r0,[r0,#0]  ; rec_char_flag
0006fc  f0000001          AND      r0,r0,#1
000700  b188              CBZ      r0,|L1.1830|
;;;312    		{
;;;313    			PCout(13) = 0;
000702  2000              MOVS     r0,#0
000704  4948              LDR      r1,|L1.2088|
000706  6008              STR      r0,[r1,#0]
;;;314    			rec_char_flag &= ~FRAME_OVER_FLAG;						// 数据帧结束标志位清零
000708  4846              LDR      r0,|L1.2084|
00070a  7800              LDRB     r0,[r0,#0]  ; rec_char_flag
00070c  f0200002          BIC      r0,r0,#2
000710  4944              LDR      r1,|L1.2084|
000712  7008              STRB     r0,[r1,#0]
;;;315    			rec_char_flag |= FRAME_LENGTH_FLAG;						// 数据帧长度标志位置位
000714  4608              MOV      r0,r1
000716  7800              LDRB     r0,[r0,#0]  ; rec_char_flag
000718  f0400003          ORR      r0,r0,#3
00071c  7008              STRB     r0,[r1,#0]
;;;316    //			rec_char_flag |= FRAME_NEW_FLAG;							// 数据帧更新标志位置位
;;;317    			rec_char_index = 0;														// 数组索引清零，从新开始接收有用数据
00071e  2000              MOVS     r0,#0
000720  493f              LDR      r1,|L1.2080|
000722  7008              STRB     r0,[r1,#0]
000724  e05b              B        |L1.2014|
                  |L1.1830|
;;;318    		}
;;;319    		else
;;;320    		{
;;;321    			rec_char_data[rec_char_index] = data;					// 说明当前字符为数据不是帧首
000726  483a              LDR      r0,|L1.2064|
000728  493d              LDR      r1,|L1.2080|
00072a  7809              LDRB     r1,[r1,#0]  ; rec_char_index
00072c  5444              STRB     r4,[r0,r1]
;;;322    			rec_char_index++;
00072e  483c              LDR      r0,|L1.2080|
000730  7800              LDRB     r0,[r0,#0]  ; rec_char_index
000732  1c40              ADDS     r0,r0,#1
000734  493a              LDR      r1,|L1.2080|
000736  7008              STRB     r0,[r1,#0]
;;;323    			rec_char_flag &= ~FRAME_HEAD_FLAG;						// 数据帧帧头标志位清零
000738  483a              LDR      r0,|L1.2084|
00073a  7800              LDRB     r0,[r0,#0]  ; rec_char_flag
00073c  f0200001          BIC      r0,r0,#1
000740  4938              LDR      r1,|L1.2084|
000742  7008              STRB     r0,[r1,#0]
000744  e04b              B        |L1.2014|
                  |L1.1862|
;;;324    		}
;;;325    	}
;;;326    	else
;;;327    	{
;;;328    		rec_char_data[rec_char_index] = data;						// 非帧头数据直接保存
000746  4832              LDR      r0,|L1.2064|
000748  4935              LDR      r1,|L1.2080|
00074a  7809              LDRB     r1,[r1,#0]  ; rec_char_index
00074c  5444              STRB     r4,[r0,r1]
;;;329    		rec_char_flag &= ~FRAME_HEAD_FLAG;							// 帧头标志位清零
00074e  4835              LDR      r0,|L1.2084|
000750  7800              LDRB     r0,[r0,#0]  ; rec_char_flag
000752  f0200001          BIC      r0,r0,#1
000756  4933              LDR      r1,|L1.2084|
000758  7008              STRB     r0,[r1,#0]
;;;330    		rec_char_index++;
00075a  4831              LDR      r0,|L1.2080|
00075c  7800              LDRB     r0,[r0,#0]  ; rec_char_index
00075e  1c40              ADDS     r0,r0,#1
000760  492f              LDR      r1,|L1.2080|
000762  7008              STRB     r0,[r1,#0]
;;;331    		/*数组索引为2(0，1为数据帧长度位)，并且长度标志位已经置位*/
;;;332    		if (rec_char_index == 2 && (rec_char_flag & FRAME_LENGTH_FLAG))
000764  4608              MOV      r0,r1
000766  7800              LDRB     r0,[r0,#0]  ; rec_char_index
000768  2802              CMP      r0,#2
00076a  d116              BNE      |L1.1946|
00076c  482d              LDR      r0,|L1.2084|
00076e  7800              LDRB     r0,[r0,#0]  ; rec_char_flag
000770  f0000003          AND      r0,r0,#3
000774  b188              CBZ      r0,|L1.1946|
;;;333    		{
;;;334    			/*计算当前帧数据长度*/
;;;335    			rec_length = (rec_char_data[0] - '0')*10 + (rec_char_data[1] - '0');
000776  4826              LDR      r0,|L1.2064|
000778  7840              LDRB     r0,[r0,#1]  ; rec_char_data
00077a  3830              SUBS     r0,r0,#0x30
00077c  4924              LDR      r1,|L1.2064|
00077e  7809              LDRB     r1,[r1,#0]  ; rec_char_data
000780  3930              SUBS     r1,r1,#0x30
000782  eb010181          ADD      r1,r1,r1,LSL #2
000786  eb000041          ADD      r0,r0,r1,LSL #1
00078a  4928              LDR      r1,|L1.2092|
00078c  7008              STRB     r0,[r1,#0]
;;;336    			rec_char_flag &= ~FRAME_LENGTH_FLAG;
00078e  4825              LDR      r0,|L1.2084|
000790  7800              LDRB     r0,[r0,#0]  ; rec_char_flag
000792  f0200003          BIC      r0,r0,#3
000796  4923              LDR      r1,|L1.2084|
000798  7008              STRB     r0,[r1,#0]
                  |L1.1946|
;;;337    		}
;;;338    
;;;339    		if (rec_char_index == rec_length)
00079a  4821              LDR      r0,|L1.2080|
00079c  7800              LDRB     r0,[r0,#0]  ; rec_char_index
00079e  4923              LDR      r1,|L1.2092|
0007a0  7809              LDRB     r1,[r1,#0]  ; rec_length
0007a2  4288              CMP      r0,r1
0007a4  d11b              BNE      |L1.2014|
;;;340    		{
;;;341    			if (rec_char_data[rec_char_index - 1] == 'b')
0007a6  481e              LDR      r0,|L1.2080|
0007a8  7800              LDRB     r0,[r0,#0]  ; rec_char_index
0007aa  1e40              SUBS     r0,r0,#1
0007ac  4918              LDR      r1,|L1.2064|
0007ae  5c08              LDRB     r0,[r1,r0]
0007b0  2862              CMP      r0,#0x62
0007b2  d114              BNE      |L1.2014|
;;;342    			{
;;;343    				
;;;344    				rec_char_flag |= FRAME_OVER_FLAG;
0007b4  481b              LDR      r0,|L1.2084|
0007b6  7800              LDRB     r0,[r0,#0]  ; rec_char_flag
0007b8  f0400002          ORR      r0,r0,#2
0007bc  4919              LDR      r1,|L1.2084|
0007be  7008              STRB     r0,[r1,#0]
;;;345    				/**********************************/
;;;346    				ch = rec_char_data[3];
0007c0  4813              LDR      r0,|L1.2064|
0007c2  78c5              LDRB     r5,[r0,#3]  ; rec_char_data
;;;347    				switch(ch)
0007c4  2d64              CMP      r5,#0x64
0007c6  d002              BEQ      |L1.1998|
0007c8  2d65              CMP      r5,#0x65
0007ca  d103              BNE      |L1.2004|
;;;348    				{
;;;349    					case 'e':
;;;350    						//CPGParaSetDefault();
;;;351    						break;
0007cc  e003              B        |L1.2006|
                  |L1.1998|
;;;352    					case 'd':
;;;353    						CharDataProcess();
0007ce  f7fffffe          BL       CharDataProcess
;;;354    						break;
0007d2  e000              B        |L1.2006|
                  |L1.2004|
;;;355    					default:
;;;356    						//CPGParaSetDefault();
;;;357    						break;
0007d4  bf00              NOP      
                  |L1.2006|
0007d6  bf00              NOP                            ;351
;;;358    				}
;;;359    			
;;;360    				PCout(13) = 1;
0007d8  2001              MOVS     r0,#1
0007da  4913              LDR      r1,|L1.2088|
0007dc  6008              STR      r0,[r1,#0]
                  |L1.2014|
;;;361    				/**********************************/
;;;362    			}
;;;363    		}
;;;364    //		if ((rec_char_index == rec_length) && (rec_char_flag & FRAME_NEW_FLAG) && (rec_char_data[15] == 'c'))
;;;365    //		{
;;;366    ////			if(rec_length == rec_char_index)PCout(13) = 0;
;;;367    //			USART1_SendByte(rec_char_data[5]);
;;;368    //			rec_char_flag &= ~FRAME_NEW_FLAG;
;;;369    //			rec_char_flag |= FRAME_OVER_FLAG;
;;;370    //			/**********************************/
;;;371    //			CharDataProcess();
;;;372    //			/**********************************/
;;;373    //		}
;;;374    	}
;;;375    	if (rec_char_index == BUFFER_SIZE)
0007de  4810              LDR      r0,|L1.2080|
0007e0  7800              LDRB     r0,[r0,#0]  ; rec_char_index
0007e2  2858              CMP      r0,#0x58
0007e4  d104              BNE      |L1.2032|
;;;376    	{
;;;377    		rec_char_index--;
0007e6  480e              LDR      r0,|L1.2080|
0007e8  7800              LDRB     r0,[r0,#0]  ; rec_char_index
0007ea  1e40              SUBS     r0,r0,#1
0007ec  490c              LDR      r1,|L1.2080|
0007ee  7008              STRB     r0,[r1,#0]
                  |L1.2032|
;;;378    	}
;;;379    	
;;;380    }
0007f0  bd70              POP      {r4-r6,pc}
;;;381    
                          ENDP

                  IOIIC_IMU_GPS_GET PROC
;;;469    
;;;470    void IOIIC_IMU_GPS_GET(struct IMU_Parameter para)
0007f2  b40f              PUSH     {r0-r3}
;;;471    {
0007f4  b510              PUSH     {r4,lr}
;;;472        /* 参数作用依次为:传感器编号，读取参数编号(起始地址)，读取长度，存放起始地址 */
;;;473        IICreadBytes(para.devID, para.index, para.num, para.imuArray);
0007f6  f89d200a          LDRB     r2,[sp,#0xa]
0007fa  f89d1009          LDRB     r1,[sp,#9]
0007fe  f89d0008          LDRB     r0,[sp,#8]
000802  f10d030b          ADD      r3,sp,#0xb
000806  f7fffffe          BL       IICreadBytes
;;;474    }
00080a  bc10              POP      {r4}
00080c  f85dfb14          LDR      pc,[sp],#0x14
;;;475    
                          ENDP

                  |L1.2064|
                          DCD      rec_char_data
                  |L1.2068|
                          DCD      0x44fa0000
                  |L1.2072|
                          DCD      Motor_Amplitude_degree
                  |L1.2076|
                          DCD      Motor_Dynamic_Offset_degree
                  |L1.2080|
                          DCD      rec_char_index
                  |L1.2084|
                          DCD      rec_char_flag
                  |L1.2088|
                          DCD      0x422201b4
                  |L1.2092|
                          DCD      rec_length

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  SensorBox
                          %        84
                  RC_CONL_BOX
                          %        128
                  rec_data
                          %        88
                  cpg_para4
                          %        48
                  cpg_para2
                          %        24
                  rec_char_data
                          %        88
                  parameter
                          %        24

                          AREA ||.data||, DATA, ALIGN=2

                  ||f2c||
                          DCD      0x00000000
                  float2byte
                          DCD      0x00000000
                  rC_fLAG
000008  00                DCB      0x00
                  rec_index
000009  00                DCB      0x00
                  rec_flag
00000a  00                DCB      0x00
                  rec_char_index
00000b  00                DCB      0x00
                  rec_char_flag
00000c  00                DCB      0x00
                  rec_length
00000d  000000            DCB      0x00,0x00,0x00
                  y_axis
                          DCD      0x00000000
                  x_axis
                          DCD      0x00000000
                  z_axis
                          DCD      0x00000000
                  rC_cNT
00001c  00                DCB      0x00
