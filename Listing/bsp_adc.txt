; generated by Component: ARM Compiler 5.06 update 2 (build 183) Tool: ArmCC [4d35cd]
; commandline ArmCC [--list --debug -c --asm --interleave -o..\..\output\bsp_adc.o --asm_dir=..\..\Listing\ --list_dir=..\..\Listing\ --depend=..\..\output\bsp_adc.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\..\Libraries\CMSIS -I..\..\User -I..\..\Libraries\FWlib\inc -I..\..\User\Alogrisem\inc -I..\..\User\BSP_Init\inc -I..\..\User\exDev\inc -IH:\CETC\Project\第二代机器鱼程序\AV1.3\Project\RVMDK（uv4）\RTE -ID:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\1.0.5\Device\Include -ID:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=520 -DSTM32F10X_HD -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -W --omf_browse=..\..\output\bsp_adc.crf ..\..\User\BSP_Init\src\bsp_adc.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  ADC1_GPIO_Config PROC
;;;19       */
;;;20     static void ADC1_GPIO_Config(void)
000000  b508              PUSH     {r3,lr}
;;;21     {
;;;22     	GPIO_InitTypeDef GPIO_InitStructure;
;;;23     	
;;;24     	/* Enable DMA clock */
;;;25     	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1, ENABLE);
000002  2101              MOVS     r1,#1
000004  4608              MOV      r0,r1
000006  f7fffffe          BL       RCC_AHBPeriphClockCmd
;;;26     	
;;;27     	/* Enable ADC1 and GPIOC clock */
;;;28     	RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1 | RCC_APB2Periph_GPIOC, ENABLE);
00000a  2101              MOVS     r1,#1
00000c  f44f7004          MOV      r0,#0x210
000010  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;29     	
;;;30     	/* Configure port  as analog input */
;;;31     	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1 | GPIO_Pin_0 | GPIO_Pin_2 | GPIO_Pin_3 
000014  203f              MOVS     r0,#0x3f
000016  f8ad0000          STRH     r0,[sp,#0]
;;;32     	| GPIO_Pin_4 | GPIO_Pin_5;
;;;33     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;
00001a  2000              MOVS     r0,#0
00001c  f88d0003          STRB     r0,[sp,#3]
;;;34     	GPIO_Init(GPIOC, &GPIO_InitStructure);				// PC1,输入时不用设置速率
000020  4669              MOV      r1,sp
000022  4856              LDR      r0,|L1.380|
000024  f7fffffe          BL       GPIO_Init
;;;35     	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4 | GPIO_Pin_5;
000028  2030              MOVS     r0,#0x30
00002a  f8ad0000          STRH     r0,[sp,#0]
;;;36     	GPIO_Init(GPIOA, &GPIO_InitStructure);
00002e  4669              MOV      r1,sp
000030  4853              LDR      r0,|L1.384|
000032  f7fffffe          BL       GPIO_Init
;;;37     }
000036  bd08              POP      {r3,pc}
;;;38     
                          ENDP

                  ADC1_Mode_Config PROC
;;;43       */
;;;44     static void ADC1_Mode_Config(void)
000038  b500              PUSH     {lr}
;;;45     {
00003a  b091              SUB      sp,sp,#0x44
;;;46     	DMA_InitTypeDef DMA_InitStructure;
;;;47     	ADC_InitTypeDef ADC_InitStructure;
;;;48     	
;;;49     	/* DMA channel1 configuration */
;;;50     	DMA_DeInit(DMA1_Channel1);
00003c  4851              LDR      r0,|L1.388|
00003e  f7fffffe          BL       DMA_DeInit
;;;51     	
;;;52     	DMA_InitStructure.DMA_PeripheralBaseAddr = ADC1_DR_Address;	 			//ADC地址
000042  4851              LDR      r0,|L1.392|
000044  9006              STR      r0,[sp,#0x18]
;;;53     	DMA_InitStructure.DMA_MemoryBaseAddr = (u32)&fliterValue;	        //内存地址
000046  4851              LDR      r0,|L1.396|
000048  9007              STR      r0,[sp,#0x1c]
;;;54     	DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;								//set the periphera add as the source add
00004a  2000              MOVS     r0,#0
00004c  9008              STR      r0,[sp,#0x20]
;;;55     	DMA_InitStructure.DMA_BufferSize = N_channel;					//定义DMA缓冲区大小
00004e  2008              MOVS     r0,#8
000050  9009              STR      r0,[sp,#0x24]
;;;56     	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;	//外设地址固定
000052  2000              MOVS     r0,#0
000054  900a              STR      r0,[sp,#0x28]
;;;57     	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;  					//内存地址固定
000056  2080              MOVS     r0,#0x80
000058  900b              STR      r0,[sp,#0x2c]
;;;58     	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;	//定义外设数据宽度为16位
00005a  0040              LSLS     r0,r0,#1
00005c  900c              STR      r0,[sp,#0x30]
;;;59     	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;					//定义内存宽度为16位
00005e  0080              LSLS     r0,r0,#2
000060  900d              STR      r0,[sp,#0x34]
;;;60     	DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;															//循环传输（环形缓冲）
000062  2020              MOVS     r0,#0x20
000064  900e              STR      r0,[sp,#0x38]
;;;61     	DMA_InitStructure.DMA_Priority = DMA_Priority_High;													//DMA优先级高
000066  0200              LSLS     r0,r0,#8
000068  900f              STR      r0,[sp,#0x3c]
;;;62     	DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;																//禁止DMA通道存储器到存储器传输
00006a  2000              MOVS     r0,#0
00006c  9010              STR      r0,[sp,#0x40]
;;;63     	DMA_Init(DMA1_Channel1, &DMA_InitStructure);																//
00006e  a906              ADD      r1,sp,#0x18
000070  4844              LDR      r0,|L1.388|
000072  f7fffffe          BL       DMA_Init
;;;64     	
;;;65     	/* ADC1 configuration */
;;;66     
;;;67     	ADC_InitStructure.ADC_Mode = ADC_Mode_Independent;			//独立ADC模式
000076  2000              MOVS     r0,#0
000078  9001              STR      r0,[sp,#4]
;;;68     	ADC_InitStructure.ADC_ScanConvMode = ENABLE ; 	 				//禁止扫描模式，扫描模式用于多通道采集
00007a  2001              MOVS     r0,#1
00007c  f88d0008          STRB     r0,[sp,#8]
;;;69     	ADC_InitStructure.ADC_ContinuousConvMode = ENABLE;			//开启连续转换模式，即不停地进行ADC转换
000080  f88d0009          STRB     r0,[sp,#9]
;;;70     	ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_None;	//不使用外部触发转换
000084  f44f2060          MOV      r0,#0xe0000
000088  9003              STR      r0,[sp,#0xc]
;;;71     	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right; 	//采集数据右对齐
00008a  2000              MOVS     r0,#0
00008c  9004              STR      r0,[sp,#0x10]
;;;72     	ADC_InitStructure.ADC_NbrOfChannel = 8;	 								//要转换的通道数目8
00008e  2008              MOVS     r0,#8
000090  f88d0014          STRB     r0,[sp,#0x14]
;;;73     	ADC_Init(ADC1, &ADC_InitStructure);
000094  a901              ADD      r1,sp,#4
000096  483c              LDR      r0,|L1.392|
000098  384c              SUBS     r0,r0,#0x4c
00009a  f7fffffe          BL       ADC_Init
;;;74     	
;;;75     	/*配置ADC时钟，为PCLK2的8分频，即9MHz*/
;;;76     	RCC_ADCCLKConfig(RCC_PCLK2_Div8); 
00009e  f44f4040          MOV      r0,#0xc000
0000a2  f7fffffe          BL       RCC_ADCCLKConfig
;;;77     	/*配置ADC1的通道11为55.	5个采样周期，序列为1 */ 
;;;78     	ADC_RegularChannelConfig(ADC1, ADC_Channel_10, 1, ADC_SampleTime_55Cycles5);// IR1
0000a6  2305              MOVS     r3,#5
0000a8  2201              MOVS     r2,#1
0000aa  210a              MOVS     r1,#0xa
0000ac  4836              LDR      r0,|L1.392|
0000ae  384c              SUBS     r0,r0,#0x4c
0000b0  f7fffffe          BL       ADC_RegularChannelConfig
;;;79     	ADC_RegularChannelConfig(ADC1, ADC_Channel_11, 2, ADC_SampleTime_55Cycles5);// IR2
0000b4  2305              MOVS     r3,#5
0000b6  2202              MOVS     r2,#2
0000b8  210b              MOVS     r1,#0xb
0000ba  4833              LDR      r0,|L1.392|
0000bc  384c              SUBS     r0,r0,#0x4c
0000be  f7fffffe          BL       ADC_RegularChannelConfig
;;;80     	ADC_RegularChannelConfig(ADC1, ADC_Channel_14, 3, ADC_SampleTime_55Cycles5);// T1
0000c2  2305              MOVS     r3,#5
0000c4  2203              MOVS     r2,#3
0000c6  210e              MOVS     r1,#0xe
0000c8  482f              LDR      r0,|L1.392|
0000ca  384c              SUBS     r0,r0,#0x4c
0000cc  f7fffffe          BL       ADC_RegularChannelConfig
;;;81     	ADC_RegularChannelConfig(ADC1, ADC_Channel_15, 4, ADC_SampleTime_55Cycles5);// T2
0000d0  2305              MOVS     r3,#5
0000d2  2204              MOVS     r2,#4
0000d4  210f              MOVS     r1,#0xf
0000d6  482c              LDR      r0,|L1.392|
0000d8  384c              SUBS     r0,r0,#0x4c
0000da  f7fffffe          BL       ADC_RegularChannelConfig
;;;82     	ADC_RegularChannelConfig(ADC1, ADC_Channel_4 , 5, ADC_SampleTime_55Cycles5);// T3
0000de  2305              MOVS     r3,#5
0000e0  461a              MOV      r2,r3
0000e2  2104              MOVS     r1,#4
0000e4  4828              LDR      r0,|L1.392|
0000e6  384c              SUBS     r0,r0,#0x4c
0000e8  f7fffffe          BL       ADC_RegularChannelConfig
;;;83     	ADC_RegularChannelConfig(ADC1, ADC_Channel_5 , 6, ADC_SampleTime_55Cycles5);// T4
0000ec  2305              MOVS     r3,#5
0000ee  2206              MOVS     r2,#6
0000f0  4619              MOV      r1,r3
0000f2  4825              LDR      r0,|L1.392|
0000f4  384c              SUBS     r0,r0,#0x4c
0000f6  f7fffffe          BL       ADC_RegularChannelConfig
;;;84     	ADC_RegularChannelConfig(ADC1, ADC_Channel_12, 7, ADC_SampleTime_55Cycles5);// PVG
0000fa  2305              MOVS     r3,#5
0000fc  2207              MOVS     r2,#7
0000fe  210c              MOVS     r1,#0xc
000100  4821              LDR      r0,|L1.392|
000102  384c              SUBS     r0,r0,#0x4c
000104  f7fffffe          BL       ADC_RegularChannelConfig
;;;85     	ADC_RegularChannelConfig(ADC1, ADC_Channel_13, 8, ADC_SampleTime_55Cycles5);// PIG
000108  2305              MOVS     r3,#5
00010a  2208              MOVS     r2,#8
00010c  210d              MOVS     r1,#0xd
00010e  481e              LDR      r0,|L1.392|
000110  384c              SUBS     r0,r0,#0x4c
000112  f7fffffe          BL       ADC_RegularChannelConfig
;;;86     	/* Enable ADC1 DMA */
;;;87     	ADC_DMACmd(ADC1, ENABLE);
000116  2101              MOVS     r1,#1
000118  481b              LDR      r0,|L1.392|
00011a  384c              SUBS     r0,r0,#0x4c
00011c  f7fffffe          BL       ADC_DMACmd
;;;88     	
;;;89     	/* Enable ADC1 */
;;;90     	ADC_Cmd(ADC1, ENABLE);
000120  2101              MOVS     r1,#1
000122  4819              LDR      r0,|L1.392|
000124  384c              SUBS     r0,r0,#0x4c
000126  f7fffffe          BL       ADC_Cmd
;;;91     	
;;;92     	/*复位校准寄存器 */   
;;;93     	ADC_ResetCalibration(ADC1);
00012a  4817              LDR      r0,|L1.392|
00012c  384c              SUBS     r0,r0,#0x4c
00012e  f7fffffe          BL       ADC_ResetCalibration
;;;94     	/*等待校准寄存器复位完成 */
;;;95     	while(ADC_GetResetCalibrationStatus(ADC1));
000132  bf00              NOP      
                  |L1.308|
000134  4814              LDR      r0,|L1.392|
000136  384c              SUBS     r0,r0,#0x4c
000138  f7fffffe          BL       ADC_GetResetCalibrationStatus
00013c  2800              CMP      r0,#0
00013e  d1f9              BNE      |L1.308|
;;;96     	
;;;97     	/* ADC校准 */
;;;98     	ADC_StartCalibration(ADC1);
000140  4811              LDR      r0,|L1.392|
000142  384c              SUBS     r0,r0,#0x4c
000144  f7fffffe          BL       ADC_StartCalibration
;;;99     	/* 等待校准完成*/
;;;100    	while(ADC_GetCalibrationStatus(ADC1));
000148  bf00              NOP      
                  |L1.330|
00014a  480f              LDR      r0,|L1.392|
00014c  384c              SUBS     r0,r0,#0x4c
00014e  f7fffffe          BL       ADC_GetCalibrationStatus
000152  2800              CMP      r0,#0
000154  d1f9              BNE      |L1.330|
;;;101    	
;;;102    	/* Enable DMA channel1 */
;;;103    	DMA_Cmd(DMA1_Channel1, ENABLE);	
000156  2101              MOVS     r1,#1
000158  480a              LDR      r0,|L1.388|
00015a  f7fffffe          BL       DMA_Cmd
;;;104    	/* 多通道ADA采样时需要将dma使能放到adc自校准之后，原因是adc自校准
;;;105    	   会触发dma通道，没有数据输出但是会导致dma通道地址自加，最后会导
;;;106    		 致数据错位 */
;;;107    	
;;;108    	/* 由于没有采用外部触发，所以使用软件触发ADC转换 */ 
;;;109    	ADC_SoftwareStartConvCmd(ADC1, ENABLE);
00015e  2101              MOVS     r1,#1
000160  4809              LDR      r0,|L1.392|
000162  384c              SUBS     r0,r0,#0x4c
000164  f7fffffe          BL       ADC_SoftwareStartConvCmd
;;;110    }
000168  b011              ADD      sp,sp,#0x44
00016a  bd00              POP      {pc}
;;;111    
                          ENDP

                  ADC1_Init PROC
;;;116      */
;;;117    void ADC1_Init(void)
00016c  b510              PUSH     {r4,lr}
;;;118    {
;;;119    	ADC1_GPIO_Config();
00016e  f7fffffe          BL       ADC1_GPIO_Config
;;;120    	ADC1_Mode_Config();
000172  f7fffffe          BL       ADC1_Mode_Config
;;;121    }
000176  bd10              POP      {r4,pc}
;;;122    /*********************************************END OF FILE**********************/
                          ENDP

                  ADC_Fliter PROC
;;;123    void ADC_Fliter(void)
000178  4770              BX       lr
;;;124    {
;;;125    
;;;126    }
;;;127    
                          ENDP

00017a  0000              DCW      0x0000
                  |L1.380|
                          DCD      0x40011000
                  |L1.384|
                          DCD      0x40010800
                  |L1.388|
                          DCD      0x40020008
                  |L1.392|
                          DCD      0x4001244c
                  |L1.396|
                          DCD      fliterValue

                          AREA ||.bss||, DATA, NOINIT, ALIGN=1

                  sampleValue
                          %        80
                  fliterValue
                          %        16

                          AREA ||.data||, DATA, ALIGN=1

                  ADC_ConvertedValue
000000  0000              DCB      0x00,0x00
