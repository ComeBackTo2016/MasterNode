; generated by Component: ARM Compiler 5.06 update 2 (build 183) Tool: ArmCC [4d35cd]
; commandline ArmCC [--list --debug -c --asm --interleave -o..\..\output\bsp_spi_flash.o --asm_dir=..\..\Listing\ --list_dir=..\..\Listing\ --depend=..\..\output\bsp_spi_flash.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\..\Libraries\CMSIS -I..\..\User -I..\..\Libraries\FWlib\inc -I..\..\User\Alogrisem\inc -I..\..\User\BSP_Init\inc -I..\..\User\exDev\inc -IH:\CETC\Project\第二代机器鱼程序\AV1.3\Project\RVMDK（uv4）\RTE -ID:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\1.0.5\Device\Include -ID:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=520 -DSTM32F10X_HD -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -W --omf_browse=..\..\output\bsp_spi_flash.crf ..\..\User\exDev\src\bsp_spi_flash.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  SPI_FLASH_Init PROC
;;;53     *******************************************************************************/
;;;54     void SPI_FLASH_Init(void)
000000  b500              PUSH     {lr}
;;;55     {
000002  b087              SUB      sp,sp,#0x1c
;;;56       SPI_InitTypeDef  SPI_InitStructure;
;;;57       GPIO_InitTypeDef GPIO_InitStructure;
;;;58       
;;;59       /* Enable SPI1 and GPIO clocks */
;;;60       /*!< SPI_FLASH_SPI_CS_GPIO, SPI_FLASH_SPI_MOSI_GPIO, 
;;;61            SPI_FLASH_SPI_MISO_GPIO, SPI_FLASH_SPI_DETECT_GPIO 
;;;62            and SPI_FLASH_SPI_SCK_GPIO Periph clock enable */
;;;63       RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_GPIOD, ENABLE);
000004  2101              MOVS     r1,#1
000006  2024              MOVS     r0,#0x24
000008  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;64     
;;;65       /*!< SPI_FLASH_SPI Periph clock enable */
;;;66       RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE);
00000c  2101              MOVS     r1,#1
00000e  0308              LSLS     r0,r1,#12
000010  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;67      
;;;68       
;;;69       /*!< Configure SPI_FLASH_SPI pins: SCK */
;;;70       GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5;
000014  2020              MOVS     r0,#0x20
000016  f8ad0004          STRH     r0,[sp,#4]
;;;71       GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
00001a  2003              MOVS     r0,#3
00001c  f88d0006          STRB     r0,[sp,#6]
;;;72       GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
000020  2018              MOVS     r0,#0x18
000022  f88d0007          STRB     r0,[sp,#7]
;;;73       GPIO_Init(GPIOA, &GPIO_InitStructure);
000026  a901              ADD      r1,sp,#4
000028  48f8              LDR      r0,|L1.1036|
00002a  f7fffffe          BL       GPIO_Init
;;;74     
;;;75       /*!< Configure SPI_FLASH_SPI pins: MISO */
;;;76       GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6;
00002e  2040              MOVS     r0,#0x40
000030  f8ad0004          STRH     r0,[sp,#4]
;;;77       GPIO_Init(GPIOA, &GPIO_InitStructure);
000034  a901              ADD      r1,sp,#4
000036  48f5              LDR      r0,|L1.1036|
000038  f7fffffe          BL       GPIO_Init
;;;78     
;;;79       /*!< Configure SPI_FLASH_SPI pins: MOSI */
;;;80       GPIO_InitStructure.GPIO_Pin = GPIO_Pin_7;
00003c  2080              MOVS     r0,#0x80
00003e  f8ad0004          STRH     r0,[sp,#4]
;;;81       GPIO_Init(GPIOA, &GPIO_InitStructure);
000042  a901              ADD      r1,sp,#4
000044  48f1              LDR      r0,|L1.1036|
000046  f7fffffe          BL       GPIO_Init
;;;82     
;;;83       /*!< Configure SPI_FLASH_SPI_CS_PIN pin: SPI_FLASH Card CS pin */
;;;84       GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
00004a  2004              MOVS     r0,#4
00004c  f8ad0004          STRH     r0,[sp,#4]
;;;85       GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
000050  2010              MOVS     r0,#0x10
000052  f88d0007          STRB     r0,[sp,#7]
;;;86       GPIO_Init(GPIOA, &GPIO_InitStructure);
000056  a901              ADD      r1,sp,#4
000058  48ec              LDR      r0,|L1.1036|
00005a  f7fffffe          BL       GPIO_Init
;;;87     
;;;88       /* Deselect the FLASH: Chip Select high */
;;;89       SPI_FLASH_CS_HIGH();
00005e  2004              MOVS     r0,#4
000060  49ea              LDR      r1,|L1.1036|
000062  3110              ADDS     r1,r1,#0x10
000064  6008              STR      r0,[r1,#0]
;;;90     
;;;91       /* SPI1 configuration */
;;;92       // W25X16: data input on the DIO pin is sampled on the rising edge of the CLK. 
;;;93       // Data on the DO and DIO pins are clocked out on the falling edge of CLK.
;;;94       SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
000066  2000              MOVS     r0,#0
000068  f8ad0008          STRH     r0,[sp,#8]
;;;95       SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
00006c  f44f7082          MOV      r0,#0x104
000070  f8ad000a          STRH     r0,[sp,#0xa]
;;;96       SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
000074  2000              MOVS     r0,#0
000076  f8ad000c          STRH     r0,[sp,#0xc]
;;;97       SPI_InitStructure.SPI_CPOL = SPI_CPOL_High;
00007a  2002              MOVS     r0,#2
00007c  f8ad000e          STRH     r0,[sp,#0xe]
;;;98       SPI_InitStructure.SPI_CPHA = SPI_CPHA_2Edge;
000080  2001              MOVS     r0,#1
000082  f8ad0010          STRH     r0,[sp,#0x10]
;;;99       SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
000086  0240              LSLS     r0,r0,#9
000088  f8ad0012          STRH     r0,[sp,#0x12]
;;;100      SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_4;
00008c  2008              MOVS     r0,#8
00008e  f8ad0014          STRH     r0,[sp,#0x14]
;;;101      SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
000092  2000              MOVS     r0,#0
000094  f8ad0016          STRH     r0,[sp,#0x16]
;;;102      SPI_InitStructure.SPI_CRCPolynomial = 7;
000098  2007              MOVS     r0,#7
00009a  f8ad0018          STRH     r0,[sp,#0x18]
;;;103      SPI_Init(SPI1, &SPI_InitStructure);
00009e  a902              ADD      r1,sp,#8
0000a0  48db              LDR      r0,|L1.1040|
0000a2  f7fffffe          BL       SPI_Init
;;;104    
;;;105      /* Enable SPI1  */
;;;106      SPI_Cmd(SPI1, ENABLE);
0000a6  2101              MOVS     r1,#1
0000a8  48d9              LDR      r0,|L1.1040|
0000aa  f7fffffe          BL       SPI_Cmd
;;;107    }
0000ae  b007              ADD      sp,sp,#0x1c
0000b0  bd00              POP      {pc}
;;;108    /*******************************************************************************
                          ENDP

                  SPI_FLASH_SendByte PROC
;;;442    *******************************************************************************/
;;;443    u8 SPI_FLASH_SendByte(u8 byte)
0000b2  b510              PUSH     {r4,lr}
;;;444    {
0000b4  4604              MOV      r4,r0
;;;445      /* Loop while DR register in not emplty */
;;;446      while (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE) == RESET);
0000b6  bf00              NOP      
                  |L1.184|
0000b8  2102              MOVS     r1,#2
0000ba  48d5              LDR      r0,|L1.1040|
0000bc  f7fffffe          BL       SPI_I2S_GetFlagStatus
0000c0  2800              CMP      r0,#0
0000c2  d0f9              BEQ      |L1.184|
;;;447    
;;;448      /* Send byte through the SPI1 peripheral */
;;;449      SPI_I2S_SendData(SPI1, byte);
0000c4  4621              MOV      r1,r4
0000c6  48d2              LDR      r0,|L1.1040|
0000c8  f7fffffe          BL       SPI_I2S_SendData
;;;450    
;;;451      /* Wait to receive a byte */
;;;452      while (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_RXNE) == RESET);
0000cc  bf00              NOP      
                  |L1.206|
0000ce  2101              MOVS     r1,#1
0000d0  48cf              LDR      r0,|L1.1040|
0000d2  f7fffffe          BL       SPI_I2S_GetFlagStatus
0000d6  2800              CMP      r0,#0
0000d8  d0f9              BEQ      |L1.206|
;;;453    
;;;454      /* Return the byte read from the SPI bus */
;;;455      return SPI_I2S_ReceiveData(SPI1);
0000da  48cd              LDR      r0,|L1.1040|
0000dc  f7fffffe          BL       SPI_I2S_ReceiveData
0000e0  b2c0              UXTB     r0,r0
;;;456    }
0000e2  bd10              POP      {r4,pc}
;;;457    
                          ENDP

                  SPI_FLASH_WaitForWriteEnd PROC
;;;508    *******************************************************************************/
;;;509    void SPI_FLASH_WaitForWriteEnd(void)
0000e4  b510              PUSH     {r4,lr}
;;;510    {
;;;511      u8 FLASH_Status = 0;
0000e6  2400              MOVS     r4,#0
;;;512    
;;;513      /* Select the FLASH: Chip Select low */
;;;514      SPI_FLASH_CS_LOW();
0000e8  2004              MOVS     r0,#4
0000ea  49c8              LDR      r1,|L1.1036|
0000ec  3114              ADDS     r1,r1,#0x14
0000ee  6008              STR      r0,[r1,#0]
;;;515    
;;;516      /* Send "Read Status Register" instruction */
;;;517      SPI_FLASH_SendByte(W25X_ReadStatusReg);
0000f0  2005              MOVS     r0,#5
0000f2  f7fffffe          BL       SPI_FLASH_SendByte
;;;518    
;;;519      /* Loop as long as the memory is busy with a write cycle */
;;;520      do
0000f6  bf00              NOP      
                  |L1.248|
;;;521      {
;;;522        /* Send a dummy byte to generate the clock needed by the FLASH
;;;523        and put the value of the status register in FLASH_Status variable */
;;;524        FLASH_Status = SPI_FLASH_SendByte(Dummy_Byte);	 
0000f8  20ff              MOVS     r0,#0xff
0000fa  f7fffffe          BL       SPI_FLASH_SendByte
0000fe  4604              MOV      r4,r0
;;;525      }
;;;526      while ((FLASH_Status & WIP_Flag) == SET); /* Write in progress */
000100  f0040001          AND      r0,r4,#1
000104  2800              CMP      r0,#0
000106  d1f7              BNE      |L1.248|
;;;527    
;;;528      /* Deselect the FLASH: Chip Select high */
;;;529      SPI_FLASH_CS_HIGH();
000108  2004              MOVS     r0,#4
00010a  49c0              LDR      r1,|L1.1036|
00010c  3110              ADDS     r1,r1,#0x10
00010e  6008              STR      r0,[r1,#0]
;;;530    }
000110  bd10              POP      {r4,pc}
;;;531    
                          ENDP

                  SPI_FLASH_WriteEnable PROC
;;;487    *******************************************************************************/
;;;488    void SPI_FLASH_WriteEnable(void)
000112  b510              PUSH     {r4,lr}
;;;489    {
;;;490      /* Select the FLASH: Chip Select low */
;;;491      SPI_FLASH_CS_LOW();
000114  2004              MOVS     r0,#4
000116  49bd              LDR      r1,|L1.1036|
000118  3114              ADDS     r1,r1,#0x14
00011a  6008              STR      r0,[r1,#0]
;;;492    
;;;493      /* Send "Write Enable" instruction */
;;;494      SPI_FLASH_SendByte(W25X_WriteEnable);
00011c  2006              MOVS     r0,#6
00011e  f7fffffe          BL       SPI_FLASH_SendByte
;;;495    
;;;496      /* Deselect the FLASH: Chip Select high */
;;;497      SPI_FLASH_CS_HIGH();
000122  2004              MOVS     r0,#4
000124  49b9              LDR      r1,|L1.1036|
000126  3110              ADDS     r1,r1,#0x10
000128  6008              STR      r0,[r1,#0]
;;;498    }
00012a  bd10              POP      {r4,pc}
;;;499    
                          ENDP

                  SPI_FLASH_SectorErase PROC
;;;114    *******************************************************************************/
;;;115    void SPI_FLASH_SectorErase(u32 SectorAddr)
00012c  b510              PUSH     {r4,lr}
;;;116    {
00012e  4604              MOV      r4,r0
;;;117      /* Send write enable instruction */
;;;118      SPI_FLASH_WriteEnable();
000130  f7fffffe          BL       SPI_FLASH_WriteEnable
;;;119      SPI_FLASH_WaitForWriteEnd();
000134  f7fffffe          BL       SPI_FLASH_WaitForWriteEnd
;;;120      /* Sector Erase */
;;;121      /* Select the FLASH: Chip Select low */
;;;122      SPI_FLASH_CS_LOW();
000138  2004              MOVS     r0,#4
00013a  49b4              LDR      r1,|L1.1036|
00013c  3114              ADDS     r1,r1,#0x14
00013e  6008              STR      r0,[r1,#0]
;;;123      /* Send Sector Erase instruction */
;;;124      SPI_FLASH_SendByte(W25X_SectorErase);
000140  2020              MOVS     r0,#0x20
000142  f7fffffe          BL       SPI_FLASH_SendByte
;;;125      /* Send SectorAddr high nibble address byte */
;;;126      SPI_FLASH_SendByte((SectorAddr & 0xFF0000) >> 16);
000146  f3c44007          UBFX     r0,r4,#16,#8
00014a  f7fffffe          BL       SPI_FLASH_SendByte
;;;127      /* Send SectorAddr medium nibble address byte */
;;;128      SPI_FLASH_SendByte((SectorAddr & 0xFF00) >> 8);
00014e  f3c42007          UBFX     r0,r4,#8,#8
000152  f7fffffe          BL       SPI_FLASH_SendByte
;;;129      /* Send SectorAddr low nibble address byte */
;;;130      SPI_FLASH_SendByte(SectorAddr & 0xFF);
000156  b2e0              UXTB     r0,r4
000158  f7fffffe          BL       SPI_FLASH_SendByte
;;;131      /* Deselect the FLASH: Chip Select high */
;;;132      SPI_FLASH_CS_HIGH();
00015c  2004              MOVS     r0,#4
00015e  49ab              LDR      r1,|L1.1036|
000160  3110              ADDS     r1,r1,#0x10
000162  6008              STR      r0,[r1,#0]
;;;133      /* Wait the end of Flash writing */
;;;134      SPI_FLASH_WaitForWriteEnd();
000164  f7fffffe          BL       SPI_FLASH_WaitForWriteEnd
;;;135    }
000168  bd10              POP      {r4,pc}
;;;136    
                          ENDP

                  SPI_FLASH_BulkErase PROC
;;;143    *******************************************************************************/
;;;144    void SPI_FLASH_BulkErase(void)
00016a  b510              PUSH     {r4,lr}
;;;145    {
;;;146      /* Send write enable instruction */
;;;147      SPI_FLASH_WriteEnable();
00016c  f7fffffe          BL       SPI_FLASH_WriteEnable
;;;148    
;;;149      /* Bulk Erase */
;;;150      /* Select the FLASH: Chip Select low */
;;;151      SPI_FLASH_CS_LOW();
000170  2004              MOVS     r0,#4
000172  49a6              LDR      r1,|L1.1036|
000174  3114              ADDS     r1,r1,#0x14
000176  6008              STR      r0,[r1,#0]
;;;152      /* Send Bulk Erase instruction  */
;;;153      SPI_FLASH_SendByte(W25X_ChipErase);
000178  20c7              MOVS     r0,#0xc7
00017a  f7fffffe          BL       SPI_FLASH_SendByte
;;;154      /* Deselect the FLASH: Chip Select high */
;;;155      SPI_FLASH_CS_HIGH();
00017e  2004              MOVS     r0,#4
000180  49a2              LDR      r1,|L1.1036|
000182  3110              ADDS     r1,r1,#0x10
000184  6008              STR      r0,[r1,#0]
;;;156    
;;;157      /* Wait the end of Flash writing */
;;;158      SPI_FLASH_WaitForWriteEnd();
000186  f7fffffe          BL       SPI_FLASH_WaitForWriteEnd
;;;159    }
00018a  bd10              POP      {r4,pc}
;;;160    
                          ENDP

                  SPI_FLASH_PageWrite PROC
;;;173    *******************************************************************************/
;;;174    void SPI_FLASH_PageWrite(u8* pBuffer, u32 WriteAddr, u16 NumByteToWrite)
00018c  b570              PUSH     {r4-r6,lr}
;;;175    {
00018e  4605              MOV      r5,r0
000190  460c              MOV      r4,r1
000192  4616              MOV      r6,r2
;;;176      /* Enable the write access to the FLASH */
;;;177      SPI_FLASH_WriteEnable();
000194  f7fffffe          BL       SPI_FLASH_WriteEnable
;;;178    
;;;179      /* Select the FLASH: Chip Select low */
;;;180      SPI_FLASH_CS_LOW();
000198  2004              MOVS     r0,#4
00019a  499c              LDR      r1,|L1.1036|
00019c  3114              ADDS     r1,r1,#0x14
00019e  6008              STR      r0,[r1,#0]
;;;181      /* Send "Write to Memory " instruction */
;;;182      SPI_FLASH_SendByte(W25X_PageProgram);
0001a0  2002              MOVS     r0,#2
0001a2  f7fffffe          BL       SPI_FLASH_SendByte
;;;183      /* Send WriteAddr high nibble address byte to write to */
;;;184      SPI_FLASH_SendByte((WriteAddr & 0xFF0000) >> 16);
0001a6  f3c44007          UBFX     r0,r4,#16,#8
0001aa  f7fffffe          BL       SPI_FLASH_SendByte
;;;185      /* Send WriteAddr medium nibble address byte to write to */
;;;186      SPI_FLASH_SendByte((WriteAddr & 0xFF00) >> 8);
0001ae  f3c42007          UBFX     r0,r4,#8,#8
0001b2  f7fffffe          BL       SPI_FLASH_SendByte
;;;187      /* Send WriteAddr low nibble address byte to write to */
;;;188      SPI_FLASH_SendByte(WriteAddr & 0xFF);
0001b6  b2e0              UXTB     r0,r4
0001b8  f7fffffe          BL       SPI_FLASH_SendByte
;;;189    
;;;190      if(NumByteToWrite > SPI_FLASH_PerWritePageSize)
0001bc  f5b67f80          CMP      r6,#0x100
0001c0  dd01              BLE      |L1.454|
;;;191      {
;;;192         NumByteToWrite = SPI_FLASH_PerWritePageSize;
0001c2  f44f7680          MOV      r6,#0x100
                  |L1.454|
;;;193         //printf("\n\r Err: SPI_FLASH_PageWrite too large!");
;;;194      }
;;;195    
;;;196      /* while there is data to be written on the FLASH */
;;;197      while (NumByteToWrite--)
0001c6  e003              B        |L1.464|
                  |L1.456|
;;;198      {
;;;199        /* Send the current byte */
;;;200        SPI_FLASH_SendByte(*pBuffer);
0001c8  7828              LDRB     r0,[r5,#0]
0001ca  f7fffffe          BL       SPI_FLASH_SendByte
;;;201        /* Point on the next byte to be written */
;;;202        pBuffer++;
0001ce  1c6d              ADDS     r5,r5,#1
                  |L1.464|
0001d0  1e30              SUBS     r0,r6,#0              ;197
0001d2  f1a60101          SUB      r1,r6,#1              ;197
0001d6  b28e              UXTH     r6,r1                 ;197
0001d8  d1f6              BNE      |L1.456|
;;;203      }
;;;204    
;;;205      /* Deselect the FLASH: Chip Select high */
;;;206      SPI_FLASH_CS_HIGH();
0001da  2004              MOVS     r0,#4
0001dc  498b              LDR      r1,|L1.1036|
0001de  3110              ADDS     r1,r1,#0x10
0001e0  6008              STR      r0,[r1,#0]
;;;207    
;;;208      /* Wait the end of Flash writing */
;;;209      SPI_FLASH_WaitForWriteEnd();
0001e2  f7fffffe          BL       SPI_FLASH_WaitForWriteEnd
;;;210    }
0001e6  bd70              POP      {r4-r6,pc}
;;;211    
                          ENDP

                  SPI_FLASH_BufferWrite PROC
;;;222    *******************************************************************************/
;;;223    void SPI_FLASH_BufferWrite(u8* pBuffer, u32 WriteAddr, u16 NumByteToWrite)
0001e8  e92d5ff0          PUSH     {r4-r12,lr}
;;;224    {
0001ec  4607              MOV      r7,r0
0001ee  460e              MOV      r6,r1
0001f0  4614              MOV      r4,r2
;;;225      u8 NumOfPage = 0, NumOfSingle = 0, Addr = 0, count = 0, temp = 0;
0001f2  f04f0800          MOV      r8,#0
0001f6  46c1              MOV      r9,r8
0001f8  46c2              MOV      r10,r8
0001fa  2500              MOVS     r5,#0
0001fc  46ab              MOV      r11,r5
;;;226    
;;;227      Addr = WriteAddr % SPI_FLASH_PageSize;
0001fe  f0060aff          AND      r10,r6,#0xff
;;;228      count = SPI_FLASH_PageSize - Addr;
000202  f1ca0000          RSB      r0,r10,#0
000206  b2c5              UXTB     r5,r0
;;;229      NumOfPage =  NumByteToWrite / SPI_FLASH_PageSize;
000208  4620              MOV      r0,r4
00020a  17e1              ASRS     r1,r4,#31
00020c  eb046111          ADD      r1,r4,r1,LSR #24
000210  f3c12807          UBFX     r8,r1,#8,#8
;;;230      NumOfSingle = NumByteToWrite % SPI_FLASH_PageSize;
000214  17e1              ASRS     r1,r4,#31
000216  eb046111          ADD      r1,r4,r1,LSR #24
00021a  1209              ASRS     r1,r1,#8
00021c  eba42101          SUB      r1,r4,r1,LSL #8
000220  f00109ff          AND      r9,r1,#0xff
;;;231    
;;;232      if (Addr == 0) /* WriteAddr is SPI_FLASH_PageSize aligned  */
000224  f1ba0f00          CMP      r10,#0
000228  d120              BNE      |L1.620|
;;;233      {
;;;234        if (NumOfPage == 0) /* NumByteToWrite < SPI_FLASH_PageSize */
00022a  f1b80f00          CMP      r8,#0
00022e  d105              BNE      |L1.572|
;;;235        {
;;;236          SPI_FLASH_PageWrite(pBuffer, WriteAddr, NumByteToWrite);
000230  4622              MOV      r2,r4
000232  4631              MOV      r1,r6
000234  4638              MOV      r0,r7
000236  f7fffffe          BL       SPI_FLASH_PageWrite
00023a  e064              B        |L1.774|
                  |L1.572|
;;;237        }
;;;238        else /* NumByteToWrite > SPI_FLASH_PageSize */
;;;239        {
;;;240          while (NumOfPage--)
00023c  e009              B        |L1.594|
                  |L1.574|
;;;241          {
;;;242            SPI_FLASH_PageWrite(pBuffer, WriteAddr, SPI_FLASH_PageSize);
00023e  f44f7280          MOV      r2,#0x100
000242  4631              MOV      r1,r6
000244  4638              MOV      r0,r7
000246  f7fffffe          BL       SPI_FLASH_PageWrite
;;;243            WriteAddr +=  SPI_FLASH_PageSize;
00024a  f5067680          ADD      r6,r6,#0x100
;;;244            pBuffer += SPI_FLASH_PageSize;
00024e  f5077780          ADD      r7,r7,#0x100
                  |L1.594|
000252  f1b80000          SUBS     r0,r8,#0              ;240
000256  f1a80101          SUB      r1,r8,#1              ;240
00025a  f00108ff          AND      r8,r1,#0xff           ;240
00025e  d1ee              BNE      |L1.574|
;;;245          }
;;;246    
;;;247          SPI_FLASH_PageWrite(pBuffer, WriteAddr, NumOfSingle);
000260  464a              MOV      r2,r9
000262  4631              MOV      r1,r6
000264  4638              MOV      r0,r7
000266  f7fffffe          BL       SPI_FLASH_PageWrite
00026a  e04c              B        |L1.774|
                  |L1.620|
;;;248        }
;;;249      }
;;;250      else /* WriteAddr is not SPI_FLASH_PageSize aligned  */
;;;251      {
;;;252        if (NumOfPage == 0) /* NumByteToWrite < SPI_FLASH_PageSize */
00026c  f1b80f00          CMP      r8,#0
000270  d118              BNE      |L1.676|
;;;253        {
;;;254          if (NumOfSingle > count) /* (NumByteToWrite + WriteAddr) > SPI_FLASH_PageSize */
000272  45a9              CMP      r9,r5
000274  dd10              BLE      |L1.664|
;;;255          {
;;;256            temp = NumOfSingle - count;
000276  eba90005          SUB      r0,r9,r5
00027a  f0000bff          AND      r11,r0,#0xff
;;;257    
;;;258            SPI_FLASH_PageWrite(pBuffer, WriteAddr, count);
00027e  462a              MOV      r2,r5
000280  4631              MOV      r1,r6
000282  4638              MOV      r0,r7
000284  f7fffffe          BL       SPI_FLASH_PageWrite
;;;259            WriteAddr +=  count;
000288  442e              ADD      r6,r6,r5
;;;260            pBuffer += count;
00028a  442f              ADD      r7,r7,r5
;;;261    
;;;262            SPI_FLASH_PageWrite(pBuffer, WriteAddr, temp);
00028c  465a              MOV      r2,r11
00028e  4631              MOV      r1,r6
000290  4638              MOV      r0,r7
000292  f7fffffe          BL       SPI_FLASH_PageWrite
000296  e036              B        |L1.774|
                  |L1.664|
;;;263          }
;;;264          else
;;;265          {
;;;266            SPI_FLASH_PageWrite(pBuffer, WriteAddr, NumByteToWrite);
000298  4622              MOV      r2,r4
00029a  4631              MOV      r1,r6
00029c  4638              MOV      r0,r7
00029e  f7fffffe          BL       SPI_FLASH_PageWrite
0002a2  e030              B        |L1.774|
                  |L1.676|
;;;267          }
;;;268        }
;;;269        else /* NumByteToWrite > SPI_FLASH_PageSize */
;;;270        {
;;;271          NumByteToWrite -= count;
0002a4  1b60              SUBS     r0,r4,r5
0002a6  b284              UXTH     r4,r0
;;;272          NumOfPage =  NumByteToWrite / SPI_FLASH_PageSize;
0002a8  4620              MOV      r0,r4
0002aa  17e1              ASRS     r1,r4,#31
0002ac  eb046111          ADD      r1,r4,r1,LSR #24
0002b0  f3c12807          UBFX     r8,r1,#8,#8
;;;273          NumOfSingle = NumByteToWrite % SPI_FLASH_PageSize;
0002b4  17e1              ASRS     r1,r4,#31
0002b6  eb046111          ADD      r1,r4,r1,LSR #24
0002ba  1209              ASRS     r1,r1,#8
0002bc  eba42101          SUB      r1,r4,r1,LSL #8
0002c0  f00109ff          AND      r9,r1,#0xff
;;;274    
;;;275          SPI_FLASH_PageWrite(pBuffer, WriteAddr, count);
0002c4  462a              MOV      r2,r5
0002c6  4631              MOV      r1,r6
0002c8  4638              MOV      r0,r7
0002ca  f7fffffe          BL       SPI_FLASH_PageWrite
;;;276          WriteAddr +=  count;
0002ce  442e              ADD      r6,r6,r5
;;;277          pBuffer += count;
0002d0  442f              ADD      r7,r7,r5
;;;278    
;;;279          while (NumOfPage--)
0002d2  e009              B        |L1.744|
                  |L1.724|
;;;280          {
;;;281            SPI_FLASH_PageWrite(pBuffer, WriteAddr, SPI_FLASH_PageSize);
0002d4  f44f7280          MOV      r2,#0x100
0002d8  4631              MOV      r1,r6
0002da  4638              MOV      r0,r7
0002dc  f7fffffe          BL       SPI_FLASH_PageWrite
;;;282            WriteAddr +=  SPI_FLASH_PageSize;
0002e0  f5067680          ADD      r6,r6,#0x100
;;;283            pBuffer += SPI_FLASH_PageSize;
0002e4  f5077780          ADD      r7,r7,#0x100
                  |L1.744|
0002e8  f1b80000          SUBS     r0,r8,#0              ;279
0002ec  f1a80101          SUB      r1,r8,#1              ;279
0002f0  f00108ff          AND      r8,r1,#0xff           ;279
0002f4  d1ee              BNE      |L1.724|
;;;284          }
;;;285    
;;;286          if (NumOfSingle != 0)
0002f6  f1b90f00          CMP      r9,#0
0002fa  d004              BEQ      |L1.774|
;;;287          {
;;;288            SPI_FLASH_PageWrite(pBuffer, WriteAddr, NumOfSingle);
0002fc  464a              MOV      r2,r9
0002fe  4631              MOV      r1,r6
000300  4638              MOV      r0,r7
000302  f7fffffe          BL       SPI_FLASH_PageWrite
                  |L1.774|
;;;289          }
;;;290        }
;;;291      }
;;;292    }
000306  e8bd9ff0          POP      {r4-r12,pc}
;;;293    
                          ENDP

                  SPI_FLASH_BufferRead PROC
;;;303    *******************************************************************************/
;;;304    void SPI_FLASH_BufferRead(u8* pBuffer, u32 ReadAddr, u16 NumByteToRead)
00030a  b570              PUSH     {r4-r6,lr}
;;;305    {
00030c  4605              MOV      r5,r0
00030e  460c              MOV      r4,r1
000310  4616              MOV      r6,r2
;;;306      /* Select the FLASH: Chip Select low */
;;;307      SPI_FLASH_CS_LOW();
000312  2004              MOVS     r0,#4
000314  493d              LDR      r1,|L1.1036|
000316  3114              ADDS     r1,r1,#0x14
000318  6008              STR      r0,[r1,#0]
;;;308    
;;;309      /* Send "Read from Memory " instruction */
;;;310      SPI_FLASH_SendByte(W25X_ReadData);
00031a  2003              MOVS     r0,#3
00031c  f7fffffe          BL       SPI_FLASH_SendByte
;;;311    
;;;312      /* Send ReadAddr high nibble address byte to read from */
;;;313      SPI_FLASH_SendByte((ReadAddr & 0xFF0000) >> 16);
000320  f3c44007          UBFX     r0,r4,#16,#8
000324  f7fffffe          BL       SPI_FLASH_SendByte
;;;314      /* Send ReadAddr medium nibble address byte to read from */
;;;315      SPI_FLASH_SendByte((ReadAddr& 0xFF00) >> 8);
000328  f3c42007          UBFX     r0,r4,#8,#8
00032c  f7fffffe          BL       SPI_FLASH_SendByte
;;;316      /* Send ReadAddr low nibble address byte to read from */
;;;317      SPI_FLASH_SendByte(ReadAddr & 0xFF);
000330  b2e0              UXTB     r0,r4
000332  f7fffffe          BL       SPI_FLASH_SendByte
;;;318    
;;;319      while (NumByteToRead--) /* while there is data to be read */
000336  e004              B        |L1.834|
                  |L1.824|
;;;320      {
;;;321        /* Read a byte from the FLASH */
;;;322        *pBuffer = SPI_FLASH_SendByte(Dummy_Byte);
000338  20ff              MOVS     r0,#0xff
00033a  f7fffffe          BL       SPI_FLASH_SendByte
00033e  7028              STRB     r0,[r5,#0]
;;;323        /* Point to the next location where the byte read will be saved */
;;;324        pBuffer++;
000340  1c6d              ADDS     r5,r5,#1
                  |L1.834|
000342  1e30              SUBS     r0,r6,#0              ;319
000344  f1a60101          SUB      r1,r6,#1              ;319
000348  b28e              UXTH     r6,r1                 ;319
00034a  d1f5              BNE      |L1.824|
;;;325      }
;;;326    
;;;327      /* Deselect the FLASH: Chip Select high */
;;;328      SPI_FLASH_CS_HIGH();
00034c  2004              MOVS     r0,#4
00034e  492f              LDR      r1,|L1.1036|
000350  3110              ADDS     r1,r1,#0x10
000352  6008              STR      r0,[r1,#0]
;;;329    }
000354  bd70              POP      {r4-r6,pc}
;;;330    
                          ENDP

                  SPI_FLASH_ReadID PROC
;;;337    *******************************************************************************/
;;;338    u32 SPI_FLASH_ReadID(void)
000356  e92d41f0          PUSH     {r4-r8,lr}
;;;339    {
;;;340      u32 Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
00035a  2400              MOVS     r4,#0
00035c  2500              MOVS     r5,#0
00035e  2600              MOVS     r6,#0
000360  2700              MOVS     r7,#0
;;;341    
;;;342      /* Select the FLASH: Chip Select low */
;;;343      SPI_FLASH_CS_LOW();
000362  2004              MOVS     r0,#4
000364  4929              LDR      r1,|L1.1036|
000366  3114              ADDS     r1,r1,#0x14
000368  6008              STR      r0,[r1,#0]
;;;344    
;;;345      /* Send "RDID " instruction */
;;;346      SPI_FLASH_SendByte(W25X_JedecDeviceID);
00036a  209f              MOVS     r0,#0x9f
00036c  f7fffffe          BL       SPI_FLASH_SendByte
;;;347    
;;;348      /* Read a byte from the FLASH */
;;;349      Temp0 = SPI_FLASH_SendByte(Dummy_Byte);
000370  20ff              MOVS     r0,#0xff
000372  f7fffffe          BL       SPI_FLASH_SendByte
000376  4605              MOV      r5,r0
;;;350    
;;;351      /* Read a byte from the FLASH */
;;;352      Temp1 = SPI_FLASH_SendByte(Dummy_Byte);
000378  20ff              MOVS     r0,#0xff
00037a  f7fffffe          BL       SPI_FLASH_SendByte
00037e  4606              MOV      r6,r0
;;;353    
;;;354      /* Read a byte from the FLASH */
;;;355      Temp2 = SPI_FLASH_SendByte(Dummy_Byte);
000380  20ff              MOVS     r0,#0xff
000382  f7fffffe          BL       SPI_FLASH_SendByte
000386  4607              MOV      r7,r0
;;;356    
;;;357      /* Deselect the FLASH: Chip Select high */
;;;358      SPI_FLASH_CS_HIGH();
000388  2004              MOVS     r0,#4
00038a  4920              LDR      r1,|L1.1036|
00038c  3110              ADDS     r1,r1,#0x10
00038e  6008              STR      r0,[r1,#0]
;;;359    
;;;360      Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
000390  0428              LSLS     r0,r5,#16
000392  ea402006          ORR      r0,r0,r6,LSL #8
000396  ea400407          ORR      r4,r0,r7
;;;361    
;;;362      return Temp;
00039a  4620              MOV      r0,r4
;;;363    }
00039c  e8bd81f0          POP      {r4-r8,pc}
;;;364    /*******************************************************************************
                          ENDP

                  SPI_FLASH_ReadDeviceID PROC
;;;370    *******************************************************************************/
;;;371    u32 SPI_FLASH_ReadDeviceID(void)
0003a0  b510              PUSH     {r4,lr}
;;;372    {
;;;373      u32 Temp = 0;
0003a2  2400              MOVS     r4,#0
;;;374    
;;;375      /* Select the FLASH: Chip Select low */
;;;376      SPI_FLASH_CS_LOW();
0003a4  2004              MOVS     r0,#4
0003a6  4919              LDR      r1,|L1.1036|
0003a8  3114              ADDS     r1,r1,#0x14
0003aa  6008              STR      r0,[r1,#0]
;;;377    
;;;378      /* Send "RDID " instruction */
;;;379      SPI_FLASH_SendByte(W25X_DeviceID);
0003ac  20ab              MOVS     r0,#0xab
0003ae  f7fffffe          BL       SPI_FLASH_SendByte
;;;380      SPI_FLASH_SendByte(Dummy_Byte);
0003b2  20ff              MOVS     r0,#0xff
0003b4  f7fffffe          BL       SPI_FLASH_SendByte
;;;381      SPI_FLASH_SendByte(Dummy_Byte);
0003b8  20ff              MOVS     r0,#0xff
0003ba  f7fffffe          BL       SPI_FLASH_SendByte
;;;382      SPI_FLASH_SendByte(Dummy_Byte);
0003be  20ff              MOVS     r0,#0xff
0003c0  f7fffffe          BL       SPI_FLASH_SendByte
;;;383      
;;;384      /* Read a byte from the FLASH */
;;;385      Temp = SPI_FLASH_SendByte(Dummy_Byte);
0003c4  20ff              MOVS     r0,#0xff
0003c6  f7fffffe          BL       SPI_FLASH_SendByte
0003ca  4604              MOV      r4,r0
;;;386    
;;;387      /* Deselect the FLASH: Chip Select high */
;;;388      SPI_FLASH_CS_HIGH();
0003cc  2004              MOVS     r0,#4
0003ce  490f              LDR      r1,|L1.1036|
0003d0  3110              ADDS     r1,r1,#0x10
0003d2  6008              STR      r0,[r1,#0]
;;;389    
;;;390      return Temp;
0003d4  4620              MOV      r0,r4
;;;391    }
0003d6  bd10              POP      {r4,pc}
;;;392    /*******************************************************************************
                          ENDP

                  SPI_FLASH_StartReadSequence PROC
;;;403    *******************************************************************************/
;;;404    void SPI_FLASH_StartReadSequence(u32 ReadAddr)
0003d8  b510              PUSH     {r4,lr}
;;;405    {
0003da  4604              MOV      r4,r0
;;;406      /* Select the FLASH: Chip Select low */
;;;407      SPI_FLASH_CS_LOW();
0003dc  2004              MOVS     r0,#4
0003de  490b              LDR      r1,|L1.1036|
0003e0  3114              ADDS     r1,r1,#0x14
0003e2  6008              STR      r0,[r1,#0]
;;;408    
;;;409      /* Send "Read from Memory " instruction */
;;;410      SPI_FLASH_SendByte(W25X_ReadData);
0003e4  2003              MOVS     r0,#3
0003e6  f7fffffe          BL       SPI_FLASH_SendByte
;;;411    
;;;412      /* Send the 24-bit address of the address to read from -----------------------*/
;;;413      /* Send ReadAddr high nibble address byte */
;;;414      SPI_FLASH_SendByte((ReadAddr & 0xFF0000) >> 16);
0003ea  f3c44007          UBFX     r0,r4,#16,#8
0003ee  f7fffffe          BL       SPI_FLASH_SendByte
;;;415      /* Send ReadAddr medium nibble address byte */
;;;416      SPI_FLASH_SendByte((ReadAddr& 0xFF00) >> 8);
0003f2  f3c42007          UBFX     r0,r4,#8,#8
0003f6  f7fffffe          BL       SPI_FLASH_SendByte
;;;417      /* Send ReadAddr low nibble address byte */
;;;418      SPI_FLASH_SendByte(ReadAddr & 0xFF);
0003fa  b2e0              UXTB     r0,r4
0003fc  f7fffffe          BL       SPI_FLASH_SendByte
;;;419    }
000400  bd10              POP      {r4,pc}
;;;420    
                          ENDP

                  SPI_FLASH_ReadByte PROC
;;;429    *******************************************************************************/
;;;430    u8 SPI_FLASH_ReadByte(void)
000402  b510              PUSH     {r4,lr}
;;;431    {
;;;432      return (SPI_FLASH_SendByte(Dummy_Byte));
000404  20ff              MOVS     r0,#0xff
000406  f7fffffe          BL       SPI_FLASH_SendByte
;;;433    }
00040a  bd10              POP      {r4,pc}
                  |L1.1036|
                          DCD      0x40010800
                  |L1.1040|
                          DCD      0x40013000
                          ENDP

                  SPI_FLASH_SendHalfWord PROC
;;;465    *******************************************************************************/
;;;466    u16 SPI_FLASH_SendHalfWord(u16 HalfWord)
000414  b510              PUSH     {r4,lr}
;;;467    {
000416  4604              MOV      r4,r0
;;;468      /* Loop while DR register in not emplty */
;;;469      while (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE) == RESET);
000418  bf00              NOP      
                  |L1.1050|
00041a  2102              MOVS     r1,#2
00041c  4815              LDR      r0,|L1.1140|
00041e  f7fffffe          BL       SPI_I2S_GetFlagStatus
000422  2800              CMP      r0,#0
000424  d0f9              BEQ      |L1.1050|
;;;470    
;;;471      /* Send Half Word through the SPI1 peripheral */
;;;472      SPI_I2S_SendData(SPI1, HalfWord);
000426  4621              MOV      r1,r4
000428  4812              LDR      r0,|L1.1140|
00042a  f7fffffe          BL       SPI_I2S_SendData
;;;473    
;;;474      /* Wait to receive a Half Word */
;;;475      while (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_RXNE) == RESET);
00042e  bf00              NOP      
                  |L1.1072|
000430  2101              MOVS     r1,#1
000432  4810              LDR      r0,|L1.1140|
000434  f7fffffe          BL       SPI_I2S_GetFlagStatus
000438  2800              CMP      r0,#0
00043a  d0f9              BEQ      |L1.1072|
;;;476    
;;;477      /* Return the Half Word read from the SPI bus */
;;;478      return SPI_I2S_ReceiveData(SPI1);
00043c  480d              LDR      r0,|L1.1140|
00043e  f7fffffe          BL       SPI_I2S_ReceiveData
;;;479    }
000442  bd10              POP      {r4,pc}
;;;480    
                          ENDP

                  SPI_Flash_PowerDown PROC
;;;533    //进入掉电模式
;;;534    void SPI_Flash_PowerDown(void)   
000444  b510              PUSH     {r4,lr}
;;;535    { 
;;;536      /* Select the FLASH: Chip Select low */
;;;537      SPI_FLASH_CS_LOW();
000446  2004              MOVS     r0,#4
000448  490b              LDR      r1,|L1.1144|
00044a  6008              STR      r0,[r1,#0]
;;;538    
;;;539      /* Send "Power Down" instruction */
;;;540      SPI_FLASH_SendByte(W25X_PowerDown);
00044c  20b9              MOVS     r0,#0xb9
00044e  f7fffffe          BL       SPI_FLASH_SendByte
;;;541    
;;;542      /* Deselect the FLASH: Chip Select high */
;;;543      SPI_FLASH_CS_HIGH();
000452  2004              MOVS     r0,#4
000454  4908              LDR      r1,|L1.1144|
000456  1f09              SUBS     r1,r1,#4
000458  6008              STR      r0,[r1,#0]
;;;544    }   
00045a  bd10              POP      {r4,pc}
;;;545    
                          ENDP

                  SPI_Flash_WAKEUP PROC
;;;546    //唤醒
;;;547    void SPI_Flash_WAKEUP(void)   
00045c  b510              PUSH     {r4,lr}
;;;548    {
;;;549      /* Select the FLASH: Chip Select low */
;;;550      SPI_FLASH_CS_LOW();
00045e  2004              MOVS     r0,#4
000460  4905              LDR      r1,|L1.1144|
000462  6008              STR      r0,[r1,#0]
;;;551    
;;;552      /* Send "Power Down" instruction */
;;;553      SPI_FLASH_SendByte(W25X_ReleasePowerDown);
000464  20ab              MOVS     r0,#0xab
000466  f7fffffe          BL       SPI_FLASH_SendByte
;;;554    
;;;555      /* Deselect the FLASH: Chip Select high */
;;;556      SPI_FLASH_CS_HIGH();                   //等待TRES1
00046a  2004              MOVS     r0,#4
00046c  4902              LDR      r1,|L1.1144|
00046e  1f09              SUBS     r1,r1,#4
000470  6008              STR      r0,[r1,#0]
;;;557    }   
000472  bd10              POP      {r4,pc}
;;;558       
                          ENDP

                  |L1.1140|
                          DCD      0x40013000
                  |L1.1144|
                          DCD      0x40010814
