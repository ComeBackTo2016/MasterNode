; generated by Component: ARM Compiler 5.06 update 2 (build 183) Tool: ArmCC [4d35cd]
; commandline ArmCC [--list --debug -c --asm --interleave -o..\..\output\ioi2c.o --asm_dir=..\..\Listing\ --list_dir=..\..\Listing\ --depend=..\..\output\ioi2c.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\..\Libraries\CMSIS -I..\..\User -I..\..\Libraries\FWlib\inc -I..\..\User\Alogrisem\inc -I..\..\User\BSP_Init\inc -I..\..\User\exDev\inc -IH:\CETC\Project\第二代机器鱼程序\AV1.3\Project\RVMDK（uv4）\RTE -ID:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\1.0.5\Device\Include -ID:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=520 -DSTM32F10X_HD -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -W --omf_browse=..\..\output\ioi2c.crf ..\..\User\BSP_Init\src\IOI2C.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  Delay PROC
;;;8      
;;;9      void Delay(u32 count)//用于产生400KHzIIC信号所需要的延时
000000  bf00              NOP      
                  |L1.2|
;;;10     {
;;;11     	while (count--);
000002  1e01              SUBS     r1,r0,#0
000004  f1a00001          SUB      r0,r0,#1
000008  d1fb              BNE      |L1.2|
;;;12     }
00000a  4770              BX       lr
;;;13     void IOIIC_Init(void)
                          ENDP

                  IOIIC_Init PROC
00000c  b508              PUSH     {r3,lr}
;;;14     {			
;;;15     	GPIO_InitTypeDef GPIO_InitStructure;
;;;16      	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);			     
00000e  2101              MOVS     r1,#1
000010  2008              MOVS     r0,#8
000012  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;17      	//配置PB6 PB7 为开漏输出  刷新频率为50Mhz
;;;18     // 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10 | GPIO_Pin_11| GPIO_Pin_12;	
;;;19     	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7;
000016  20c0              MOVS     r0,#0xc0
000018  f8ad0000          STRH     r0,[sp,#0]
;;;20     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;       
00001c  2010              MOVS     r0,#0x10
00001e  f88d0003          STRB     r0,[sp,#3]
;;;21     	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000022  2003              MOVS     r0,#3
000024  f88d0002          STRB     r0,[sp,#2]
;;;22     	//应用配置到GPIOB 
;;;23     	GPIO_Init(GPIOB, &GPIO_InitStructure);
000028  4669              MOV      r1,sp
00002a  48d1              LDR      r0,|L1.880|
00002c  f7fffffe          BL       GPIO_Init
;;;24     	
;;;25     	SDA_OUT();     //sda线输出
000030  48cf              LDR      r0,|L1.880|
000032  1d00              ADDS     r0,r0,#4
000034  6800              LDR      r0,[r0,#0]
000036  f0204070          BIC      r0,r0,#0xf0000000
00003a  49cd              LDR      r1,|L1.880|
00003c  1d09              ADDS     r1,r1,#4
00003e  6008              STR      r0,[r1,#0]
000040  4608              MOV      r0,r1
000042  6800              LDR      r0,[r0,#0]
000044  f0405040          ORR      r0,r0,#0x30000000
000048  6008              STR      r0,[r1,#0]
;;;26     	IIC_SDA=1;	  	  
00004a  2001              MOVS     r0,#1
00004c  49c9              LDR      r1,|L1.884|
00004e  6008              STR      r0,[r1,#0]
;;;27     	IIC_SCL=1;
000050  49c9              LDR      r1,|L1.888|
000052  f8c10198          STR      r0,[r1,#0x198]
;;;28     }
000056  bd08              POP      {r3,pc}
;;;29     
                          ENDP

                  IIC_Start PROC
;;;33     *******************************************************************************/
;;;34     void IIC_Start(void)
000058  b500              PUSH     {lr}
;;;35     {
;;;36     	SDA_OUT();     //sda线输出
00005a  48c5              LDR      r0,|L1.880|
00005c  1d00              ADDS     r0,r0,#4
00005e  6800              LDR      r0,[r0,#0]
000060  f0204070          BIC      r0,r0,#0xf0000000
000064  49c2              LDR      r1,|L1.880|
000066  1d09              ADDS     r1,r1,#4
000068  6008              STR      r0,[r1,#0]
00006a  4608              MOV      r0,r1
00006c  6800              LDR      r0,[r0,#0]
00006e  f0405040          ORR      r0,r0,#0x30000000
000072  6008              STR      r0,[r1,#0]
;;;37     	IIC_SDA=1;	  	  
000074  2001              MOVS     r0,#1
000076  49bf              LDR      r1,|L1.884|
000078  6008              STR      r0,[r1,#0]
;;;38     	IIC_SCL=1;
00007a  49bf              LDR      r1,|L1.888|
00007c  f8c10198          STR      r0,[r1,#0x198]
;;;39     	
;;;40     	Delay(5);
000080  2005              MOVS     r0,#5
000082  f7fffffe          BL       Delay
;;;41      	IIC_SDA=0;//START:when CLK is high,DATA change form high to low 
000086  2000              MOVS     r0,#0
000088  49ba              LDR      r1,|L1.884|
00008a  6008              STR      r0,[r1,#0]
;;;42     	
;;;43     	Delay(5);
00008c  2005              MOVS     r0,#5
00008e  f7fffffe          BL       Delay
;;;44     	IIC_SCL=0;//钳住I2C总线，准备发送或接收数据 
000092  2000              MOVS     r0,#0
000094  49b8              LDR      r1,|L1.888|
000096  f8c10198          STR      r0,[r1,#0x198]
;;;45     }
00009a  bd00              POP      {pc}
;;;46     
                          ENDP

                  IIC_Stop PROC
;;;50     *******************************************************************************/	  
;;;51     void IIC_Stop(void)
00009c  b500              PUSH     {lr}
;;;52     {
;;;53     	SDA_OUT();//sda线输出
00009e  48b4              LDR      r0,|L1.880|
0000a0  1d00              ADDS     r0,r0,#4
0000a2  6800              LDR      r0,[r0,#0]
0000a4  f0204070          BIC      r0,r0,#0xf0000000
0000a8  49b1              LDR      r1,|L1.880|
0000aa  1d09              ADDS     r1,r1,#4
0000ac  6008              STR      r0,[r1,#0]
0000ae  4608              MOV      r0,r1
0000b0  6800              LDR      r0,[r0,#0]
0000b2  f0405040          ORR      r0,r0,#0x30000000
0000b6  6008              STR      r0,[r1,#0]
;;;54     	IIC_SCL=0;
0000b8  2000              MOVS     r0,#0
0000ba  49ae              LDR      r1,|L1.884|
0000bc  1f09              SUBS     r1,r1,#4
0000be  6008              STR      r0,[r1,#0]
;;;55     	IIC_SDA=0;//STOP:when CLK is high DATA change form low to high
0000c0  49ad              LDR      r1,|L1.888|
0000c2  f8c1019c          STR      r0,[r1,#0x19c]
;;;56      	
;;;57     		Delay(5);
0000c6  2005              MOVS     r0,#5
0000c8  f7fffffe          BL       Delay
;;;58     	IIC_SCL=1; 
0000cc  2001              MOVS     r0,#1
0000ce  49a9              LDR      r1,|L1.884|
0000d0  1f09              SUBS     r1,r1,#4
0000d2  6008              STR      r0,[r1,#0]
;;;59     	IIC_SDA=1;//发送I2C总线结束信号
0000d4  49a8              LDR      r1,|L1.888|
0000d6  f8c1019c          STR      r0,[r1,#0x19c]
;;;60     	
;;;61     		Delay(5);							   	
0000da  2005              MOVS     r0,#5
0000dc  f7fffffe          BL       Delay
;;;62     }
0000e0  bd00              POP      {pc}
;;;63     
                          ENDP

                  IIC_Wait_Ack PROC
;;;69     *******************************************************************************/
;;;70     u8 IIC_Wait_Ack(void)
0000e2  b500              PUSH     {lr}
;;;71     {
;;;72     	u8 ucErrTime=0; 
0000e4  2300              MOVS     r3,#0
;;;73     	SDA_IN();      //SDA设置为输入  
0000e6  48a2              LDR      r0,|L1.880|
0000e8  1d00              ADDS     r0,r0,#4
0000ea  6800              LDR      r0,[r0,#0]
0000ec  f0204070          BIC      r0,r0,#0xf0000000
0000f0  499f              LDR      r1,|L1.880|
0000f2  1d09              ADDS     r1,r1,#4
0000f4  6008              STR      r0,[r1,#0]
0000f6  4608              MOV      r0,r1
0000f8  6800              LDR      r0,[r0,#0]
0000fa  f0404000          ORR      r0,r0,#0x80000000
0000fe  6008              STR      r0,[r1,#0]
;;;74     	IIC_SDA=1;
000100  2001              MOVS     r0,#1
000102  499c              LDR      r1,|L1.884|
000104  6008              STR      r0,[r1,#0]
;;;75     		Delay(5);	  
000106  2005              MOVS     r0,#5
000108  f7fffffe          BL       Delay
;;;76     	while(READ_SDA)
00010c  e00a              B        |L1.292|
                  |L1.270|
;;;77     	{
;;;78     		ucErrTime++;
00010e  1c58              ADDS     r0,r3,#1
000110  b2c3              UXTB     r3,r0
;;;79     		if(ucErrTime>50)
000112  2b32              CMP      r3,#0x32
000114  dd03              BLE      |L1.286|
;;;80     		{
;;;81     			IIC_Stop();
000116  f7fffffe          BL       IIC_Stop
;;;82     			return 1;
00011a  2001              MOVS     r0,#1
                  |L1.284|
;;;83     		}
;;;84     		Delay(5);
;;;85     	}  
;;;86     	IIC_SCL=1;
;;;87     	Delay(5); 
;;;88     	IIC_SCL=0;//时钟输出0  
;;;89     	return 0;  
;;;90     } 
00011c  bd00              POP      {pc}
                  |L1.286|
00011e  2005              MOVS     r0,#5                 ;84
000120  f7fffffe          BL       Delay
                  |L1.292|
000124  4893              LDR      r0,|L1.884|
000126  3880              SUBS     r0,r0,#0x80           ;76
000128  6800              LDR      r0,[r0,#0]            ;76
00012a  2800              CMP      r0,#0                 ;76
00012c  d1ef              BNE      |L1.270|
00012e  2001              MOVS     r0,#1                 ;86
000130  4990              LDR      r1,|L1.884|
000132  1f09              SUBS     r1,r1,#4              ;86
000134  6008              STR      r0,[r1,#0]            ;86
000136  2005              MOVS     r0,#5                 ;87
000138  f7fffffe          BL       Delay
00013c  2000              MOVS     r0,#0                 ;88
00013e  498e              LDR      r1,|L1.888|
000140  f8c10198          STR      r0,[r1,#0x198]        ;88
000144  bf00              NOP                            ;89
000146  e7e9              B        |L1.284|
;;;91     
                          ENDP

                  IIC_Ack PROC
;;;95     *******************************************************************************/
;;;96     void IIC_Ack(void)
000148  b500              PUSH     {lr}
;;;97     {
;;;98     	IIC_SCL=0;
00014a  2000              MOVS     r0,#0
00014c  4989              LDR      r1,|L1.884|
00014e  1f09              SUBS     r1,r1,#4
000150  6008              STR      r0,[r1,#0]
;;;99     	SDA_OUT();
000152  4887              LDR      r0,|L1.880|
000154  1d00              ADDS     r0,r0,#4
000156  6800              LDR      r0,[r0,#0]
000158  f0204070          BIC      r0,r0,#0xf0000000
00015c  4984              LDR      r1,|L1.880|
00015e  1d09              ADDS     r1,r1,#4
000160  6008              STR      r0,[r1,#0]
000162  4608              MOV      r0,r1
000164  6800              LDR      r0,[r0,#0]
000166  f0405040          ORR      r0,r0,#0x30000000
00016a  6008              STR      r0,[r1,#0]
;;;100    	IIC_SDA=0;
00016c  2000              MOVS     r0,#0
00016e  4982              LDR      r1,|L1.888|
000170  f8c1019c          STR      r0,[r1,#0x19c]
;;;101    		Delay(5);
000174  2005              MOVS     r0,#5
000176  f7fffffe          BL       Delay
;;;102    	IIC_SCL=1;
00017a  2001              MOVS     r0,#1
00017c  497d              LDR      r1,|L1.884|
00017e  1f09              SUBS     r1,r1,#4
000180  6008              STR      r0,[r1,#0]
;;;103    		Delay(5);
000182  2005              MOVS     r0,#5
000184  f7fffffe          BL       Delay
;;;104    	IIC_SCL=0;
000188  2000              MOVS     r0,#0
00018a  497b              LDR      r1,|L1.888|
00018c  f8c10198          STR      r0,[r1,#0x198]
;;;105    }
000190  bd00              POP      {pc}
;;;106    	
                          ENDP

                  IIC_NAck PROC
;;;110    *******************************************************************************/	    
;;;111    void IIC_NAck(void)
000192  b500              PUSH     {lr}
;;;112    {
;;;113    	IIC_SCL=0;
000194  2000              MOVS     r0,#0
000196  4977              LDR      r1,|L1.884|
000198  1f09              SUBS     r1,r1,#4
00019a  6008              STR      r0,[r1,#0]
;;;114    	SDA_OUT();
00019c  4874              LDR      r0,|L1.880|
00019e  1d00              ADDS     r0,r0,#4
0001a0  6800              LDR      r0,[r0,#0]
0001a2  f0204070          BIC      r0,r0,#0xf0000000
0001a6  4972              LDR      r1,|L1.880|
0001a8  1d09              ADDS     r1,r1,#4
0001aa  6008              STR      r0,[r1,#0]
0001ac  4608              MOV      r0,r1
0001ae  6800              LDR      r0,[r0,#0]
0001b0  f0405040          ORR      r0,r0,#0x30000000
0001b4  6008              STR      r0,[r1,#0]
;;;115    	IIC_SDA=1;
0001b6  2001              MOVS     r0,#1
0001b8  496f              LDR      r1,|L1.888|
0001ba  f8c1019c          STR      r0,[r1,#0x19c]
;;;116    	
;;;117    		Delay(5);
0001be  2005              MOVS     r0,#5
0001c0  f7fffffe          BL       Delay
;;;118    	IIC_SCL=1;
0001c4  2001              MOVS     r0,#1
0001c6  496b              LDR      r1,|L1.884|
0001c8  1f09              SUBS     r1,r1,#4
0001ca  6008              STR      r0,[r1,#0]
;;;119    		Delay(5);
0001cc  2005              MOVS     r0,#5
0001ce  f7fffffe          BL       Delay
;;;120    	IIC_SCL=0;
0001d2  2000              MOVS     r0,#0
0001d4  4968              LDR      r1,|L1.888|
0001d6  f8c10198          STR      r0,[r1,#0x198]
;;;121    }					 				     
0001da  bd00              POP      {pc}
;;;122    
                          ENDP

                  IIC_Send_Byte PROC
;;;126    *******************************************************************************/		  
;;;127    void IIC_Send_Byte(u8 txd)
0001dc  b510              PUSH     {r4,lr}
;;;128    {                        
0001de  4603              MOV      r3,r0
;;;129        u8 t; 
;;;130    		SDA_OUT(); 	    
0001e0  4863              LDR      r0,|L1.880|
0001e2  1d00              ADDS     r0,r0,#4
0001e4  6800              LDR      r0,[r0,#0]
0001e6  f0204070          BIC      r0,r0,#0xf0000000
0001ea  4961              LDR      r1,|L1.880|
0001ec  1d09              ADDS     r1,r1,#4
0001ee  6008              STR      r0,[r1,#0]
0001f0  4608              MOV      r0,r1
0001f2  6800              LDR      r0,[r0,#0]
0001f4  f0405040          ORR      r0,r0,#0x30000000
0001f8  6008              STR      r0,[r1,#0]
;;;131        IIC_SCL=0;//拉低时钟开始数据传输
0001fa  2000              MOVS     r0,#0
0001fc  495d              LDR      r1,|L1.884|
0001fe  1f09              SUBS     r1,r1,#4
000200  6008              STR      r0,[r1,#0]
;;;132        for(t=0;t<8;t++)
000202  2400              MOVS     r4,#0
000204  e017              B        |L1.566|
                  |L1.518|
;;;133        {              
;;;134            IIC_SDA=(txd&0x80)>>7;
000206  09d8              LSRS     r0,r3,#7
000208  495a              LDR      r1,|L1.884|
00020a  6008              STR      r0,[r1,#0]
;;;135            txd<<=1; 	  
00020c  0658              LSLS     r0,r3,#25
00020e  0e03              LSRS     r3,r0,#24
;;;136    			
;;;137    		Delay(2);   
000210  2002              MOVS     r0,#2
000212  f7fffffe          BL       Delay
;;;138    		IIC_SCL=1;
000216  2001              MOVS     r0,#1
000218  4957              LDR      r1,|L1.888|
00021a  f8c10198          STR      r0,[r1,#0x198]
;;;139    		Delay(5);
00021e  2005              MOVS     r0,#5
000220  f7fffffe          BL       Delay
;;;140    		IIC_SCL=0;	
000224  2000              MOVS     r0,#0
000226  4953              LDR      r1,|L1.884|
000228  1f09              SUBS     r1,r1,#4
00022a  6008              STR      r0,[r1,#0]
;;;141    		Delay(3);
00022c  2003              MOVS     r0,#3
00022e  f7fffffe          BL       Delay
000232  1c60              ADDS     r0,r4,#1              ;132
000234  b2c4              UXTB     r4,r0                 ;132
                  |L1.566|
000236  2c08              CMP      r4,#8                 ;132
000238  dbe5              BLT      |L1.518|
;;;142        }	 
;;;143    } 	 
00023a  bd10              POP      {r4,pc}
;;;144       
                          ENDP

                  IIC_Read_Byte PROC
;;;148    *******************************************************************************/  
;;;149    u8 IIC_Read_Byte(unsigned char ack)
00023c  b530              PUSH     {r4,r5,lr}
;;;150    {
00023e  4604              MOV      r4,r0
;;;151    	unsigned char i,receive=0;
000240  2300              MOVS     r3,#0
;;;152    	SDA_IN();//SDA设置为输入
000242  484b              LDR      r0,|L1.880|
000244  1d00              ADDS     r0,r0,#4
000246  6800              LDR      r0,[r0,#0]
000248  f0204070          BIC      r0,r0,#0xf0000000
00024c  4948              LDR      r1,|L1.880|
00024e  1d09              ADDS     r1,r1,#4
000250  6008              STR      r0,[r1,#0]
000252  4608              MOV      r0,r1
000254  6800              LDR      r0,[r0,#0]
000256  f0404000          ORR      r0,r0,#0x80000000
00025a  6008              STR      r0,[r1,#0]
;;;153        for(i=0;i<8;i++ )
00025c  2500              MOVS     r5,#0
00025e  e017              B        |L1.656|
                  |L1.608|
;;;154    	{
;;;155            IIC_SCL=0; 
000260  2000              MOVS     r0,#0
000262  4944              LDR      r1,|L1.884|
000264  1f09              SUBS     r1,r1,#4
000266  6008              STR      r0,[r1,#0]
;;;156            
;;;157    		Delay(5);
000268  2005              MOVS     r0,#5
00026a  f7fffffe          BL       Delay
;;;158    		IIC_SCL=1;
00026e  2001              MOVS     r0,#1
000270  4941              LDR      r1,|L1.888|
000272  f8c10198          STR      r0,[r1,#0x198]
;;;159            receive<<=1;
000276  0658              LSLS     r0,r3,#25
000278  0e03              LSRS     r3,r0,#24
;;;160            if(READ_SDA)receive++;   
00027a  483e              LDR      r0,|L1.884|
00027c  3880              SUBS     r0,r0,#0x80
00027e  6800              LDR      r0,[r0,#0]
000280  b108              CBZ      r0,|L1.646|
000282  1c58              ADDS     r0,r3,#1
000284  b2c3              UXTB     r3,r0
                  |L1.646|
;;;161    		
;;;162    		Delay(5); 
000286  2005              MOVS     r0,#5
000288  f7fffffe          BL       Delay
00028c  1c68              ADDS     r0,r5,#1              ;153
00028e  b2c5              UXTB     r5,r0                 ;153
                  |L1.656|
000290  2d08              CMP      r5,#8                 ;153
000292  dbe5              BLT      |L1.608|
;;;163        }					 
;;;164        if (ack)
000294  b114              CBZ      r4,|L1.668|
;;;165            IIC_Ack(); //发送ACK 
000296  f7fffffe          BL       IIC_Ack
00029a  e001              B        |L1.672|
                  |L1.668|
;;;166        else
;;;167            IIC_NAck();//发送nACK  
00029c  f7fffffe          BL       IIC_NAck
                  |L1.672|
;;;168        return receive;
0002a0  4618              MOV      r0,r3
;;;169    }
0002a2  bd30              POP      {r4,r5,pc}
;;;170    
                          ENDP

                  IICreadBytes PROC
;;;179    *******************************************************************************/ 
;;;180    u8 IICreadBytes(u8 dev, u8 reg, u8 length, u8 *data){
0002a4  e92d41f0          PUSH     {r4-r8,lr}
0002a8  4605              MOV      r5,r0
0002aa  4688              MOV      r8,r1
0002ac  4616              MOV      r6,r2
0002ae  461f              MOV      r7,r3
;;;181        u8 count = 0;
0002b0  2400              MOVS     r4,#0
;;;182    	
;;;183    	IIC_Start();
0002b2  f7fffffe          BL       IIC_Start
;;;184    	IIC_Send_Byte(dev<<1);	   //发送写命令
0002b6  0669              LSLS     r1,r5,#25
0002b8  0e08              LSRS     r0,r1,#24
0002ba  f7fffffe          BL       IIC_Send_Byte
;;;185    	IIC_Wait_Ack();
0002be  f7fffffe          BL       IIC_Wait_Ack
;;;186    	IIC_Send_Byte(reg);   //发送地址
0002c2  4640              MOV      r0,r8
0002c4  f7fffffe          BL       IIC_Send_Byte
;;;187      IIC_Wait_Ack();	  
0002c8  f7fffffe          BL       IIC_Wait_Ack
;;;188    	IIC_Start();
0002cc  f7fffffe          BL       IIC_Start
;;;189    	IIC_Send_Byte((dev<<1)+1);  //进入接收模式	
0002d0  2101              MOVS     r1,#1
0002d2  eb010145          ADD      r1,r1,r5,LSL #1
0002d6  b2c8              UXTB     r0,r1
0002d8  f7fffffe          BL       IIC_Send_Byte
;;;190    	IIC_Wait_Ack();
0002dc  f7fffffe          BL       IIC_Wait_Ack
;;;191    	
;;;192        for(count=0;count<length;count++){
0002e0  bf00              NOP      
0002e2  e00d              B        |L1.768|
                  |L1.740|
;;;193    		 
;;;194    		 if(count!=length-1)data[count]=IIC_Read_Byte(1);  //带ACK的读数据
0002e4  1e70              SUBS     r0,r6,#1
0002e6  42a0              CMP      r0,r4
0002e8  d004              BEQ      |L1.756|
0002ea  2001              MOVS     r0,#1
0002ec  f7fffffe          BL       IIC_Read_Byte
0002f0  5538              STRB     r0,[r7,r4]
0002f2  e003              B        |L1.764|
                  |L1.756|
;;;195    		 	else  data[count]=IIC_Read_Byte(0);	 //最后一个字节NACK
0002f4  2000              MOVS     r0,#0
0002f6  f7fffffe          BL       IIC_Read_Byte
0002fa  5538              STRB     r0,[r7,r4]
                  |L1.764|
0002fc  1c60              ADDS     r0,r4,#1              ;192
0002fe  b2c4              UXTB     r4,r0                 ;192
                  |L1.768|
000300  42b4              CMP      r4,r6                 ;192
000302  dbef              BLT      |L1.740|
;;;196    	}
;;;197        IIC_Stop();//产生一个停止条件
000304  f7fffffe          BL       IIC_Stop
;;;198        return count;
000308  4620              MOV      r0,r4
;;;199    }
00030a  e8bd81f0          POP      {r4-r8,pc}
;;;200    
                          ENDP

                  IICwriteBytes PROC
;;;209    *******************************************************************************/ 
;;;210    u8 IICwriteBytes(u8 dev, u8 reg, u8 length, u8* data){
00030e  e92d41f0          PUSH     {r4-r8,lr}
000312  4605              MOV      r5,r0
000314  460e              MOV      r6,r1
000316  4617              MOV      r7,r2
000318  4698              MOV      r8,r3
;;;211      
;;;212     	u8 count = 0;
00031a  2400              MOVS     r4,#0
;;;213    	IIC_Start();
00031c  f7fffffe          BL       IIC_Start
;;;214    	IIC_Send_Byte(dev<<1);	   //发送写命令
000320  0669              LSLS     r1,r5,#25
000322  0e08              LSRS     r0,r1,#24
000324  f7fffffe          BL       IIC_Send_Byte
;;;215    	IIC_Wait_Ack();
000328  f7fffffe          BL       IIC_Wait_Ack
;;;216    	IIC_Send_Byte(reg);   //发送地址
00032c  4630              MOV      r0,r6
00032e  f7fffffe          BL       IIC_Send_Byte
;;;217    	IIC_Wait_Ack();	  
000332  f7fffffe          BL       IIC_Wait_Ack
;;;218    	for(count=0;count<length;count++){
000336  bf00              NOP      
000338  e007              B        |L1.842|
                  |L1.826|
;;;219    		IIC_Send_Byte(data[count]); 
00033a  f8180004          LDRB     r0,[r8,r4]
00033e  f7fffffe          BL       IIC_Send_Byte
;;;220    		IIC_Wait_Ack(); 
000342  f7fffffe          BL       IIC_Wait_Ack
000346  1c60              ADDS     r0,r4,#1              ;218
000348  b2c4              UXTB     r4,r0                 ;218
                  |L1.842|
00034a  42bc              CMP      r4,r7                 ;218
00034c  dbf5              BLT      |L1.826|
;;;221     }
;;;222    	IIC_Stop();//产生一个停止条件
00034e  f7fffffe          BL       IIC_Stop
;;;223    
;;;224        return 1; //status == 0;
000352  2001              MOVS     r0,#1
;;;225    	
;;;226    }
000354  e8bd81f0          POP      {r4-r8,pc}
;;;227    
                          ENDP

                  ShortToChar PROC
;;;228    
;;;229    void ShortToChar(short sData,unsigned char cData[])
000358  7008              STRB     r0,[r1,#0]
;;;230    {
;;;231    	cData[0]=sData&0xff;
;;;232    	cData[1]=sData>>8;
00035a  0a02              LSRS     r2,r0,#8
00035c  704a              STRB     r2,[r1,#1]
;;;233    }
00035e  4770              BX       lr
;;;234    short CharToShort(unsigned char cData[])
                          ENDP

                  CharToShort PROC
000360  4601              MOV      r1,r0
;;;235    {
;;;236    	return ((short)cData[1]<<8)|cData[0];
000362  7808              LDRB     r0,[r1,#0]
000364  784a              LDRB     r2,[r1,#1]
000366  ea402002          ORR      r0,r0,r2,LSL #8
00036a  b200              SXTH     r0,r0
;;;237    }
00036c  4770              BX       lr
                          ENDP

00036e  0000              DCW      0x0000
                  |L1.880|
                          DCD      0x40010c00
                  |L1.884|
                          DCD      0x4221819c
                  |L1.888|
                          DCD      0x42218000
